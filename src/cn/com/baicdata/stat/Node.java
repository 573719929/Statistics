package cn.com.baicdata.stat;

/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Node implements org.apache.thrift.TBase<Node, Node._Fields>,
		java.io.Serializable, Cloneable {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Node");

	private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bid", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField BIDRES_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bidres", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField CREATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"creative", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"show", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"click", org.apache.thrift.protocol.TType.I32, (short) 5);
	private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"cost", org.apache.thrift.protocol.TType.DOUBLE, (short) 6);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new NodeStandardSchemeFactory());
		schemes.put(TupleScheme.class, new NodeTupleSchemeFactory());
	}

	public int bid; // required
	public int bidres; // required
	public int creative; // required
	public int show; // required
	public int click; // required
	public double cost; // required
	public double fee; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		BID((short) 1, "bid"), BIDRES((short) 2, "bidres"), CREATIVE((short) 3,
				"creative"), SHOW((short) 4, "show"), CLICK((short) 5, "click"), COST(
				(short) 6, "cost");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // BID
				return BID;
			case 2: // BIDRES
				return BIDRES;
			case 3: // CREATIVE
				return CREATIVE;
			case 4: // SHOW
				return SHOW;
			case 5: // CLICK
				return CLICK;
			case 6: // COST
				return COST;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __BID_ISSET_ID = 0;
	private static final int __BIDRES_ISSET_ID = 1;
	private static final int __CREATIVE_ISSET_ID = 2;
	private static final int __SHOW_ISSET_ID = 3;
	private static final int __CLICK_ISSET_ID = 4;
	private static final int __COST_ISSET_ID = 5;
	private BitSet __isset_bit_vector = new BitSet(6);
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData(
				"bid", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.BIDRES,
				new org.apache.thrift.meta_data.FieldMetaData("bidres",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CREATIVE,
				new org.apache.thrift.meta_data.FieldMetaData("creative",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SHOW, new org.apache.thrift.meta_data.FieldMetaData(
				"show", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CLICK,
				new org.apache.thrift.meta_data.FieldMetaData("click",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData(
				"cost", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.DOUBLE)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				Node.class, metaDataMap);
	}

	public Node() {
		this.bid = 0;

		this.bidres = 0;

		this.creative = 0;

		this.show = 0;

		this.click = 0;

		this.cost = 0;

	}

	public Node(int bid, int bidres, int creative, int show, int click,
			double cost) {
		this();
		this.bid = bid;
		setBidIsSet(true);
		this.bidres = bidres;
		setBidresIsSet(true);
		this.creative = creative;
		setCreativeIsSet(true);
		this.show = show;
		setShowIsSet(true);
		this.click = click;
		setClickIsSet(true);
		this.cost = cost;
		setCostIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Node(Node other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		this.bid = other.bid;
		this.bidres = other.bidres;
		this.creative = other.creative;
		this.show = other.show;
		this.click = other.click;
		this.cost = other.cost;
	}

	public void bid() {
		this.bid += 1;
	}

	public void bid(int c) {
		this.bid += c;
	}

	public void bidres() {
		this.bidres += 1;
	}

	public void bidres(int c) {
		this.bidres += c;
	}

	public void creative() {
		this.creative += 1;
	}

	public void creative(int c) {
		this.creative += c;
	}

	public void show() {
		this.show += 1;
	}

	public void show(int c) {
		this.show += c;
	}

	public void click() {
		this.click += 1;
	}

	public void click(int c) {
		this.click += c;
	}

	public void cost(double c, double f) {
		this.cost += c;
		this.fee += f;
	}

	public Node deepCopy() {
		return new Node(this);
	}

	@Override
	public void clear() {
		this.bid = 0;

		this.bidres = 0;

		this.creative = 0;

		this.show = 0;

		this.click = 0;

		this.cost = 0;

	}

	public int getBid() {
		return this.bid;
	}

	public Node setBid(int bid) {
		this.bid = bid;
		setBidIsSet(true);
		return this;
	}

	public void unsetBid() {
		__isset_bit_vector.clear(__BID_ISSET_ID);
	}

	/**
	 * Returns true if field bid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBid() {
		return __isset_bit_vector.get(__BID_ISSET_ID);
	}

	public void setBidIsSet(boolean value) {
		__isset_bit_vector.set(__BID_ISSET_ID, value);
	}

	public int getBidres() {
		return this.bidres;
	}

	public Node setBidres(int bidres) {
		this.bidres = bidres;
		setBidresIsSet(true);
		return this;
	}

	public void unsetBidres() {
		__isset_bit_vector.clear(__BIDRES_ISSET_ID);
	}

	/**
	 * Returns true if field bidres is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBidres() {
		return __isset_bit_vector.get(__BIDRES_ISSET_ID);
	}

	public void setBidresIsSet(boolean value) {
		__isset_bit_vector.set(__BIDRES_ISSET_ID, value);
	}

	public int getCreative() {
		return this.creative;
	}

	public Node setCreative(int creative) {
		this.creative = creative;
		setCreativeIsSet(true);
		return this;
	}

	public void unsetCreative() {
		__isset_bit_vector.clear(__CREATIVE_ISSET_ID);
	}

	/**
	 * Returns true if field creative is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetCreative() {
		return __isset_bit_vector.get(__CREATIVE_ISSET_ID);
	}

	public void setCreativeIsSet(boolean value) {
		__isset_bit_vector.set(__CREATIVE_ISSET_ID, value);
	}

	public int getShow() {
		return this.show;
	}

	public Node setShow(int show) {
		this.show = show;
		setShowIsSet(true);
		return this;
	}

	public void unsetShow() {
		__isset_bit_vector.clear(__SHOW_ISSET_ID);
	}

	/**
	 * Returns true if field show is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetShow() {
		return __isset_bit_vector.get(__SHOW_ISSET_ID);
	}

	public void setShowIsSet(boolean value) {
		__isset_bit_vector.set(__SHOW_ISSET_ID, value);
	}

	public int getClick() {
		return this.click;
	}

	public Node setClick(int click) {
		this.click = click;
		setClickIsSet(true);
		return this;
	}

	public void unsetClick() {
		__isset_bit_vector.clear(__CLICK_ISSET_ID);
	}

	/**
	 * Returns true if field click is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetClick() {
		return __isset_bit_vector.get(__CLICK_ISSET_ID);
	}

	public void setClickIsSet(boolean value) {
		__isset_bit_vector.set(__CLICK_ISSET_ID, value);
	}

	public double getCost() {
		return this.cost;
	}
	public double getFee() {
		return this.fee;
	}

	public Node setCost(double cost) {
		this.cost = cost;
		setCostIsSet(true);
		return this;
	}

	public void unsetCost() {
		__isset_bit_vector.clear(__COST_ISSET_ID);
	}

	/**
	 * Returns true if field cost is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCost() {
		return __isset_bit_vector.get(__COST_ISSET_ID);
	}

	public void setCostIsSet(boolean value) {
		__isset_bit_vector.set(__COST_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case BID:
			if (value == null) {
				unsetBid();
			} else {
				setBid((Integer) value);
			}
			break;

		case BIDRES:
			if (value == null) {
				unsetBidres();
			} else {
				setBidres((Integer) value);
			}
			break;

		case CREATIVE:
			if (value == null) {
				unsetCreative();
			} else {
				setCreative((Integer) value);
			}
			break;

		case SHOW:
			if (value == null) {
				unsetShow();
			} else {
				setShow((Integer) value);
			}
			break;

		case CLICK:
			if (value == null) {
				unsetClick();
			} else {
				setClick((Integer) value);
			}
			break;

		case COST:
			if (value == null) {
				unsetCost();
			} else {
				setCost((Double) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case BID:
			return Integer.valueOf(getBid());

		case BIDRES:
			return Integer.valueOf(getBidres());

		case CREATIVE:
			return Integer.valueOf(getCreative());

		case SHOW:
			return Integer.valueOf(getShow());

		case CLICK:
			return Integer.valueOf(getClick());

		case COST:
			return Double.valueOf(getCost());

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case BID:
			return isSetBid();
		case BIDRES:
			return isSetBidres();
		case CREATIVE:
			return isSetCreative();
		case SHOW:
			return isSetShow();
		case CLICK:
			return isSetClick();
		case COST:
			return isSetCost();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Node)
			return this.equals((Node) that);
		return false;
	}

	public boolean equals(Node that) {
		if (that == null)
			return false;

		boolean this_present_bid = true;
		boolean that_present_bid = true;
		if (this_present_bid || that_present_bid) {
			if (!(this_present_bid && that_present_bid))
				return false;
			if (this.bid != that.bid)
				return false;
		}

		boolean this_present_bidres = true;
		boolean that_present_bidres = true;
		if (this_present_bidres || that_present_bidres) {
			if (!(this_present_bidres && that_present_bidres))
				return false;
			if (this.bidres != that.bidres)
				return false;
		}

		boolean this_present_creative = true;
		boolean that_present_creative = true;
		if (this_present_creative || that_present_creative) {
			if (!(this_present_creative && that_present_creative))
				return false;
			if (this.creative != that.creative)
				return false;
		}

		boolean this_present_show = true;
		boolean that_present_show = true;
		if (this_present_show || that_present_show) {
			if (!(this_present_show && that_present_show))
				return false;
			if (this.show != that.show)
				return false;
		}

		boolean this_present_click = true;
		boolean that_present_click = true;
		if (this_present_click || that_present_click) {
			if (!(this_present_click && that_present_click))
				return false;
			if (this.click != that.click)
				return false;
		}

		boolean this_present_cost = true;
		boolean that_present_cost = true;
		if (this_present_cost || that_present_cost) {
			if (!(this_present_cost && that_present_cost))
				return false;
			if (this.cost != that.cost)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(Node other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		Node typedOther = (Node) other;

		lastComparison = Boolean.valueOf(isSetBid()).compareTo(
				typedOther.isSetBid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid,
					typedOther.bid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBidres()).compareTo(
				typedOther.isSetBidres());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBidres()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.bidres, typedOther.bidres);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCreative()).compareTo(
				typedOther.isSetCreative());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreative()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.creative, typedOther.creative);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShow()).compareTo(
				typedOther.isSetShow());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShow()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show,
					typedOther.show);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetClick()).compareTo(
				typedOther.isSetClick());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetClick()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.click, typedOther.click);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCost()).compareTo(
				typedOther.isSetCost());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCost()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost,
					typedOther.cost);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		return String.format("%d,%d,%d,%d,%d,%.10f,%.10f", this.bid, this.bidres, this.creative, this.show, this.click, this.cost, this.fee);
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bit_vector = new BitSet(1);
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class NodeStandardSchemeFactory implements SchemeFactory {
		public NodeStandardScheme getScheme() {
			return new NodeStandardScheme();
		}
	}

	private static class NodeStandardScheme extends StandardScheme<Node> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Node struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // BID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.bid = iprot.readI32();
						struct.setBidIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // BIDRES
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.bidres = iprot.readI32();
						struct.setBidresIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // CREATIVE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.creative = iprot.readI32();
						struct.setCreativeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // SHOW
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.show = iprot.readI32();
						struct.setShowIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 5: // CLICK
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.click = iprot.readI32();
						struct.setClickIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 6: // COST
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.cost = iprot.readDouble();
						struct.setCostIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				Node struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(BID_FIELD_DESC);
			oprot.writeI32(struct.bid);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(BIDRES_FIELD_DESC);
			oprot.writeI32(struct.bidres);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CREATIVE_FIELD_DESC);
			oprot.writeI32(struct.creative);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SHOW_FIELD_DESC);
			oprot.writeI32(struct.show);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CLICK_FIELD_DESC);
			oprot.writeI32(struct.click);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(COST_FIELD_DESC);
			oprot.writeDouble(struct.cost);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class NodeTupleSchemeFactory implements SchemeFactory {
		public NodeTupleScheme getScheme() {
			return new NodeTupleScheme();
		}
	}

	private static class NodeTupleScheme extends TupleScheme<Node> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Node struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetBid()) {
				optionals.set(0);
			}
			if (struct.isSetBidres()) {
				optionals.set(1);
			}
			if (struct.isSetCreative()) {
				optionals.set(2);
			}
			if (struct.isSetShow()) {
				optionals.set(3);
			}
			if (struct.isSetClick()) {
				optionals.set(4);
			}
			if (struct.isSetCost()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetBid()) {
				oprot.writeI32(struct.bid);
			}
			if (struct.isSetBidres()) {
				oprot.writeI32(struct.bidres);
			}
			if (struct.isSetCreative()) {
				oprot.writeI32(struct.creative);
			}
			if (struct.isSetShow()) {
				oprot.writeI32(struct.show);
			}
			if (struct.isSetClick()) {
				oprot.writeI32(struct.click);
			}
			if (struct.isSetCost()) {
				oprot.writeDouble(struct.cost);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Node struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.bid = iprot.readI32();
				struct.setBidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.bidres = iprot.readI32();
				struct.setBidresIsSet(true);
			}
			if (incoming.get(2)) {
				struct.creative = iprot.readI32();
				struct.setCreativeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.show = iprot.readI32();
				struct.setShowIsSet(true);
			}
			if (incoming.get(4)) {
				struct.click = iprot.readI32();
				struct.setClickIsSet(true);
			}
			if (incoming.get(5)) {
				struct.cost = iprot.readDouble();
				struct.setCostIsSet(true);
			}
		}
	}

}
