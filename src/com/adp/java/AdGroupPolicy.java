/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.adp.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdGroupPolicy implements org.apache.thrift.TBase<AdGroupPolicy, AdGroupPolicy._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdGroupPolicy");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HERD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("herd_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bid_price", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdGroupPolicyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdGroupPolicyTupleSchemeFactory());
  }

  public int id; // required
  public int group_id; // required
  public int herd_id; // required
  public double bid_price; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    GROUP_ID((short)2, "group_id"),
    HERD_ID((short)3, "herd_id"),
    BID_PRICE((short)4, "bid_price");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GROUP_ID
          return GROUP_ID;
        case 3: // HERD_ID
          return HERD_ID;
        case 4: // BID_PRICE
          return BID_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GROUP_ID_ISSET_ID = 1;
  private static final int __HERD_ID_ISSET_ID = 2;
  private static final int __BID_PRICE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HERD_ID, new org.apache.thrift.meta_data.FieldMetaData("herd_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bid_price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdGroupPolicy.class, metaDataMap);
  }

  public AdGroupPolicy() {
  }

  public AdGroupPolicy(
    int id,
    int group_id,
    int herd_id,
    double bid_price)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.group_id = group_id;
    setGroup_idIsSet(true);
    this.herd_id = herd_id;
    setHerd_idIsSet(true);
    this.bid_price = bid_price;
    setBid_priceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdGroupPolicy(AdGroupPolicy other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.group_id = other.group_id;
    this.herd_id = other.herd_id;
    this.bid_price = other.bid_price;
  }

  public AdGroupPolicy deepCopy() {
    return new AdGroupPolicy(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setGroup_idIsSet(false);
    this.group_id = 0;
    setHerd_idIsSet(false);
    this.herd_id = 0;
    setBid_priceIsSet(false);
    this.bid_price = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public AdGroupPolicy setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getGroup_id() {
    return this.group_id;
  }

  public AdGroupPolicy setGroup_id(int group_id) {
    this.group_id = group_id;
    setGroup_idIsSet(true);
    return this;
  }

  public void unsetGroup_id() {
    __isset_bit_vector.clear(__GROUP_ID_ISSET_ID);
  }

  /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_id() {
    return __isset_bit_vector.get(__GROUP_ID_ISSET_ID);
  }

  public void setGroup_idIsSet(boolean value) {
    __isset_bit_vector.set(__GROUP_ID_ISSET_ID, value);
  }

  public int getHerd_id() {
    return this.herd_id;
  }

  public AdGroupPolicy setHerd_id(int herd_id) {
    this.herd_id = herd_id;
    setHerd_idIsSet(true);
    return this;
  }

  public void unsetHerd_id() {
    __isset_bit_vector.clear(__HERD_ID_ISSET_ID);
  }

  /** Returns true if field herd_id is set (has been assigned a value) and false otherwise */
  public boolean isSetHerd_id() {
    return __isset_bit_vector.get(__HERD_ID_ISSET_ID);
  }

  public void setHerd_idIsSet(boolean value) {
    __isset_bit_vector.set(__HERD_ID_ISSET_ID, value);
  }

  public double getBid_price() {
    return this.bid_price;
  }

  public AdGroupPolicy setBid_price(double bid_price) {
    this.bid_price = bid_price;
    setBid_priceIsSet(true);
    return this;
  }

  public void unsetBid_price() {
    __isset_bit_vector.clear(__BID_PRICE_ISSET_ID);
  }

  /** Returns true if field bid_price is set (has been assigned a value) and false otherwise */
  public boolean isSetBid_price() {
    return __isset_bit_vector.get(__BID_PRICE_ISSET_ID);
  }

  public void setBid_priceIsSet(boolean value) {
    __isset_bit_vector.set(__BID_PRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroup_id();
      } else {
        setGroup_id((Integer)value);
      }
      break;

    case HERD_ID:
      if (value == null) {
        unsetHerd_id();
      } else {
        setHerd_id((Integer)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBid_price();
      } else {
        setBid_price((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case GROUP_ID:
      return Integer.valueOf(getGroup_id());

    case HERD_ID:
      return Integer.valueOf(getHerd_id());

    case BID_PRICE:
      return Double.valueOf(getBid_price());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case GROUP_ID:
      return isSetGroup_id();
    case HERD_ID:
      return isSetHerd_id();
    case BID_PRICE:
      return isSetBid_price();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdGroupPolicy)
      return this.equals((AdGroupPolicy)that);
    return false;
  }

  public boolean equals(AdGroupPolicy that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_group_id = true;
    boolean that_present_group_id = true;
    if (this_present_group_id || that_present_group_id) {
      if (!(this_present_group_id && that_present_group_id))
        return false;
      if (this.group_id != that.group_id)
        return false;
    }

    boolean this_present_herd_id = true;
    boolean that_present_herd_id = true;
    if (this_present_herd_id || that_present_herd_id) {
      if (!(this_present_herd_id && that_present_herd_id))
        return false;
      if (this.herd_id != that.herd_id)
        return false;
    }

    boolean this_present_bid_price = true;
    boolean that_present_bid_price = true;
    if (this_present_bid_price || that_present_bid_price) {
      if (!(this_present_bid_price && that_present_bid_price))
        return false;
      if (this.bid_price != that.bid_price)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AdGroupPolicy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdGroupPolicy typedOther = (AdGroupPolicy)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(typedOther.isSetGroup_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, typedOther.group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHerd_id()).compareTo(typedOther.isSetHerd_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHerd_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.herd_id, typedOther.herd_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBid_price()).compareTo(typedOther.isSetBid_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid_price, typedOther.bid_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdGroupPolicy(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("group_id:");
    sb.append(this.group_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("herd_id:");
    sb.append(this.herd_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bid_price:");
    sb.append(this.bid_price);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdGroupPolicyStandardSchemeFactory implements SchemeFactory {
    public AdGroupPolicyStandardScheme getScheme() {
      return new AdGroupPolicyStandardScheme();
    }
  }

  private static class AdGroupPolicyStandardScheme extends StandardScheme<AdGroupPolicy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdGroupPolicy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.group_id = iprot.readI32();
              struct.setGroup_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HERD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.herd_id = iprot.readI32();
              struct.setHerd_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bid_price = iprot.readDouble();
              struct.setBid_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdGroupPolicy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.group_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HERD_ID_FIELD_DESC);
      oprot.writeI32(struct.herd_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.bid_price);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdGroupPolicyTupleSchemeFactory implements SchemeFactory {
    public AdGroupPolicyTupleScheme getScheme() {
      return new AdGroupPolicyTupleScheme();
    }
  }

  private static class AdGroupPolicyTupleScheme extends TupleScheme<AdGroupPolicy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdGroupPolicy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetGroup_id()) {
        optionals.set(1);
      }
      if (struct.isSetHerd_id()) {
        optionals.set(2);
      }
      if (struct.isSetBid_price()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetGroup_id()) {
        oprot.writeI32(struct.group_id);
      }
      if (struct.isSetHerd_id()) {
        oprot.writeI32(struct.herd_id);
      }
      if (struct.isSetBid_price()) {
        oprot.writeDouble(struct.bid_price);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdGroupPolicy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.group_id = iprot.readI32();
        struct.setGroup_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.herd_id = iprot.readI32();
        struct.setHerd_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bid_price = iprot.readDouble();
        struct.setBid_priceIsSet(true);
      }
    }
  }

}

