/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.adp.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StuffInfo implements org.apache.thrift.TBase<StuffInfo, StuffInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StuffInfo");

  private static final org.apache.thrift.protocol.TField STUFF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuff_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ADID_FIELD_DESC = new org.apache.thrift.protocol.TField("adid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField THUMB_FIELD_DESC = new org.apache.thrift.protocol.TField("thumb", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CROP_FIELD_DESC = new org.apache.thrift.protocol.TField("crop", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LANDING_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("landing_page", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ctime", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mtime", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MEDIA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("media_name", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StuffInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StuffInfoTupleSchemeFactory());
  }

  public int stuff_id; // required
  public String name; // required
  public int uid; // required
  public int adid; // required
  public int width; // required
  public int height; // required
  /**
   * 
   * @see com.adp.java.StuffType
   */
  public com.adp.java.StuffType type; // required
  public String title; // required
  public String desc; // required
  public String addr; // required
  public String thumb; // required
  public String crop; // required
  public String landing_page; // required
  /**
   * 
   * @see com.adp.java.PlanStatus
   */
  public com.adp.java.PlanStatus enabled; // required
  public int ctime; // required
  public int mtime; // required
  public int size; // required
  public String media_name; // required
  public int version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STUFF_ID((short)1, "stuff_id"),
    NAME((short)2, "name"),
    UID((short)3, "uid"),
    ADID((short)4, "adid"),
    WIDTH((short)5, "width"),
    HEIGHT((short)6, "height"),
    /**
     * 
     * @see com.adp.java.StuffType
     */
    TYPE((short)7, "type"),
    TITLE((short)8, "title"),
    DESC((short)9, "desc"),
    ADDR((short)10, "addr"),
    THUMB((short)11, "thumb"),
    CROP((short)12, "crop"),
    LANDING_PAGE((short)13, "landing_page"),
    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    ENABLED((short)14, "enabled"),
    CTIME((short)15, "ctime"),
    MTIME((short)16, "mtime"),
    SIZE((short)17, "size"),
    MEDIA_NAME((short)18, "media_name"),
    VERSION((short)19, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STUFF_ID
          return STUFF_ID;
        case 2: // NAME
          return NAME;
        case 3: // UID
          return UID;
        case 4: // ADID
          return ADID;
        case 5: // WIDTH
          return WIDTH;
        case 6: // HEIGHT
          return HEIGHT;
        case 7: // TYPE
          return TYPE;
        case 8: // TITLE
          return TITLE;
        case 9: // DESC
          return DESC;
        case 10: // ADDR
          return ADDR;
        case 11: // THUMB
          return THUMB;
        case 12: // CROP
          return CROP;
        case 13: // LANDING_PAGE
          return LANDING_PAGE;
        case 14: // ENABLED
          return ENABLED;
        case 15: // CTIME
          return CTIME;
        case 16: // MTIME
          return MTIME;
        case 17: // SIZE
          return SIZE;
        case 18: // MEDIA_NAME
          return MEDIA_NAME;
        case 19: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STUFF_ID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __ADID_ISSET_ID = 2;
  private static final int __WIDTH_ISSET_ID = 3;
  private static final int __HEIGHT_ISSET_ID = 4;
  private static final int __CTIME_ISSET_ID = 5;
  private static final int __MTIME_ISSET_ID = 6;
  private static final int __SIZE_ISSET_ID = 7;
  private static final int __VERSION_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STUFF_ID, new org.apache.thrift.meta_data.FieldMetaData("stuff_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADID, new org.apache.thrift.meta_data.FieldMetaData("adid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.StuffType.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMB, new org.apache.thrift.meta_data.FieldMetaData("thumb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CROP, new org.apache.thrift.meta_data.FieldMetaData("crop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANDING_PAGE, new org.apache.thrift.meta_data.FieldMetaData("landing_page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.PlanStatus.class)));
    tmpMap.put(_Fields.CTIME, new org.apache.thrift.meta_data.FieldMetaData("ctime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MTIME, new org.apache.thrift.meta_data.FieldMetaData("mtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDIA_NAME, new org.apache.thrift.meta_data.FieldMetaData("media_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StuffInfo.class, metaDataMap);
  }

  public StuffInfo() {
    this.type = com.adp.java.StuffType.AD_IMAGE;

    this.enabled = com.adp.java.PlanStatus.RUNNING;

  }

  public StuffInfo(
    int stuff_id,
    String name,
    int uid,
    int adid,
    int width,
    int height,
    com.adp.java.StuffType type,
    String title,
    String desc,
    String addr,
    String thumb,
    String crop,
    String landing_page,
    com.adp.java.PlanStatus enabled,
    int ctime,
    int mtime,
    int size,
    String media_name,
    int version)
  {
    this();
    this.stuff_id = stuff_id;
    setStuff_idIsSet(true);
    this.name = name;
    this.uid = uid;
    setUidIsSet(true);
    this.adid = adid;
    setAdidIsSet(true);
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.type = type;
    this.title = title;
    this.desc = desc;
    this.addr = addr;
    this.thumb = thumb;
    this.crop = crop;
    this.landing_page = landing_page;
    this.enabled = enabled;
    this.ctime = ctime;
    setCtimeIsSet(true);
    this.mtime = mtime;
    setMtimeIsSet(true);
    this.size = size;
    setSizeIsSet(true);
    this.media_name = media_name;
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StuffInfo(StuffInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.stuff_id = other.stuff_id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.uid = other.uid;
    this.adid = other.adid;
    this.width = other.width;
    this.height = other.height;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetAddr()) {
      this.addr = other.addr;
    }
    if (other.isSetThumb()) {
      this.thumb = other.thumb;
    }
    if (other.isSetCrop()) {
      this.crop = other.crop;
    }
    if (other.isSetLanding_page()) {
      this.landing_page = other.landing_page;
    }
    if (other.isSetEnabled()) {
      this.enabled = other.enabled;
    }
    this.ctime = other.ctime;
    this.mtime = other.mtime;
    this.size = other.size;
    if (other.isSetMedia_name()) {
      this.media_name = other.media_name;
    }
    this.version = other.version;
  }

  public StuffInfo deepCopy() {
    return new StuffInfo(this);
  }

  @Override
  public void clear() {
    setStuff_idIsSet(false);
    this.stuff_id = 0;
    this.name = null;
    setUidIsSet(false);
    this.uid = 0;
    setAdidIsSet(false);
    this.adid = 0;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.type = com.adp.java.StuffType.AD_IMAGE;

    this.title = null;
    this.desc = null;
    this.addr = null;
    this.thumb = null;
    this.crop = null;
    this.landing_page = null;
    this.enabled = com.adp.java.PlanStatus.RUNNING;

    setCtimeIsSet(false);
    this.ctime = 0;
    setMtimeIsSet(false);
    this.mtime = 0;
    setSizeIsSet(false);
    this.size = 0;
    this.media_name = null;
    setVersionIsSet(false);
    this.version = 0;
  }

  public int getStuff_id() {
    return this.stuff_id;
  }

  public StuffInfo setStuff_id(int stuff_id) {
    this.stuff_id = stuff_id;
    setStuff_idIsSet(true);
    return this;
  }

  public void unsetStuff_id() {
    __isset_bit_vector.clear(__STUFF_ID_ISSET_ID);
  }

  /** Returns true if field stuff_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStuff_id() {
    return __isset_bit_vector.get(__STUFF_ID_ISSET_ID);
  }

  public void setStuff_idIsSet(boolean value) {
    __isset_bit_vector.set(__STUFF_ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public StuffInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getUid() {
    return this.uid;
  }

  public StuffInfo setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public int getAdid() {
    return this.adid;
  }

  public StuffInfo setAdid(int adid) {
    this.adid = adid;
    setAdidIsSet(true);
    return this;
  }

  public void unsetAdid() {
    __isset_bit_vector.clear(__ADID_ISSET_ID);
  }

  /** Returns true if field adid is set (has been assigned a value) and false otherwise */
  public boolean isSetAdid() {
    return __isset_bit_vector.get(__ADID_ISSET_ID);
  }

  public void setAdidIsSet(boolean value) {
    __isset_bit_vector.set(__ADID_ISSET_ID, value);
  }

  public int getWidth() {
    return this.width;
  }

  public StuffInfo setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bit_vector.clear(__WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return __isset_bit_vector.get(__WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bit_vector.set(__WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public StuffInfo setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bit_vector.clear(__HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return __isset_bit_vector.get(__HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bit_vector.set(__HEIGHT_ISSET_ID, value);
  }

  /**
   * 
   * @see com.adp.java.StuffType
   */
  public com.adp.java.StuffType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.adp.java.StuffType
   */
  public StuffInfo setType(com.adp.java.StuffType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public StuffInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public StuffInfo setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getAddr() {
    return this.addr;
  }

  public StuffInfo setAddr(String addr) {
    this.addr = addr;
    return this;
  }

  public void unsetAddr() {
    this.addr = null;
  }

  /** Returns true if field addr is set (has been assigned a value) and false otherwise */
  public boolean isSetAddr() {
    return this.addr != null;
  }

  public void setAddrIsSet(boolean value) {
    if (!value) {
      this.addr = null;
    }
  }

  public String getThumb() {
    return this.thumb;
  }

  public StuffInfo setThumb(String thumb) {
    this.thumb = thumb;
    return this;
  }

  public void unsetThumb() {
    this.thumb = null;
  }

  /** Returns true if field thumb is set (has been assigned a value) and false otherwise */
  public boolean isSetThumb() {
    return this.thumb != null;
  }

  public void setThumbIsSet(boolean value) {
    if (!value) {
      this.thumb = null;
    }
  }

  public String getCrop() {
    return this.crop;
  }

  public StuffInfo setCrop(String crop) {
    this.crop = crop;
    return this;
  }

  public void unsetCrop() {
    this.crop = null;
  }

  /** Returns true if field crop is set (has been assigned a value) and false otherwise */
  public boolean isSetCrop() {
    return this.crop != null;
  }

  public void setCropIsSet(boolean value) {
    if (!value) {
      this.crop = null;
    }
  }

  public String getLanding_page() {
    return this.landing_page;
  }

  public StuffInfo setLanding_page(String landing_page) {
    this.landing_page = landing_page;
    return this;
  }

  public void unsetLanding_page() {
    this.landing_page = null;
  }

  /** Returns true if field landing_page is set (has been assigned a value) and false otherwise */
  public boolean isSetLanding_page() {
    return this.landing_page != null;
  }

  public void setLanding_pageIsSet(boolean value) {
    if (!value) {
      this.landing_page = null;
    }
  }

  /**
   * 
   * @see com.adp.java.PlanStatus
   */
  public com.adp.java.PlanStatus getEnabled() {
    return this.enabled;
  }

  /**
   * 
   * @see com.adp.java.PlanStatus
   */
  public StuffInfo setEnabled(com.adp.java.PlanStatus enabled) {
    this.enabled = enabled;
    return this;
  }

  public void unsetEnabled() {
    this.enabled = null;
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return this.enabled != null;
  }

  public void setEnabledIsSet(boolean value) {
    if (!value) {
      this.enabled = null;
    }
  }

  public int getCtime() {
    return this.ctime;
  }

  public StuffInfo setCtime(int ctime) {
    this.ctime = ctime;
    setCtimeIsSet(true);
    return this;
  }

  public void unsetCtime() {
    __isset_bit_vector.clear(__CTIME_ISSET_ID);
  }

  /** Returns true if field ctime is set (has been assigned a value) and false otherwise */
  public boolean isSetCtime() {
    return __isset_bit_vector.get(__CTIME_ISSET_ID);
  }

  public void setCtimeIsSet(boolean value) {
    __isset_bit_vector.set(__CTIME_ISSET_ID, value);
  }

  public int getMtime() {
    return this.mtime;
  }

  public StuffInfo setMtime(int mtime) {
    this.mtime = mtime;
    setMtimeIsSet(true);
    return this;
  }

  public void unsetMtime() {
    __isset_bit_vector.clear(__MTIME_ISSET_ID);
  }

  /** Returns true if field mtime is set (has been assigned a value) and false otherwise */
  public boolean isSetMtime() {
    return __isset_bit_vector.get(__MTIME_ISSET_ID);
  }

  public void setMtimeIsSet(boolean value) {
    __isset_bit_vector.set(__MTIME_ISSET_ID, value);
  }

  public int getSize() {
    return this.size;
  }

  public StuffInfo setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bit_vector.clear(__SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return __isset_bit_vector.get(__SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bit_vector.set(__SIZE_ISSET_ID, value);
  }

  public String getMedia_name() {
    return this.media_name;
  }

  public StuffInfo setMedia_name(String media_name) {
    this.media_name = media_name;
    return this;
  }

  public void unsetMedia_name() {
    this.media_name = null;
  }

  /** Returns true if field media_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_name() {
    return this.media_name != null;
  }

  public void setMedia_nameIsSet(boolean value) {
    if (!value) {
      this.media_name = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public StuffInfo setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bit_vector.clear(__VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return __isset_bit_vector.get(__VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bit_vector.set(__VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STUFF_ID:
      if (value == null) {
        unsetStuff_id();
      } else {
        setStuff_id((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case ADID:
      if (value == null) {
        unsetAdid();
      } else {
        setAdid((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.adp.java.StuffType)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case ADDR:
      if (value == null) {
        unsetAddr();
      } else {
        setAddr((String)value);
      }
      break;

    case THUMB:
      if (value == null) {
        unsetThumb();
      } else {
        setThumb((String)value);
      }
      break;

    case CROP:
      if (value == null) {
        unsetCrop();
      } else {
        setCrop((String)value);
      }
      break;

    case LANDING_PAGE:
      if (value == null) {
        unsetLanding_page();
      } else {
        setLanding_page((String)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((com.adp.java.PlanStatus)value);
      }
      break;

    case CTIME:
      if (value == null) {
        unsetCtime();
      } else {
        setCtime((Integer)value);
      }
      break;

    case MTIME:
      if (value == null) {
        unsetMtime();
      } else {
        setMtime((Integer)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case MEDIA_NAME:
      if (value == null) {
        unsetMedia_name();
      } else {
        setMedia_name((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STUFF_ID:
      return Integer.valueOf(getStuff_id());

    case NAME:
      return getName();

    case UID:
      return Integer.valueOf(getUid());

    case ADID:
      return Integer.valueOf(getAdid());

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case TYPE:
      return getType();

    case TITLE:
      return getTitle();

    case DESC:
      return getDesc();

    case ADDR:
      return getAddr();

    case THUMB:
      return getThumb();

    case CROP:
      return getCrop();

    case LANDING_PAGE:
      return getLanding_page();

    case ENABLED:
      return getEnabled();

    case CTIME:
      return Integer.valueOf(getCtime());

    case MTIME:
      return Integer.valueOf(getMtime());

    case SIZE:
      return Integer.valueOf(getSize());

    case MEDIA_NAME:
      return getMedia_name();

    case VERSION:
      return Integer.valueOf(getVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STUFF_ID:
      return isSetStuff_id();
    case NAME:
      return isSetName();
    case UID:
      return isSetUid();
    case ADID:
      return isSetAdid();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case TYPE:
      return isSetType();
    case TITLE:
      return isSetTitle();
    case DESC:
      return isSetDesc();
    case ADDR:
      return isSetAddr();
    case THUMB:
      return isSetThumb();
    case CROP:
      return isSetCrop();
    case LANDING_PAGE:
      return isSetLanding_page();
    case ENABLED:
      return isSetEnabled();
    case CTIME:
      return isSetCtime();
    case MTIME:
      return isSetMtime();
    case SIZE:
      return isSetSize();
    case MEDIA_NAME:
      return isSetMedia_name();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StuffInfo)
      return this.equals((StuffInfo)that);
    return false;
  }

  public boolean equals(StuffInfo that) {
    if (that == null)
      return false;

    boolean this_present_stuff_id = true;
    boolean that_present_stuff_id = true;
    if (this_present_stuff_id || that_present_stuff_id) {
      if (!(this_present_stuff_id && that_present_stuff_id))
        return false;
      if (this.stuff_id != that.stuff_id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_adid = true;
    boolean that_present_adid = true;
    if (this_present_adid || that_present_adid) {
      if (!(this_present_adid && that_present_adid))
        return false;
      if (this.adid != that.adid)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_addr = true && this.isSetAddr();
    boolean that_present_addr = true && that.isSetAddr();
    if (this_present_addr || that_present_addr) {
      if (!(this_present_addr && that_present_addr))
        return false;
      if (!this.addr.equals(that.addr))
        return false;
    }

    boolean this_present_thumb = true && this.isSetThumb();
    boolean that_present_thumb = true && that.isSetThumb();
    if (this_present_thumb || that_present_thumb) {
      if (!(this_present_thumb && that_present_thumb))
        return false;
      if (!this.thumb.equals(that.thumb))
        return false;
    }

    boolean this_present_crop = true && this.isSetCrop();
    boolean that_present_crop = true && that.isSetCrop();
    if (this_present_crop || that_present_crop) {
      if (!(this_present_crop && that_present_crop))
        return false;
      if (!this.crop.equals(that.crop))
        return false;
    }

    boolean this_present_landing_page = true && this.isSetLanding_page();
    boolean that_present_landing_page = true && that.isSetLanding_page();
    if (this_present_landing_page || that_present_landing_page) {
      if (!(this_present_landing_page && that_present_landing_page))
        return false;
      if (!this.landing_page.equals(that.landing_page))
        return false;
    }

    boolean this_present_enabled = true && this.isSetEnabled();
    boolean that_present_enabled = true && that.isSetEnabled();
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (!this.enabled.equals(that.enabled))
        return false;
    }

    boolean this_present_ctime = true;
    boolean that_present_ctime = true;
    if (this_present_ctime || that_present_ctime) {
      if (!(this_present_ctime && that_present_ctime))
        return false;
      if (this.ctime != that.ctime)
        return false;
    }

    boolean this_present_mtime = true;
    boolean that_present_mtime = true;
    if (this_present_mtime || that_present_mtime) {
      if (!(this_present_mtime && that_present_mtime))
        return false;
      if (this.mtime != that.mtime)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_media_name = true && this.isSetMedia_name();
    boolean that_present_media_name = true && that.isSetMedia_name();
    if (this_present_media_name || that_present_media_name) {
      if (!(this_present_media_name && that_present_media_name))
        return false;
      if (!this.media_name.equals(that.media_name))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StuffInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StuffInfo typedOther = (StuffInfo)other;

    lastComparison = Boolean.valueOf(isSetStuff_id()).compareTo(typedOther.isSetStuff_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuff_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuff_id, typedOther.stuff_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdid()).compareTo(typedOther.isSetAdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adid, typedOther.adid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddr()).compareTo(typedOther.isSetAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, typedOther.addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThumb()).compareTo(typedOther.isSetThumb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumb, typedOther.thumb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrop()).compareTo(typedOther.isSetCrop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crop, typedOther.crop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanding_page()).compareTo(typedOther.isSetLanding_page());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanding_page()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landing_page, typedOther.landing_page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnabled()).compareTo(typedOther.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, typedOther.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtime()).compareTo(typedOther.isSetCtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctime, typedOther.ctime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMtime()).compareTo(typedOther.isSetMtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtime, typedOther.mtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_name()).compareTo(typedOther.isSetMedia_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_name, typedOther.media_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StuffInfo(");
    boolean first = true;

    sb.append("stuff_id:");
    sb.append(this.stuff_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adid:");
    sb.append(this.adid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addr:");
    if (this.addr == null) {
      sb.append("null");
    } else {
      sb.append(this.addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thumb:");
    if (this.thumb == null) {
      sb.append("null");
    } else {
      sb.append(this.thumb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crop:");
    if (this.crop == null) {
      sb.append("null");
    } else {
      sb.append(this.crop);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("landing_page:");
    if (this.landing_page == null) {
      sb.append("null");
    } else {
      sb.append(this.landing_page);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    if (this.enabled == null) {
      sb.append("null");
    } else {
      sb.append(this.enabled);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ctime:");
    sb.append(this.ctime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mtime:");
    sb.append(this.mtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("media_name:");
    if (this.media_name == null) {
      sb.append("null");
    } else {
      sb.append(this.media_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StuffInfoStandardSchemeFactory implements SchemeFactory {
    public StuffInfoStandardScheme getScheme() {
      return new StuffInfoStandardScheme();
    }
  }

  private static class StuffInfoStandardScheme extends StandardScheme<StuffInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StuffInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STUFF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stuff_id = iprot.readI32();
              struct.setStuff_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adid = iprot.readI32();
              struct.setAdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.adp.java.StuffType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addr = iprot.readString();
              struct.setAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // THUMB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumb = iprot.readString();
              struct.setThumbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CROP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.crop = iprot.readString();
              struct.setCropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LANDING_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.landing_page = iprot.readString();
              struct.setLanding_pageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enabled = com.adp.java.PlanStatus.findByValue(iprot.readI32());
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ctime = iprot.readI32();
              struct.setCtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mtime = iprot.readI32();
              struct.setMtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MEDIA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_name = iprot.readString();
              struct.setMedia_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StuffInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STUFF_ID_FIELD_DESC);
      oprot.writeI32(struct.stuff_id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADID_FIELD_DESC);
      oprot.writeI32(struct.adid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.addr != null) {
        oprot.writeFieldBegin(ADDR_FIELD_DESC);
        oprot.writeString(struct.addr);
        oprot.writeFieldEnd();
      }
      if (struct.thumb != null) {
        oprot.writeFieldBegin(THUMB_FIELD_DESC);
        oprot.writeString(struct.thumb);
        oprot.writeFieldEnd();
      }
      if (struct.crop != null) {
        oprot.writeFieldBegin(CROP_FIELD_DESC);
        oprot.writeString(struct.crop);
        oprot.writeFieldEnd();
      }
      if (struct.landing_page != null) {
        oprot.writeFieldBegin(LANDING_PAGE_FIELD_DESC);
        oprot.writeString(struct.landing_page);
        oprot.writeFieldEnd();
      }
      if (struct.enabled != null) {
        oprot.writeFieldBegin(ENABLED_FIELD_DESC);
        oprot.writeI32(struct.enabled.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CTIME_FIELD_DESC);
      oprot.writeI32(struct.ctime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MTIME_FIELD_DESC);
      oprot.writeI32(struct.mtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      if (struct.media_name != null) {
        oprot.writeFieldBegin(MEDIA_NAME_FIELD_DESC);
        oprot.writeString(struct.media_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StuffInfoTupleSchemeFactory implements SchemeFactory {
    public StuffInfoTupleScheme getScheme() {
      return new StuffInfoTupleScheme();
    }
  }

  private static class StuffInfoTupleScheme extends TupleScheme<StuffInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StuffInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStuff_id()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetUid()) {
        optionals.set(2);
      }
      if (struct.isSetAdid()) {
        optionals.set(3);
      }
      if (struct.isSetWidth()) {
        optionals.set(4);
      }
      if (struct.isSetHeight()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      if (struct.isSetTitle()) {
        optionals.set(7);
      }
      if (struct.isSetDesc()) {
        optionals.set(8);
      }
      if (struct.isSetAddr()) {
        optionals.set(9);
      }
      if (struct.isSetThumb()) {
        optionals.set(10);
      }
      if (struct.isSetCrop()) {
        optionals.set(11);
      }
      if (struct.isSetLanding_page()) {
        optionals.set(12);
      }
      if (struct.isSetEnabled()) {
        optionals.set(13);
      }
      if (struct.isSetCtime()) {
        optionals.set(14);
      }
      if (struct.isSetMtime()) {
        optionals.set(15);
      }
      if (struct.isSetSize()) {
        optionals.set(16);
      }
      if (struct.isSetMedia_name()) {
        optionals.set(17);
      }
      if (struct.isSetVersion()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetStuff_id()) {
        oprot.writeI32(struct.stuff_id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetAdid()) {
        oprot.writeI32(struct.adid);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetAddr()) {
        oprot.writeString(struct.addr);
      }
      if (struct.isSetThumb()) {
        oprot.writeString(struct.thumb);
      }
      if (struct.isSetCrop()) {
        oprot.writeString(struct.crop);
      }
      if (struct.isSetLanding_page()) {
        oprot.writeString(struct.landing_page);
      }
      if (struct.isSetEnabled()) {
        oprot.writeI32(struct.enabled.getValue());
      }
      if (struct.isSetCtime()) {
        oprot.writeI32(struct.ctime);
      }
      if (struct.isSetMtime()) {
        oprot.writeI32(struct.mtime);
      }
      if (struct.isSetSize()) {
        oprot.writeI32(struct.size);
      }
      if (struct.isSetMedia_name()) {
        oprot.writeString(struct.media_name);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StuffInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.stuff_id = iprot.readI32();
        struct.setStuff_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.adid = iprot.readI32();
        struct.setAdidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = com.adp.java.StuffType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(8)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(9)) {
        struct.addr = iprot.readString();
        struct.setAddrIsSet(true);
      }
      if (incoming.get(10)) {
        struct.thumb = iprot.readString();
        struct.setThumbIsSet(true);
      }
      if (incoming.get(11)) {
        struct.crop = iprot.readString();
        struct.setCropIsSet(true);
      }
      if (incoming.get(12)) {
        struct.landing_page = iprot.readString();
        struct.setLanding_pageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.enabled = com.adp.java.PlanStatus.findByValue(iprot.readI32());
        struct.setEnabledIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ctime = iprot.readI32();
        struct.setCtimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.mtime = iprot.readI32();
        struct.setMtimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.size = iprot.readI32();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.media_name = iprot.readString();
        struct.setMedia_nameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
    }
  }

}

