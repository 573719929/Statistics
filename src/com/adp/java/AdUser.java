/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.adp.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdUser implements org.apache.thrift.TBase<AdUser, AdUser._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdUser");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CELL_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("cell_phone", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("role_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("user_local", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zip_code", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COLUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("colum1", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField COLUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("colum2", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reg_time", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ACCOUNT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("account_status", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("up_time", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creator_id", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdUserTupleSchemeFactory());
  }

  public int uid; // required
  public String user_name; // required
  public String passwd; // required
  public String cell_phone; // required
  public int role_id; // required
  public String address; // required
  public String tel; // required
  public String user_local; // required
  public double account; // required
  public String zip_code; // required
  public int colum1; // required
  public String colum2; // required
  public int reg_time; // required
  public String host; // required
  /**
   * 
   * @see AccountStatus
   */
  public AccountStatus account_status; // required
  public int up_time; // required
  public int creator_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    USER_NAME((short)2, "user_name"),
    PASSWD((short)3, "passwd"),
    CELL_PHONE((short)4, "cell_phone"),
    ROLE_ID((short)5, "role_id"),
    ADDRESS((short)6, "address"),
    TEL((short)7, "tel"),
    USER_LOCAL((short)8, "user_local"),
    ACCOUNT((short)9, "account"),
    ZIP_CODE((short)10, "zip_code"),
    COLUM1((short)11, "colum1"),
    COLUM2((short)12, "colum2"),
    REG_TIME((short)13, "reg_time"),
    HOST((short)14, "host"),
    /**
     * 
     * @see AccountStatus
     */
    ACCOUNT_STATUS((short)15, "account_status"),
    UP_TIME((short)16, "up_time"),
    CREATOR_ID((short)17, "creator_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // PASSWD
          return PASSWD;
        case 4: // CELL_PHONE
          return CELL_PHONE;
        case 5: // ROLE_ID
          return ROLE_ID;
        case 6: // ADDRESS
          return ADDRESS;
        case 7: // TEL
          return TEL;
        case 8: // USER_LOCAL
          return USER_LOCAL;
        case 9: // ACCOUNT
          return ACCOUNT;
        case 10: // ZIP_CODE
          return ZIP_CODE;
        case 11: // COLUM1
          return COLUM1;
        case 12: // COLUM2
          return COLUM2;
        case 13: // REG_TIME
          return REG_TIME;
        case 14: // HOST
          return HOST;
        case 15: // ACCOUNT_STATUS
          return ACCOUNT_STATUS;
        case 16: // UP_TIME
          return UP_TIME;
        case 17: // CREATOR_ID
          return CREATOR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __ROLE_ID_ISSET_ID = 1;
  private static final int __ACCOUNT_ISSET_ID = 2;
  private static final int __COLUM1_ISSET_ID = 3;
  private static final int __REG_TIME_ISSET_ID = 4;
  private static final int __UP_TIME_ISSET_ID = 5;
  private static final int __CREATOR_ID_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CELL_PHONE, new org.apache.thrift.meta_data.FieldMetaData("cell_phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("role_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LOCAL, new org.apache.thrift.meta_data.FieldMetaData("user_local", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("zip_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUM1, new org.apache.thrift.meta_data.FieldMetaData("colum1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUM2, new org.apache.thrift.meta_data.FieldMetaData("colum2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_TIME, new org.apache.thrift.meta_data.FieldMetaData("reg_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("account_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AccountStatus.class)));
    tmpMap.put(_Fields.UP_TIME, new org.apache.thrift.meta_data.FieldMetaData("up_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creator_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdUser.class, metaDataMap);
  }

  public AdUser() {
    this.account_status = com.adp.java.AccountStatus.NORMAL;

  }

  public AdUser(
    int uid,
    String user_name,
    String passwd,
    String cell_phone,
    int role_id,
    String address,
    String tel,
    String user_local,
    double account,
    String zip_code,
    int colum1,
    String colum2,
    int reg_time,
    String host,
    AccountStatus account_status,
    int up_time,
    int creator_id)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.user_name = user_name;
    this.passwd = passwd;
    this.cell_phone = cell_phone;
    this.role_id = role_id;
    setRole_idIsSet(true);
    this.address = address;
    this.tel = tel;
    this.user_local = user_local;
    this.account = account;
    setAccountIsSet(true);
    this.zip_code = zip_code;
    this.colum1 = colum1;
    setColum1IsSet(true);
    this.colum2 = colum2;
    this.reg_time = reg_time;
    setReg_timeIsSet(true);
    this.host = host;
    this.account_status = account_status;
    this.up_time = up_time;
    setUp_timeIsSet(true);
    this.creator_id = creator_id;
    setCreator_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdUser(AdUser other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.uid = other.uid;
    if (other.isSetUser_name()) {
      this.user_name = other.user_name;
    }
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    if (other.isSetCell_phone()) {
      this.cell_phone = other.cell_phone;
    }
    this.role_id = other.role_id;
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetTel()) {
      this.tel = other.tel;
    }
    if (other.isSetUser_local()) {
      this.user_local = other.user_local;
    }
    this.account = other.account;
    if (other.isSetZip_code()) {
      this.zip_code = other.zip_code;
    }
    this.colum1 = other.colum1;
    if (other.isSetColum2()) {
      this.colum2 = other.colum2;
    }
    this.reg_time = other.reg_time;
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetAccount_status()) {
      this.account_status = other.account_status;
    }
    this.up_time = other.up_time;
    this.creator_id = other.creator_id;
  }

  public AdUser deepCopy() {
    return new AdUser(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    this.user_name = null;
    this.passwd = null;
    this.cell_phone = null;
    setRole_idIsSet(false);
    this.role_id = 0;
    this.address = null;
    this.tel = null;
    this.user_local = null;
    setAccountIsSet(false);
    this.account = 0.0;
    this.zip_code = null;
    setColum1IsSet(false);
    this.colum1 = 0;
    this.colum2 = null;
    setReg_timeIsSet(false);
    this.reg_time = 0;
    this.host = null;
    this.account_status = com.adp.java.AccountStatus.NORMAL;

    setUp_timeIsSet(false);
    this.up_time = 0;
    setCreator_idIsSet(false);
    this.creator_id = 0;
  }

  public int getUid() {
    return this.uid;
  }

  public AdUser setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public String getUser_name() {
    return this.user_name;
  }

  public AdUser setUser_name(String user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean value) {
    if (!value) {
      this.user_name = null;
    }
  }

  public String getPasswd() {
    return this.passwd;
  }

  public AdUser setPasswd(String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  public String getCell_phone() {
    return this.cell_phone;
  }

  public AdUser setCell_phone(String cell_phone) {
    this.cell_phone = cell_phone;
    return this;
  }

  public void unsetCell_phone() {
    this.cell_phone = null;
  }

  /** Returns true if field cell_phone is set (has been assigned a value) and false otherwise */
  public boolean isSetCell_phone() {
    return this.cell_phone != null;
  }

  public void setCell_phoneIsSet(boolean value) {
    if (!value) {
      this.cell_phone = null;
    }
  }

  public int getRole_id() {
    return this.role_id;
  }

  public AdUser setRole_id(int role_id) {
    this.role_id = role_id;
    setRole_idIsSet(true);
    return this;
  }

  public void unsetRole_id() {
    __isset_bit_vector.clear(__ROLE_ID_ISSET_ID);
  }

  /** Returns true if field role_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRole_id() {
    return __isset_bit_vector.get(__ROLE_ID_ISSET_ID);
  }

  public void setRole_idIsSet(boolean value) {
    __isset_bit_vector.set(__ROLE_ID_ISSET_ID, value);
  }

  public String getAddress() {
    return this.address;
  }

  public AdUser setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getTel() {
    return this.tel;
  }

  public AdUser setTel(String tel) {
    this.tel = tel;
    return this;
  }

  public void unsetTel() {
    this.tel = null;
  }

  /** Returns true if field tel is set (has been assigned a value) and false otherwise */
  public boolean isSetTel() {
    return this.tel != null;
  }

  public void setTelIsSet(boolean value) {
    if (!value) {
      this.tel = null;
    }
  }

  public String getUser_local() {
    return this.user_local;
  }

  public AdUser setUser_local(String user_local) {
    this.user_local = user_local;
    return this;
  }

  public void unsetUser_local() {
    this.user_local = null;
  }

  /** Returns true if field user_local is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_local() {
    return this.user_local != null;
  }

  public void setUser_localIsSet(boolean value) {
    if (!value) {
      this.user_local = null;
    }
  }

  public double getAccount() {
    return this.account;
  }

  public AdUser setAccount(double account) {
    this.account = account;
    setAccountIsSet(true);
    return this;
  }

  public void unsetAccount() {
    __isset_bit_vector.clear(__ACCOUNT_ISSET_ID);
  }

  /** Returns true if field account is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount() {
    return __isset_bit_vector.get(__ACCOUNT_ISSET_ID);
  }

  public void setAccountIsSet(boolean value) {
    __isset_bit_vector.set(__ACCOUNT_ISSET_ID, value);
  }

  public String getZip_code() {
    return this.zip_code;
  }

  public AdUser setZip_code(String zip_code) {
    this.zip_code = zip_code;
    return this;
  }

  public void unsetZip_code() {
    this.zip_code = null;
  }

  /** Returns true if field zip_code is set (has been assigned a value) and false otherwise */
  public boolean isSetZip_code() {
    return this.zip_code != null;
  }

  public void setZip_codeIsSet(boolean value) {
    if (!value) {
      this.zip_code = null;
    }
  }

  public int getColum1() {
    return this.colum1;
  }

  public AdUser setColum1(int colum1) {
    this.colum1 = colum1;
    setColum1IsSet(true);
    return this;
  }

  public void unsetColum1() {
    __isset_bit_vector.clear(__COLUM1_ISSET_ID);
  }

  /** Returns true if field colum1 is set (has been assigned a value) and false otherwise */
  public boolean isSetColum1() {
    return __isset_bit_vector.get(__COLUM1_ISSET_ID);
  }

  public void setColum1IsSet(boolean value) {
    __isset_bit_vector.set(__COLUM1_ISSET_ID, value);
  }

  public String getColum2() {
    return this.colum2;
  }

  public AdUser setColum2(String colum2) {
    this.colum2 = colum2;
    return this;
  }

  public void unsetColum2() {
    this.colum2 = null;
  }

  /** Returns true if field colum2 is set (has been assigned a value) and false otherwise */
  public boolean isSetColum2() {
    return this.colum2 != null;
  }

  public void setColum2IsSet(boolean value) {
    if (!value) {
      this.colum2 = null;
    }
  }

  public int getReg_time() {
    return this.reg_time;
  }

  public AdUser setReg_time(int reg_time) {
    this.reg_time = reg_time;
    setReg_timeIsSet(true);
    return this;
  }

  public void unsetReg_time() {
    __isset_bit_vector.clear(__REG_TIME_ISSET_ID);
  }

  /** Returns true if field reg_time is set (has been assigned a value) and false otherwise */
  public boolean isSetReg_time() {
    return __isset_bit_vector.get(__REG_TIME_ISSET_ID);
  }

  public void setReg_timeIsSet(boolean value) {
    __isset_bit_vector.set(__REG_TIME_ISSET_ID, value);
  }

  public String getHost() {
    return this.host;
  }

  public AdUser setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  /**
   * 
   * @see AccountStatus
   */
  public AccountStatus getAccount_status() {
    return this.account_status;
  }

  /**
   * 
   * @see AccountStatus
   */
  public AdUser setAccount_status(AccountStatus account_status) {
    this.account_status = account_status;
    return this;
  }

  public void unsetAccount_status() {
    this.account_status = null;
  }

  /** Returns true if field account_status is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount_status() {
    return this.account_status != null;
  }

  public void setAccount_statusIsSet(boolean value) {
    if (!value) {
      this.account_status = null;
    }
  }

  public int getUp_time() {
    return this.up_time;
  }

  public AdUser setUp_time(int up_time) {
    this.up_time = up_time;
    setUp_timeIsSet(true);
    return this;
  }

  public void unsetUp_time() {
    __isset_bit_vector.clear(__UP_TIME_ISSET_ID);
  }

  /** Returns true if field up_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUp_time() {
    return __isset_bit_vector.get(__UP_TIME_ISSET_ID);
  }

  public void setUp_timeIsSet(boolean value) {
    __isset_bit_vector.set(__UP_TIME_ISSET_ID, value);
  }

  public int getCreator_id() {
    return this.creator_id;
  }

  public AdUser setCreator_id(int creator_id) {
    this.creator_id = creator_id;
    setCreator_idIsSet(true);
    return this;
  }

  public void unsetCreator_id() {
    __isset_bit_vector.clear(__CREATOR_ID_ISSET_ID);
  }

  /** Returns true if field creator_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator_id() {
    return __isset_bit_vector.get(__CREATOR_ID_ISSET_ID);
  }

  public void setCreator_idIsSet(boolean value) {
    __isset_bit_vector.set(__CREATOR_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUser_name();
      } else {
        setUser_name((String)value);
      }
      break;

    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((String)value);
      }
      break;

    case CELL_PHONE:
      if (value == null) {
        unsetCell_phone();
      } else {
        setCell_phone((String)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRole_id();
      } else {
        setRole_id((Integer)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case TEL:
      if (value == null) {
        unsetTel();
      } else {
        setTel((String)value);
      }
      break;

    case USER_LOCAL:
      if (value == null) {
        unsetUser_local();
      } else {
        setUser_local((String)value);
      }
      break;

    case ACCOUNT:
      if (value == null) {
        unsetAccount();
      } else {
        setAccount((Double)value);
      }
      break;

    case ZIP_CODE:
      if (value == null) {
        unsetZip_code();
      } else {
        setZip_code((String)value);
      }
      break;

    case COLUM1:
      if (value == null) {
        unsetColum1();
      } else {
        setColum1((Integer)value);
      }
      break;

    case COLUM2:
      if (value == null) {
        unsetColum2();
      } else {
        setColum2((String)value);
      }
      break;

    case REG_TIME:
      if (value == null) {
        unsetReg_time();
      } else {
        setReg_time((Integer)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case ACCOUNT_STATUS:
      if (value == null) {
        unsetAccount_status();
      } else {
        setAccount_status((AccountStatus)value);
      }
      break;

    case UP_TIME:
      if (value == null) {
        unsetUp_time();
      } else {
        setUp_time((Integer)value);
      }
      break;

    case CREATOR_ID:
      if (value == null) {
        unsetCreator_id();
      } else {
        setCreator_id((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return Integer.valueOf(getUid());

    case USER_NAME:
      return getUser_name();

    case PASSWD:
      return getPasswd();

    case CELL_PHONE:
      return getCell_phone();

    case ROLE_ID:
      return Integer.valueOf(getRole_id());

    case ADDRESS:
      return getAddress();

    case TEL:
      return getTel();

    case USER_LOCAL:
      return getUser_local();

    case ACCOUNT:
      return Double.valueOf(getAccount());

    case ZIP_CODE:
      return getZip_code();

    case COLUM1:
      return Integer.valueOf(getColum1());

    case COLUM2:
      return getColum2();

    case REG_TIME:
      return Integer.valueOf(getReg_time());

    case HOST:
      return getHost();

    case ACCOUNT_STATUS:
      return getAccount_status();

    case UP_TIME:
      return Integer.valueOf(getUp_time());

    case CREATOR_ID:
      return Integer.valueOf(getCreator_id());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case USER_NAME:
      return isSetUser_name();
    case PASSWD:
      return isSetPasswd();
    case CELL_PHONE:
      return isSetCell_phone();
    case ROLE_ID:
      return isSetRole_id();
    case ADDRESS:
      return isSetAddress();
    case TEL:
      return isSetTel();
    case USER_LOCAL:
      return isSetUser_local();
    case ACCOUNT:
      return isSetAccount();
    case ZIP_CODE:
      return isSetZip_code();
    case COLUM1:
      return isSetColum1();
    case COLUM2:
      return isSetColum2();
    case REG_TIME:
      return isSetReg_time();
    case HOST:
      return isSetHost();
    case ACCOUNT_STATUS:
      return isSetAccount_status();
    case UP_TIME:
      return isSetUp_time();
    case CREATOR_ID:
      return isSetCreator_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdUser)
      return this.equals((AdUser)that);
    return false;
  }

  public boolean equals(AdUser that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_user_name = true && this.isSetUser_name();
    boolean that_present_user_name = true && that.isSetUser_name();
    if (this_present_user_name || that_present_user_name) {
      if (!(this_present_user_name && that_present_user_name))
        return false;
      if (!this.user_name.equals(that.user_name))
        return false;
    }

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_cell_phone = true && this.isSetCell_phone();
    boolean that_present_cell_phone = true && that.isSetCell_phone();
    if (this_present_cell_phone || that_present_cell_phone) {
      if (!(this_present_cell_phone && that_present_cell_phone))
        return false;
      if (!this.cell_phone.equals(that.cell_phone))
        return false;
    }

    boolean this_present_role_id = true;
    boolean that_present_role_id = true;
    if (this_present_role_id || that_present_role_id) {
      if (!(this_present_role_id && that_present_role_id))
        return false;
      if (this.role_id != that.role_id)
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_tel = true && this.isSetTel();
    boolean that_present_tel = true && that.isSetTel();
    if (this_present_tel || that_present_tel) {
      if (!(this_present_tel && that_present_tel))
        return false;
      if (!this.tel.equals(that.tel))
        return false;
    }

    boolean this_present_user_local = true && this.isSetUser_local();
    boolean that_present_user_local = true && that.isSetUser_local();
    if (this_present_user_local || that_present_user_local) {
      if (!(this_present_user_local && that_present_user_local))
        return false;
      if (!this.user_local.equals(that.user_local))
        return false;
    }

    boolean this_present_account = true;
    boolean that_present_account = true;
    if (this_present_account || that_present_account) {
      if (!(this_present_account && that_present_account))
        return false;
      if (this.account != that.account)
        return false;
    }

    boolean this_present_zip_code = true && this.isSetZip_code();
    boolean that_present_zip_code = true && that.isSetZip_code();
    if (this_present_zip_code || that_present_zip_code) {
      if (!(this_present_zip_code && that_present_zip_code))
        return false;
      if (!this.zip_code.equals(that.zip_code))
        return false;
    }

    boolean this_present_colum1 = true;
    boolean that_present_colum1 = true;
    if (this_present_colum1 || that_present_colum1) {
      if (!(this_present_colum1 && that_present_colum1))
        return false;
      if (this.colum1 != that.colum1)
        return false;
    }

    boolean this_present_colum2 = true && this.isSetColum2();
    boolean that_present_colum2 = true && that.isSetColum2();
    if (this_present_colum2 || that_present_colum2) {
      if (!(this_present_colum2 && that_present_colum2))
        return false;
      if (!this.colum2.equals(that.colum2))
        return false;
    }

    boolean this_present_reg_time = true;
    boolean that_present_reg_time = true;
    if (this_present_reg_time || that_present_reg_time) {
      if (!(this_present_reg_time && that_present_reg_time))
        return false;
      if (this.reg_time != that.reg_time)
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_account_status = true && this.isSetAccount_status();
    boolean that_present_account_status = true && that.isSetAccount_status();
    if (this_present_account_status || that_present_account_status) {
      if (!(this_present_account_status && that_present_account_status))
        return false;
      if (!this.account_status.equals(that.account_status))
        return false;
    }

    boolean this_present_up_time = true;
    boolean that_present_up_time = true;
    if (this_present_up_time || that_present_up_time) {
      if (!(this_present_up_time && that_present_up_time))
        return false;
      if (this.up_time != that.up_time)
        return false;
    }

    boolean this_present_creator_id = true;
    boolean that_present_creator_id = true;
    if (this_present_creator_id || that_present_creator_id) {
      if (!(this_present_creator_id && that_present_creator_id))
        return false;
      if (this.creator_id != that.creator_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AdUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdUser typedOther = (AdUser)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPasswd()).compareTo(typedOther.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, typedOther.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCell_phone()).compareTo(typedOther.isSetCell_phone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCell_phone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell_phone, typedOther.cell_phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole_id()).compareTo(typedOther.isSetRole_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role_id, typedOther.role_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTel()).compareTo(typedOther.isSetTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, typedOther.tel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_local()).compareTo(typedOther.isSetUser_local());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_local()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_local, typedOther.user_local);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, typedOther.account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZip_code()).compareTo(typedOther.isSetZip_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZip_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zip_code, typedOther.zip_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColum1()).compareTo(typedOther.isSetColum1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColum1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colum1, typedOther.colum1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColum2()).compareTo(typedOther.isSetColum2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColum2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colum2, typedOther.colum2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReg_time()).compareTo(typedOther.isSetReg_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReg_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reg_time, typedOther.reg_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccount_status()).compareTo(typedOther.isSetAccount_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account_status, typedOther.account_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUp_time()).compareTo(typedOther.isSetUp_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUp_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.up_time, typedOther.up_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator_id()).compareTo(typedOther.isSetCreator_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator_id, typedOther.creator_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdUser(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_name:");
    if (this.user_name == null) {
      sb.append("null");
    } else {
      sb.append(this.user_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cell_phone:");
    if (this.cell_phone == null) {
      sb.append("null");
    } else {
      sb.append(this.cell_phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("role_id:");
    sb.append(this.role_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tel:");
    if (this.tel == null) {
      sb.append("null");
    } else {
      sb.append(this.tel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_local:");
    if (this.user_local == null) {
      sb.append("null");
    } else {
      sb.append(this.user_local);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("account:");
    sb.append(this.account);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zip_code:");
    if (this.zip_code == null) {
      sb.append("null");
    } else {
      sb.append(this.zip_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("colum1:");
    sb.append(this.colum1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("colum2:");
    if (this.colum2 == null) {
      sb.append("null");
    } else {
      sb.append(this.colum2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reg_time:");
    sb.append(this.reg_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("account_status:");
    if (this.account_status == null) {
      sb.append("null");
    } else {
      sb.append(this.account_status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("up_time:");
    sb.append(this.up_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator_id:");
    sb.append(this.creator_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdUserStandardSchemeFactory implements SchemeFactory {
    public AdUserStandardScheme getScheme() {
      return new AdUserStandardScheme();
    }
  }

  private static class AdUserStandardScheme extends StandardScheme<AdUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_name = iprot.readString();
              struct.setUser_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CELL_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cell_phone = iprot.readString();
              struct.setCell_phoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role_id = iprot.readI32();
              struct.setRole_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tel = iprot.readString();
              struct.setTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_LOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_local = iprot.readString();
              struct.setUser_localIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.account = iprot.readDouble();
              struct.setAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zip_code = iprot.readString();
              struct.setZip_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COLUM1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.colum1 = iprot.readI32();
              struct.setColum1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COLUM2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colum2 = iprot.readString();
              struct.setColum2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reg_time = iprot.readI32();
              struct.setReg_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACCOUNT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.account_status = AccountStatus.findByValue(iprot.readI32());
              struct.setAccount_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.up_time = iprot.readI32();
              struct.setUp_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creator_id = iprot.readI32();
              struct.setCreator_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      if (struct.user_name != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.user_name);
        oprot.writeFieldEnd();
      }
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      if (struct.cell_phone != null) {
        oprot.writeFieldBegin(CELL_PHONE_FIELD_DESC);
        oprot.writeString(struct.cell_phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
      oprot.writeI32(struct.role_id);
      oprot.writeFieldEnd();
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.tel != null) {
        oprot.writeFieldBegin(TEL_FIELD_DESC);
        oprot.writeString(struct.tel);
        oprot.writeFieldEnd();
      }
      if (struct.user_local != null) {
        oprot.writeFieldBegin(USER_LOCAL_FIELD_DESC);
        oprot.writeString(struct.user_local);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.account);
      oprot.writeFieldEnd();
      if (struct.zip_code != null) {
        oprot.writeFieldBegin(ZIP_CODE_FIELD_DESC);
        oprot.writeString(struct.zip_code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLUM1_FIELD_DESC);
      oprot.writeI32(struct.colum1);
      oprot.writeFieldEnd();
      if (struct.colum2 != null) {
        oprot.writeFieldBegin(COLUM2_FIELD_DESC);
        oprot.writeString(struct.colum2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REG_TIME_FIELD_DESC);
      oprot.writeI32(struct.reg_time);
      oprot.writeFieldEnd();
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      if (struct.account_status != null) {
        oprot.writeFieldBegin(ACCOUNT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.account_status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UP_TIME_FIELD_DESC);
      oprot.writeI32(struct.up_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.creator_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdUserTupleSchemeFactory implements SchemeFactory {
    public AdUserTupleScheme getScheme() {
      return new AdUserTupleScheme();
    }
  }

  private static class AdUserTupleScheme extends TupleScheme<AdUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetUser_name()) {
        optionals.set(1);
      }
      if (struct.isSetPasswd()) {
        optionals.set(2);
      }
      if (struct.isSetCell_phone()) {
        optionals.set(3);
      }
      if (struct.isSetRole_id()) {
        optionals.set(4);
      }
      if (struct.isSetAddress()) {
        optionals.set(5);
      }
      if (struct.isSetTel()) {
        optionals.set(6);
      }
      if (struct.isSetUser_local()) {
        optionals.set(7);
      }
      if (struct.isSetAccount()) {
        optionals.set(8);
      }
      if (struct.isSetZip_code()) {
        optionals.set(9);
      }
      if (struct.isSetColum1()) {
        optionals.set(10);
      }
      if (struct.isSetColum2()) {
        optionals.set(11);
      }
      if (struct.isSetReg_time()) {
        optionals.set(12);
      }
      if (struct.isSetHost()) {
        optionals.set(13);
      }
      if (struct.isSetAccount_status()) {
        optionals.set(14);
      }
      if (struct.isSetUp_time()) {
        optionals.set(15);
      }
      if (struct.isSetCreator_id()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetUser_name()) {
        oprot.writeString(struct.user_name);
      }
      if (struct.isSetPasswd()) {
        oprot.writeString(struct.passwd);
      }
      if (struct.isSetCell_phone()) {
        oprot.writeString(struct.cell_phone);
      }
      if (struct.isSetRole_id()) {
        oprot.writeI32(struct.role_id);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetTel()) {
        oprot.writeString(struct.tel);
      }
      if (struct.isSetUser_local()) {
        oprot.writeString(struct.user_local);
      }
      if (struct.isSetAccount()) {
        oprot.writeDouble(struct.account);
      }
      if (struct.isSetZip_code()) {
        oprot.writeString(struct.zip_code);
      }
      if (struct.isSetColum1()) {
        oprot.writeI32(struct.colum1);
      }
      if (struct.isSetColum2()) {
        oprot.writeString(struct.colum2);
      }
      if (struct.isSetReg_time()) {
        oprot.writeI32(struct.reg_time);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetAccount_status()) {
        oprot.writeI32(struct.account_status.getValue());
      }
      if (struct.isSetUp_time()) {
        oprot.writeI32(struct.up_time);
      }
      if (struct.isSetCreator_id()) {
        oprot.writeI32(struct.creator_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user_name = iprot.readString();
        struct.setUser_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.passwd = iprot.readString();
        struct.setPasswdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cell_phone = iprot.readString();
        struct.setCell_phoneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.role_id = iprot.readI32();
        struct.setRole_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tel = iprot.readString();
        struct.setTelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.user_local = iprot.readString();
        struct.setUser_localIsSet(true);
      }
      if (incoming.get(8)) {
        struct.account = iprot.readDouble();
        struct.setAccountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.zip_code = iprot.readString();
        struct.setZip_codeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.colum1 = iprot.readI32();
        struct.setColum1IsSet(true);
      }
      if (incoming.get(11)) {
        struct.colum2 = iprot.readString();
        struct.setColum2IsSet(true);
      }
      if (incoming.get(12)) {
        struct.reg_time = iprot.readI32();
        struct.setReg_timeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(14)) {
        struct.account_status = AccountStatus.findByValue(iprot.readI32());
        struct.setAccount_statusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.up_time = iprot.readI32();
        struct.setUp_timeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.creator_id = iprot.readI32();
        struct.setCreator_idIsSet(true);
      }
    }
  }

}

