/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.adp.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdPlan implements org.apache.thrift.TBase<AdPlan, AdPlan._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdPlan");

  private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("vocation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BILLING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("billing_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("budget", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IS_DATE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_date_limit", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DAY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("day_max", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ADTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("adtime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ctime", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField MTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mtime", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField POP_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("pop_result", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField RELEASE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("release_type", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SMOOTH_CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("smooth_control", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField NET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("net_type", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CPM_FIELD_DESC = new org.apache.thrift.protocol.TField("cpm", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField DAILY_CONSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("daily_consum", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField REAL_CONSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("real_consum", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField CPC_FIELD_DESC = new org.apache.thrift.protocol.TField("cpc", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField COLUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("colum1", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField COLUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("colum2", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField MEDIA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("media_name", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField ORDER_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("order_policy", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField ALL_DAY_OR_NOT_FIELD_DESC = new org.apache.thrift.protocol.TField("all_day_or_not", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField INTERVALS_FIELD_DESC = new org.apache.thrift.protocol.TField("intervals", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField TIME_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("time_interval", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField DAY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("day_num", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField SHOW_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("show_num", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("type_id", org.apache.thrift.protocol.TType.I32, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdPlanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdPlanTupleSchemeFactory());
  }

  public int plan_id; // required
  public String plan_name; // required
  public int uid; // required
  public String vocation; // required
  /**
   * 
   * @see com.adp.java.AdChargeType
   */
  public com.adp.java.AdChargeType billing_type; // required
  public double budget; // required
  /**
   * 
   * @see com.adp.java.CurrencyType
   */
  public com.adp.java.CurrencyType currency; // required
  public int start_date; // required
  public int end_date; // required
  public int is_date_limit; // required
  public int day_max; // required
  public String adtime; // required
  /**
   * 
   * @see com.adp.java.PlanStatus
   */
  public com.adp.java.PlanStatus enable; // required
  public int ctime; // required
  public int mtime; // required
  public int pop_result; // required
  /**
   * 
   * @see com.adp.java.ReleaseType
   */
  public com.adp.java.ReleaseType release_type; // required
  public int smooth_control; // required
  /**
   * 
   * @see com.adp.java.AdPriority
   */
  public com.adp.java.AdPriority priority; // required
  /**
   * 
   * @see com.adp.java.NetWorkType
   */
  public com.adp.java.NetWorkType net_type; // required
  public double cpm; // required
  public double daily_consum; // required
  public double real_consum; // required
  public double cost; // required
  public double cpc; // required
  public int colum1; // required
  public String colum2; // required
  public String media_name; // required
  public int version; // required
  /**
   * 
   * @see com.adp.java.OrderPolicy
   */
  public com.adp.java.OrderPolicy order_policy; // required
  public int all_day_or_not; // required
  public String intervals; // required
  public int time_interval; // required
  public int day_num; // required
  public int show_num; // required
  public int type_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAN_ID((short)1, "plan_id"),
    PLAN_NAME((short)2, "plan_name"),
    UID((short)3, "uid"),
    VOCATION((short)4, "vocation"),
    /**
     * 
     * @see com.adp.java.AdChargeType
     */
    BILLING_TYPE((short)5, "billing_type"),
    BUDGET((short)6, "budget"),
    /**
     * 
     * @see com.adp.java.CurrencyType
     */
    CURRENCY((short)7, "currency"),
    START_DATE((short)8, "start_date"),
    END_DATE((short)9, "end_date"),
    IS_DATE_LIMIT((short)10, "is_date_limit"),
    DAY_MAX((short)11, "day_max"),
    ADTIME((short)12, "adtime"),
    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    ENABLE((short)13, "enable"),
    CTIME((short)14, "ctime"),
    MTIME((short)15, "mtime"),
    POP_RESULT((short)16, "pop_result"),
    /**
     * 
     * @see com.adp.java.ReleaseType
     */
    RELEASE_TYPE((short)17, "release_type"),
    SMOOTH_CONTROL((short)18, "smooth_control"),
    /**
     * 
     * @see com.adp.java.AdPriority
     */
    PRIORITY((short)19, "priority"),
    /**
     * 
     * @see com.adp.java.NetWorkType
     */
    NET_TYPE((short)20, "net_type"),
    CPM((short)21, "cpm"),
    DAILY_CONSUM((short)22, "daily_consum"),
    REAL_CONSUM((short)23, "real_consum"),
    COST((short)24, "cost"),
    CPC((short)25, "cpc"),
    COLUM1((short)26, "colum1"),
    COLUM2((short)27, "colum2"),
    MEDIA_NAME((short)28, "media_name"),
    VERSION((short)29, "version"),
    /**
     * 
     * @see com.adp.java.OrderPolicy
     */
    ORDER_POLICY((short)30, "order_policy"),
    ALL_DAY_OR_NOT((short)31, "all_day_or_not"),
    INTERVALS((short)32, "intervals"),
    TIME_INTERVAL((short)33, "time_interval"),
    DAY_NUM((short)34, "day_num"),
    SHOW_NUM((short)35, "show_num"),
    TYPE_ID((short)36, "type_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAN_ID
          return PLAN_ID;
        case 2: // PLAN_NAME
          return PLAN_NAME;
        case 3: // UID
          return UID;
        case 4: // VOCATION
          return VOCATION;
        case 5: // BILLING_TYPE
          return BILLING_TYPE;
        case 6: // BUDGET
          return BUDGET;
        case 7: // CURRENCY
          return CURRENCY;
        case 8: // START_DATE
          return START_DATE;
        case 9: // END_DATE
          return END_DATE;
        case 10: // IS_DATE_LIMIT
          return IS_DATE_LIMIT;
        case 11: // DAY_MAX
          return DAY_MAX;
        case 12: // ADTIME
          return ADTIME;
        case 13: // ENABLE
          return ENABLE;
        case 14: // CTIME
          return CTIME;
        case 15: // MTIME
          return MTIME;
        case 16: // POP_RESULT
          return POP_RESULT;
        case 17: // RELEASE_TYPE
          return RELEASE_TYPE;
        case 18: // SMOOTH_CONTROL
          return SMOOTH_CONTROL;
        case 19: // PRIORITY
          return PRIORITY;
        case 20: // NET_TYPE
          return NET_TYPE;
        case 21: // CPM
          return CPM;
        case 22: // DAILY_CONSUM
          return DAILY_CONSUM;
        case 23: // REAL_CONSUM
          return REAL_CONSUM;
        case 24: // COST
          return COST;
        case 25: // CPC
          return CPC;
        case 26: // COLUM1
          return COLUM1;
        case 27: // COLUM2
          return COLUM2;
        case 28: // MEDIA_NAME
          return MEDIA_NAME;
        case 29: // VERSION
          return VERSION;
        case 30: // ORDER_POLICY
          return ORDER_POLICY;
        case 31: // ALL_DAY_OR_NOT
          return ALL_DAY_OR_NOT;
        case 32: // INTERVALS
          return INTERVALS;
        case 33: // TIME_INTERVAL
          return TIME_INTERVAL;
        case 34: // DAY_NUM
          return DAY_NUM;
        case 35: // SHOW_NUM
          return SHOW_NUM;
        case 36: // TYPE_ID
          return TYPE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAN_ID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __BUDGET_ISSET_ID = 2;
  private static final int __START_DATE_ISSET_ID = 3;
  private static final int __END_DATE_ISSET_ID = 4;
  private static final int __IS_DATE_LIMIT_ISSET_ID = 5;
  private static final int __DAY_MAX_ISSET_ID = 6;
  private static final int __CTIME_ISSET_ID = 7;
  private static final int __MTIME_ISSET_ID = 8;
  private static final int __POP_RESULT_ISSET_ID = 9;
  private static final int __SMOOTH_CONTROL_ISSET_ID = 10;
  private static final int __CPM_ISSET_ID = 11;
  private static final int __DAILY_CONSUM_ISSET_ID = 12;
  private static final int __REAL_CONSUM_ISSET_ID = 13;
  private static final int __COST_ISSET_ID = 14;
  private static final int __CPC_ISSET_ID = 15;
  private static final int __COLUM1_ISSET_ID = 16;
  private static final int __VERSION_ISSET_ID = 17;
  private static final int __ALL_DAY_OR_NOT_ISSET_ID = 18;
  private static final int __TIME_INTERVAL_ISSET_ID = 19;
  private static final int __DAY_NUM_ISSET_ID = 20;
  private static final int __SHOW_NUM_ISSET_ID = 21;
  private static final int __TYPE_ID_ISSET_ID = 22;
  private BitSet __isset_bit_vector = new BitSet(23);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("plan_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("plan_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOCATION, new org.apache.thrift.meta_data.FieldMetaData("vocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BILLING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("billing_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.AdChargeType.class)));
    tmpMap.put(_Fields.BUDGET, new org.apache.thrift.meta_data.FieldMetaData("budget", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.CurrencyType.class)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DATE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("is_date_limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_MAX, new org.apache.thrift.meta_data.FieldMetaData("day_max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADTIME, new org.apache.thrift.meta_data.FieldMetaData("adtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE, new org.apache.thrift.meta_data.FieldMetaData("enable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.PlanStatus.class)));
    tmpMap.put(_Fields.CTIME, new org.apache.thrift.meta_data.FieldMetaData("ctime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MTIME, new org.apache.thrift.meta_data.FieldMetaData("mtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POP_RESULT, new org.apache.thrift.meta_data.FieldMetaData("pop_result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELEASE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("release_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.ReleaseType.class)));
    tmpMap.put(_Fields.SMOOTH_CONTROL, new org.apache.thrift.meta_data.FieldMetaData("smooth_control", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.AdPriority.class)));
    tmpMap.put(_Fields.NET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("net_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.NetWorkType.class)));
    tmpMap.put(_Fields.CPM, new org.apache.thrift.meta_data.FieldMetaData("cpm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAILY_CONSUM, new org.apache.thrift.meta_data.FieldMetaData("daily_consum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_CONSUM, new org.apache.thrift.meta_data.FieldMetaData("real_consum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CPC, new org.apache.thrift.meta_data.FieldMetaData("cpc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLUM1, new org.apache.thrift.meta_data.FieldMetaData("colum1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUM2, new org.apache.thrift.meta_data.FieldMetaData("colum2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_NAME, new org.apache.thrift.meta_data.FieldMetaData("media_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_POLICY, new org.apache.thrift.meta_data.FieldMetaData("order_policy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.OrderPolicy.class)));
    tmpMap.put(_Fields.ALL_DAY_OR_NOT, new org.apache.thrift.meta_data.FieldMetaData("all_day_or_not", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVALS, new org.apache.thrift.meta_data.FieldMetaData("intervals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("time_interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_NUM, new org.apache.thrift.meta_data.FieldMetaData("day_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_NUM, new org.apache.thrift.meta_data.FieldMetaData("show_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("type_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdPlan.class, metaDataMap);
  }

  public AdPlan() {
    this.billing_type = com.adp.java.AdChargeType.CPC;

    this.currency = com.adp.java.CurrencyType.RMB;

    this.enable = com.adp.java.PlanStatus.RUNNING;

    this.release_type = com.adp.java.ReleaseType.LONG_TAIL;

    this.priority = com.adp.java.AdPriority.AD_BASIC;

    this.net_type = com.adp.java.NetWorkType.HARD_LINK;

    this.order_policy = com.adp.java.OrderPolicy.MEDIA_BUYER;

  }

  public AdPlan(
    int plan_id,
    String plan_name,
    int uid,
    String vocation,
    com.adp.java.AdChargeType billing_type,
    double budget,
    com.adp.java.CurrencyType currency,
    int start_date,
    int end_date,
    int is_date_limit,
    int day_max,
    String adtime,
    com.adp.java.PlanStatus enable,
    int ctime,
    int mtime,
    int pop_result,
    com.adp.java.ReleaseType release_type,
    int smooth_control,
    com.adp.java.AdPriority priority,
    com.adp.java.NetWorkType net_type,
    double cpm,
    double daily_consum,
    double real_consum,
    double cost,
    double cpc,
    int colum1,
    String colum2,
    String media_name,
    int version,
    com.adp.java.OrderPolicy order_policy,
    int all_day_or_not,
    String intervals,
    int time_interval,
    int day_num,
    int show_num,
    int type_id)
  {
    this();
    this.plan_id = plan_id;
    setPlan_idIsSet(true);
    this.plan_name = plan_name;
    this.uid = uid;
    setUidIsSet(true);
    this.vocation = vocation;
    this.billing_type = billing_type;
    this.budget = budget;
    setBudgetIsSet(true);
    this.currency = currency;
    this.start_date = start_date;
    setStart_dateIsSet(true);
    this.end_date = end_date;
    setEnd_dateIsSet(true);
    this.is_date_limit = is_date_limit;
    setIs_date_limitIsSet(true);
    this.day_max = day_max;
    setDay_maxIsSet(true);
    this.adtime = adtime;
    this.enable = enable;
    this.ctime = ctime;
    setCtimeIsSet(true);
    this.mtime = mtime;
    setMtimeIsSet(true);
    this.pop_result = pop_result;
    setPop_resultIsSet(true);
    this.release_type = release_type;
    this.smooth_control = smooth_control;
    setSmooth_controlIsSet(true);
    this.priority = priority;
    this.net_type = net_type;
    this.cpm = cpm;
    setCpmIsSet(true);
    this.daily_consum = daily_consum;
    setDaily_consumIsSet(true);
    this.real_consum = real_consum;
    setReal_consumIsSet(true);
    this.cost = cost;
    setCostIsSet(true);
    this.cpc = cpc;
    setCpcIsSet(true);
    this.colum1 = colum1;
    setColum1IsSet(true);
    this.colum2 = colum2;
    this.media_name = media_name;
    this.version = version;
    setVersionIsSet(true);
    this.order_policy = order_policy;
    this.all_day_or_not = all_day_or_not;
    setAll_day_or_notIsSet(true);
    this.intervals = intervals;
    this.time_interval = time_interval;
    setTime_intervalIsSet(true);
    this.day_num = day_num;
    setDay_numIsSet(true);
    this.show_num = show_num;
    setShow_numIsSet(true);
    this.type_id = type_id;
    setType_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdPlan(AdPlan other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.plan_id = other.plan_id;
    if (other.isSetPlan_name()) {
      this.plan_name = other.plan_name;
    }
    this.uid = other.uid;
    if (other.isSetVocation()) {
      this.vocation = other.vocation;
    }
    if (other.isSetBilling_type()) {
      this.billing_type = other.billing_type;
    }
    this.budget = other.budget;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.start_date = other.start_date;
    this.end_date = other.end_date;
    this.is_date_limit = other.is_date_limit;
    this.day_max = other.day_max;
    if (other.isSetAdtime()) {
      this.adtime = other.adtime;
    }
    if (other.isSetEnable()) {
      this.enable = other.enable;
    }
    this.ctime = other.ctime;
    this.mtime = other.mtime;
    this.pop_result = other.pop_result;
    if (other.isSetRelease_type()) {
      this.release_type = other.release_type;
    }
    this.smooth_control = other.smooth_control;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetNet_type()) {
      this.net_type = other.net_type;
    }
    this.cpm = other.cpm;
    this.daily_consum = other.daily_consum;
    this.real_consum = other.real_consum;
    this.cost = other.cost;
    this.cpc = other.cpc;
    this.colum1 = other.colum1;
    if (other.isSetColum2()) {
      this.colum2 = other.colum2;
    }
    if (other.isSetMedia_name()) {
      this.media_name = other.media_name;
    }
    this.version = other.version;
    if (other.isSetOrder_policy()) {
      this.order_policy = other.order_policy;
    }
    this.all_day_or_not = other.all_day_or_not;
    if (other.isSetIntervals()) {
      this.intervals = other.intervals;
    }
    this.time_interval = other.time_interval;
    this.day_num = other.day_num;
    this.show_num = other.show_num;
    this.type_id = other.type_id;
  }

  public AdPlan deepCopy() {
    return new AdPlan(this);
  }

  @Override
  public void clear() {
    setPlan_idIsSet(false);
    this.plan_id = 0;
    this.plan_name = null;
    setUidIsSet(false);
    this.uid = 0;
    this.vocation = null;
    this.billing_type = com.adp.java.AdChargeType.CPC;

    setBudgetIsSet(false);
    this.budget = 0.0;
    this.currency = com.adp.java.CurrencyType.RMB;

    setStart_dateIsSet(false);
    this.start_date = 0;
    setEnd_dateIsSet(false);
    this.end_date = 0;
    setIs_date_limitIsSet(false);
    this.is_date_limit = 0;
    setDay_maxIsSet(false);
    this.day_max = 0;
    this.adtime = null;
    this.enable = com.adp.java.PlanStatus.RUNNING;

    setCtimeIsSet(false);
    this.ctime = 0;
    setMtimeIsSet(false);
    this.mtime = 0;
    setPop_resultIsSet(false);
    this.pop_result = 0;
    this.release_type = com.adp.java.ReleaseType.LONG_TAIL;

    setSmooth_controlIsSet(false);
    this.smooth_control = 0;
    this.priority = com.adp.java.AdPriority.AD_BASIC;

    this.net_type = com.adp.java.NetWorkType.HARD_LINK;

    setCpmIsSet(false);
    this.cpm = 0.0;
    setDaily_consumIsSet(false);
    this.daily_consum = 0.0;
    setReal_consumIsSet(false);
    this.real_consum = 0.0;
    setCostIsSet(false);
    this.cost = 0.0;
    setCpcIsSet(false);
    this.cpc = 0.0;
    setColum1IsSet(false);
    this.colum1 = 0;
    this.colum2 = null;
    this.media_name = null;
    setVersionIsSet(false);
    this.version = 0;
    this.order_policy = com.adp.java.OrderPolicy.MEDIA_BUYER;

    setAll_day_or_notIsSet(false);
    this.all_day_or_not = 0;
    this.intervals = null;
    setTime_intervalIsSet(false);
    this.time_interval = 0;
    setDay_numIsSet(false);
    this.day_num = 0;
    setShow_numIsSet(false);
    this.show_num = 0;
    setType_idIsSet(false);
    this.type_id = 0;
  }

  public int getPlan_id() {
    return this.plan_id;
  }

  public AdPlan setPlan_id(int plan_id) {
    this.plan_id = plan_id;
    setPlan_idIsSet(true);
    return this;
  }

  public void unsetPlan_id() {
    __isset_bit_vector.clear(__PLAN_ID_ISSET_ID);
  }

  /** Returns true if field plan_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_id() {
    return __isset_bit_vector.get(__PLAN_ID_ISSET_ID);
  }

  public void setPlan_idIsSet(boolean value) {
    __isset_bit_vector.set(__PLAN_ID_ISSET_ID, value);
  }

  public String getPlan_name() {
    return this.plan_name;
  }

  public AdPlan setPlan_name(String plan_name) {
    this.plan_name = plan_name;
    return this;
  }

  public void unsetPlan_name() {
    this.plan_name = null;
  }

  /** Returns true if field plan_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_name() {
    return this.plan_name != null;
  }

  public void setPlan_nameIsSet(boolean value) {
    if (!value) {
      this.plan_name = null;
    }
  }

  public int getUid() {
    return this.uid;
  }

  public AdPlan setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public String getVocation() {
    return this.vocation;
  }

  public AdPlan setVocation(String vocation) {
    this.vocation = vocation;
    return this;
  }

  public void unsetVocation() {
    this.vocation = null;
  }

  /** Returns true if field vocation is set (has been assigned a value) and false otherwise */
  public boolean isSetVocation() {
    return this.vocation != null;
  }

  public void setVocationIsSet(boolean value) {
    if (!value) {
      this.vocation = null;
    }
  }

  /**
   * 
   * @see com.adp.java.AdChargeType
   */
  public com.adp.java.AdChargeType getBilling_type() {
    return this.billing_type;
  }

  /**
   * 
   * @see com.adp.java.AdChargeType
   */
  public AdPlan setBilling_type(com.adp.java.AdChargeType billing_type) {
    this.billing_type = billing_type;
    return this;
  }

  public void unsetBilling_type() {
    this.billing_type = null;
  }

  /** Returns true if field billing_type is set (has been assigned a value) and false otherwise */
  public boolean isSetBilling_type() {
    return this.billing_type != null;
  }

  public void setBilling_typeIsSet(boolean value) {
    if (!value) {
      this.billing_type = null;
    }
  }

  public double getBudget() {
    return this.budget;
  }

  public AdPlan setBudget(double budget) {
    this.budget = budget;
    setBudgetIsSet(true);
    return this;
  }

  public void unsetBudget() {
    __isset_bit_vector.clear(__BUDGET_ISSET_ID);
  }

  /** Returns true if field budget is set (has been assigned a value) and false otherwise */
  public boolean isSetBudget() {
    return __isset_bit_vector.get(__BUDGET_ISSET_ID);
  }

  public void setBudgetIsSet(boolean value) {
    __isset_bit_vector.set(__BUDGET_ISSET_ID, value);
  }

  /**
   * 
   * @see com.adp.java.CurrencyType
   */
  public com.adp.java.CurrencyType getCurrency() {
    return this.currency;
  }

  /**
   * 
   * @see com.adp.java.CurrencyType
   */
  public AdPlan setCurrency(com.adp.java.CurrencyType currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public int getStart_date() {
    return this.start_date;
  }

  public AdPlan setStart_date(int start_date) {
    this.start_date = start_date;
    setStart_dateIsSet(true);
    return this;
  }

  public void unsetStart_date() {
    __isset_bit_vector.clear(__START_DATE_ISSET_ID);
  }

  /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_date() {
    return __isset_bit_vector.get(__START_DATE_ISSET_ID);
  }

  public void setStart_dateIsSet(boolean value) {
    __isset_bit_vector.set(__START_DATE_ISSET_ID, value);
  }

  public int getEnd_date() {
    return this.end_date;
  }

  public AdPlan setEnd_date(int end_date) {
    this.end_date = end_date;
    setEnd_dateIsSet(true);
    return this;
  }

  public void unsetEnd_date() {
    __isset_bit_vector.clear(__END_DATE_ISSET_ID);
  }

  /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_date() {
    return __isset_bit_vector.get(__END_DATE_ISSET_ID);
  }

  public void setEnd_dateIsSet(boolean value) {
    __isset_bit_vector.set(__END_DATE_ISSET_ID, value);
  }

  public int getIs_date_limit() {
    return this.is_date_limit;
  }

  public AdPlan setIs_date_limit(int is_date_limit) {
    this.is_date_limit = is_date_limit;
    setIs_date_limitIsSet(true);
    return this;
  }

  public void unsetIs_date_limit() {
    __isset_bit_vector.clear(__IS_DATE_LIMIT_ISSET_ID);
  }

  /** Returns true if field is_date_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_date_limit() {
    return __isset_bit_vector.get(__IS_DATE_LIMIT_ISSET_ID);
  }

  public void setIs_date_limitIsSet(boolean value) {
    __isset_bit_vector.set(__IS_DATE_LIMIT_ISSET_ID, value);
  }

  public int getDay_max() {
    return this.day_max;
  }

  public AdPlan setDay_max(int day_max) {
    this.day_max = day_max;
    setDay_maxIsSet(true);
    return this;
  }

  public void unsetDay_max() {
    __isset_bit_vector.clear(__DAY_MAX_ISSET_ID);
  }

  /** Returns true if field day_max is set (has been assigned a value) and false otherwise */
  public boolean isSetDay_max() {
    return __isset_bit_vector.get(__DAY_MAX_ISSET_ID);
  }

  public void setDay_maxIsSet(boolean value) {
    __isset_bit_vector.set(__DAY_MAX_ISSET_ID, value);
  }

  public String getAdtime() {
    return this.adtime;
  }

  public AdPlan setAdtime(String adtime) {
    this.adtime = adtime;
    return this;
  }

  public void unsetAdtime() {
    this.adtime = null;
  }

  /** Returns true if field adtime is set (has been assigned a value) and false otherwise */
  public boolean isSetAdtime() {
    return this.adtime != null;
  }

  public void setAdtimeIsSet(boolean value) {
    if (!value) {
      this.adtime = null;
    }
  }

  /**
   * 
   * @see com.adp.java.PlanStatus
   */
  public com.adp.java.PlanStatus getEnable() {
    return this.enable;
  }

  /**
   * 
   * @see com.adp.java.PlanStatus
   */
  public AdPlan setEnable(com.adp.java.PlanStatus enable) {
    this.enable = enable;
    return this;
  }

  public void unsetEnable() {
    this.enable = null;
  }

  /** Returns true if field enable is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable() {
    return this.enable != null;
  }

  public void setEnableIsSet(boolean value) {
    if (!value) {
      this.enable = null;
    }
  }

  public int getCtime() {
    return this.ctime;
  }

  public AdPlan setCtime(int ctime) {
    this.ctime = ctime;
    setCtimeIsSet(true);
    return this;
  }

  public void unsetCtime() {
    __isset_bit_vector.clear(__CTIME_ISSET_ID);
  }

  /** Returns true if field ctime is set (has been assigned a value) and false otherwise */
  public boolean isSetCtime() {
    return __isset_bit_vector.get(__CTIME_ISSET_ID);
  }

  public void setCtimeIsSet(boolean value) {
    __isset_bit_vector.set(__CTIME_ISSET_ID, value);
  }

  public int getMtime() {
    return this.mtime;
  }

  public AdPlan setMtime(int mtime) {
    this.mtime = mtime;
    setMtimeIsSet(true);
    return this;
  }

  public void unsetMtime() {
    __isset_bit_vector.clear(__MTIME_ISSET_ID);
  }

  /** Returns true if field mtime is set (has been assigned a value) and false otherwise */
  public boolean isSetMtime() {
    return __isset_bit_vector.get(__MTIME_ISSET_ID);
  }

  public void setMtimeIsSet(boolean value) {
    __isset_bit_vector.set(__MTIME_ISSET_ID, value);
  }

  public int getPop_result() {
    return this.pop_result;
  }

  public AdPlan setPop_result(int pop_result) {
    this.pop_result = pop_result;
    setPop_resultIsSet(true);
    return this;
  }

  public void unsetPop_result() {
    __isset_bit_vector.clear(__POP_RESULT_ISSET_ID);
  }

  /** Returns true if field pop_result is set (has been assigned a value) and false otherwise */
  public boolean isSetPop_result() {
    return __isset_bit_vector.get(__POP_RESULT_ISSET_ID);
  }

  public void setPop_resultIsSet(boolean value) {
    __isset_bit_vector.set(__POP_RESULT_ISSET_ID, value);
  }

  /**
   * 
   * @see com.adp.java.ReleaseType
   */
  public com.adp.java.ReleaseType getRelease_type() {
    return this.release_type;
  }

  /**
   * 
   * @see com.adp.java.ReleaseType
   */
  public AdPlan setRelease_type(com.adp.java.ReleaseType release_type) {
    this.release_type = release_type;
    return this;
  }

  public void unsetRelease_type() {
    this.release_type = null;
  }

  /** Returns true if field release_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRelease_type() {
    return this.release_type != null;
  }

  public void setRelease_typeIsSet(boolean value) {
    if (!value) {
      this.release_type = null;
    }
  }

  public int getSmooth_control() {
    return this.smooth_control;
  }

  public AdPlan setSmooth_control(int smooth_control) {
    this.smooth_control = smooth_control;
    setSmooth_controlIsSet(true);
    return this;
  }

  public void unsetSmooth_control() {
    __isset_bit_vector.clear(__SMOOTH_CONTROL_ISSET_ID);
  }

  /** Returns true if field smooth_control is set (has been assigned a value) and false otherwise */
  public boolean isSetSmooth_control() {
    return __isset_bit_vector.get(__SMOOTH_CONTROL_ISSET_ID);
  }

  public void setSmooth_controlIsSet(boolean value) {
    __isset_bit_vector.set(__SMOOTH_CONTROL_ISSET_ID, value);
  }

  /**
   * 
   * @see com.adp.java.AdPriority
   */
  public com.adp.java.AdPriority getPriority() {
    return this.priority;
  }

  /**
   * 
   * @see com.adp.java.AdPriority
   */
  public AdPlan setPriority(com.adp.java.AdPriority priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  /**
   * 
   * @see com.adp.java.NetWorkType
   */
  public com.adp.java.NetWorkType getNet_type() {
    return this.net_type;
  }

  /**
   * 
   * @see com.adp.java.NetWorkType
   */
  public AdPlan setNet_type(com.adp.java.NetWorkType net_type) {
    this.net_type = net_type;
    return this;
  }

  public void unsetNet_type() {
    this.net_type = null;
  }

  /** Returns true if field net_type is set (has been assigned a value) and false otherwise */
  public boolean isSetNet_type() {
    return this.net_type != null;
  }

  public void setNet_typeIsSet(boolean value) {
    if (!value) {
      this.net_type = null;
    }
  }

  public double getCpm() {
    return this.cpm;
  }

  public AdPlan setCpm(double cpm) {
    this.cpm = cpm;
    setCpmIsSet(true);
    return this;
  }

  public void unsetCpm() {
    __isset_bit_vector.clear(__CPM_ISSET_ID);
  }

  /** Returns true if field cpm is set (has been assigned a value) and false otherwise */
  public boolean isSetCpm() {
    return __isset_bit_vector.get(__CPM_ISSET_ID);
  }

  public void setCpmIsSet(boolean value) {
    __isset_bit_vector.set(__CPM_ISSET_ID, value);
  }

  public double getDaily_consum() {
    return this.daily_consum;
  }

  public AdPlan setDaily_consum(double daily_consum) {
    this.daily_consum = daily_consum;
    setDaily_consumIsSet(true);
    return this;
  }

  public void unsetDaily_consum() {
    __isset_bit_vector.clear(__DAILY_CONSUM_ISSET_ID);
  }

  /** Returns true if field daily_consum is set (has been assigned a value) and false otherwise */
  public boolean isSetDaily_consum() {
    return __isset_bit_vector.get(__DAILY_CONSUM_ISSET_ID);
  }

  public void setDaily_consumIsSet(boolean value) {
    __isset_bit_vector.set(__DAILY_CONSUM_ISSET_ID, value);
  }

  public double getReal_consum() {
    return this.real_consum;
  }

  public AdPlan setReal_consum(double real_consum) {
    this.real_consum = real_consum;
    setReal_consumIsSet(true);
    return this;
  }

  public void unsetReal_consum() {
    __isset_bit_vector.clear(__REAL_CONSUM_ISSET_ID);
  }

  /** Returns true if field real_consum is set (has been assigned a value) and false otherwise */
  public boolean isSetReal_consum() {
    return __isset_bit_vector.get(__REAL_CONSUM_ISSET_ID);
  }

  public void setReal_consumIsSet(boolean value) {
    __isset_bit_vector.set(__REAL_CONSUM_ISSET_ID, value);
  }

  public double getCost() {
    return this.cost;
  }

  public AdPlan setCost(double cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bit_vector.clear(__COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return __isset_bit_vector.get(__COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bit_vector.set(__COST_ISSET_ID, value);
  }

  public double getCpc() {
    return this.cpc;
  }

  public AdPlan setCpc(double cpc) {
    this.cpc = cpc;
    setCpcIsSet(true);
    return this;
  }

  public void unsetCpc() {
    __isset_bit_vector.clear(__CPC_ISSET_ID);
  }

  /** Returns true if field cpc is set (has been assigned a value) and false otherwise */
  public boolean isSetCpc() {
    return __isset_bit_vector.get(__CPC_ISSET_ID);
  }

  public void setCpcIsSet(boolean value) {
    __isset_bit_vector.set(__CPC_ISSET_ID, value);
  }

  public int getColum1() {
    return this.colum1;
  }

  public AdPlan setColum1(int colum1) {
    this.colum1 = colum1;
    setColum1IsSet(true);
    return this;
  }

  public void unsetColum1() {
    __isset_bit_vector.clear(__COLUM1_ISSET_ID);
  }

  /** Returns true if field colum1 is set (has been assigned a value) and false otherwise */
  public boolean isSetColum1() {
    return __isset_bit_vector.get(__COLUM1_ISSET_ID);
  }

  public void setColum1IsSet(boolean value) {
    __isset_bit_vector.set(__COLUM1_ISSET_ID, value);
  }

  public String getColum2() {
    return this.colum2;
  }

  public AdPlan setColum2(String colum2) {
    this.colum2 = colum2;
    return this;
  }

  public void unsetColum2() {
    this.colum2 = null;
  }

  /** Returns true if field colum2 is set (has been assigned a value) and false otherwise */
  public boolean isSetColum2() {
    return this.colum2 != null;
  }

  public void setColum2IsSet(boolean value) {
    if (!value) {
      this.colum2 = null;
    }
  }

  public String getMedia_name() {
    return this.media_name;
  }

  public AdPlan setMedia_name(String media_name) {
    this.media_name = media_name;
    return this;
  }

  public void unsetMedia_name() {
    this.media_name = null;
  }

  /** Returns true if field media_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_name() {
    return this.media_name != null;
  }

  public void setMedia_nameIsSet(boolean value) {
    if (!value) {
      this.media_name = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public AdPlan setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bit_vector.clear(__VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return __isset_bit_vector.get(__VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bit_vector.set(__VERSION_ISSET_ID, value);
  }

  /**
   * 
   * @see com.adp.java.OrderPolicy
   */
  public com.adp.java.OrderPolicy getOrder_policy() {
    return this.order_policy;
  }

  /**
   * 
   * @see com.adp.java.OrderPolicy
   */
  public AdPlan setOrder_policy(com.adp.java.OrderPolicy order_policy) {
    this.order_policy = order_policy;
    return this;
  }

  public void unsetOrder_policy() {
    this.order_policy = null;
  }

  /** Returns true if field order_policy is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_policy() {
    return this.order_policy != null;
  }

  public void setOrder_policyIsSet(boolean value) {
    if (!value) {
      this.order_policy = null;
    }
  }

  public int getAll_day_or_not() {
    return this.all_day_or_not;
  }

  public AdPlan setAll_day_or_not(int all_day_or_not) {
    this.all_day_or_not = all_day_or_not;
    setAll_day_or_notIsSet(true);
    return this;
  }

  public void unsetAll_day_or_not() {
    __isset_bit_vector.clear(__ALL_DAY_OR_NOT_ISSET_ID);
  }

  /** Returns true if field all_day_or_not is set (has been assigned a value) and false otherwise */
  public boolean isSetAll_day_or_not() {
    return __isset_bit_vector.get(__ALL_DAY_OR_NOT_ISSET_ID);
  }

  public void setAll_day_or_notIsSet(boolean value) {
    __isset_bit_vector.set(__ALL_DAY_OR_NOT_ISSET_ID, value);
  }

  public String getIntervals() {
    return this.intervals;
  }

  public AdPlan setIntervals(String intervals) {
    this.intervals = intervals;
    return this;
  }

  public void unsetIntervals() {
    this.intervals = null;
  }

  /** Returns true if field intervals is set (has been assigned a value) and false otherwise */
  public boolean isSetIntervals() {
    return this.intervals != null;
  }

  public void setIntervalsIsSet(boolean value) {
    if (!value) {
      this.intervals = null;
    }
  }

  public int getTime_interval() {
    return this.time_interval;
  }

  public AdPlan setTime_interval(int time_interval) {
    this.time_interval = time_interval;
    setTime_intervalIsSet(true);
    return this;
  }

  public void unsetTime_interval() {
    __isset_bit_vector.clear(__TIME_INTERVAL_ISSET_ID);
  }

  /** Returns true if field time_interval is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_interval() {
    return __isset_bit_vector.get(__TIME_INTERVAL_ISSET_ID);
  }

  public void setTime_intervalIsSet(boolean value) {
    __isset_bit_vector.set(__TIME_INTERVAL_ISSET_ID, value);
  }

  public int getDay_num() {
    return this.day_num;
  }

  public AdPlan setDay_num(int day_num) {
    this.day_num = day_num;
    setDay_numIsSet(true);
    return this;
  }

  public void unsetDay_num() {
    __isset_bit_vector.clear(__DAY_NUM_ISSET_ID);
  }

  /** Returns true if field day_num is set (has been assigned a value) and false otherwise */
  public boolean isSetDay_num() {
    return __isset_bit_vector.get(__DAY_NUM_ISSET_ID);
  }

  public void setDay_numIsSet(boolean value) {
    __isset_bit_vector.set(__DAY_NUM_ISSET_ID, value);
  }

  public int getShow_num() {
    return this.show_num;
  }

  public AdPlan setShow_num(int show_num) {
    this.show_num = show_num;
    setShow_numIsSet(true);
    return this;
  }

  public void unsetShow_num() {
    __isset_bit_vector.clear(__SHOW_NUM_ISSET_ID);
  }

  /** Returns true if field show_num is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_num() {
    return __isset_bit_vector.get(__SHOW_NUM_ISSET_ID);
  }

  public void setShow_numIsSet(boolean value) {
    __isset_bit_vector.set(__SHOW_NUM_ISSET_ID, value);
  }

  public int getType_id() {
    return this.type_id;
  }

  public AdPlan setType_id(int type_id) {
    this.type_id = type_id;
    setType_idIsSet(true);
    return this;
  }

  public void unsetType_id() {
    __isset_bit_vector.clear(__TYPE_ID_ISSET_ID);
  }

  /** Returns true if field type_id is set (has been assigned a value) and false otherwise */
  public boolean isSetType_id() {
    return __isset_bit_vector.get(__TYPE_ID_ISSET_ID);
  }

  public void setType_idIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAN_ID:
      if (value == null) {
        unsetPlan_id();
      } else {
        setPlan_id((Integer)value);
      }
      break;

    case PLAN_NAME:
      if (value == null) {
        unsetPlan_name();
      } else {
        setPlan_name((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case VOCATION:
      if (value == null) {
        unsetVocation();
      } else {
        setVocation((String)value);
      }
      break;

    case BILLING_TYPE:
      if (value == null) {
        unsetBilling_type();
      } else {
        setBilling_type((com.adp.java.AdChargeType)value);
      }
      break;

    case BUDGET:
      if (value == null) {
        unsetBudget();
      } else {
        setBudget((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((com.adp.java.CurrencyType)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStart_date();
      } else {
        setStart_date((Integer)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEnd_date();
      } else {
        setEnd_date((Integer)value);
      }
      break;

    case IS_DATE_LIMIT:
      if (value == null) {
        unsetIs_date_limit();
      } else {
        setIs_date_limit((Integer)value);
      }
      break;

    case DAY_MAX:
      if (value == null) {
        unsetDay_max();
      } else {
        setDay_max((Integer)value);
      }
      break;

    case ADTIME:
      if (value == null) {
        unsetAdtime();
      } else {
        setAdtime((String)value);
      }
      break;

    case ENABLE:
      if (value == null) {
        unsetEnable();
      } else {
        setEnable((com.adp.java.PlanStatus)value);
      }
      break;

    case CTIME:
      if (value == null) {
        unsetCtime();
      } else {
        setCtime((Integer)value);
      }
      break;

    case MTIME:
      if (value == null) {
        unsetMtime();
      } else {
        setMtime((Integer)value);
      }
      break;

    case POP_RESULT:
      if (value == null) {
        unsetPop_result();
      } else {
        setPop_result((Integer)value);
      }
      break;

    case RELEASE_TYPE:
      if (value == null) {
        unsetRelease_type();
      } else {
        setRelease_type((com.adp.java.ReleaseType)value);
      }
      break;

    case SMOOTH_CONTROL:
      if (value == null) {
        unsetSmooth_control();
      } else {
        setSmooth_control((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((com.adp.java.AdPriority)value);
      }
      break;

    case NET_TYPE:
      if (value == null) {
        unsetNet_type();
      } else {
        setNet_type((com.adp.java.NetWorkType)value);
      }
      break;

    case CPM:
      if (value == null) {
        unsetCpm();
      } else {
        setCpm((Double)value);
      }
      break;

    case DAILY_CONSUM:
      if (value == null) {
        unsetDaily_consum();
      } else {
        setDaily_consum((Double)value);
      }
      break;

    case REAL_CONSUM:
      if (value == null) {
        unsetReal_consum();
      } else {
        setReal_consum((Double)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((Double)value);
      }
      break;

    case CPC:
      if (value == null) {
        unsetCpc();
      } else {
        setCpc((Double)value);
      }
      break;

    case COLUM1:
      if (value == null) {
        unsetColum1();
      } else {
        setColum1((Integer)value);
      }
      break;

    case COLUM2:
      if (value == null) {
        unsetColum2();
      } else {
        setColum2((String)value);
      }
      break;

    case MEDIA_NAME:
      if (value == null) {
        unsetMedia_name();
      } else {
        setMedia_name((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case ORDER_POLICY:
      if (value == null) {
        unsetOrder_policy();
      } else {
        setOrder_policy((com.adp.java.OrderPolicy)value);
      }
      break;

    case ALL_DAY_OR_NOT:
      if (value == null) {
        unsetAll_day_or_not();
      } else {
        setAll_day_or_not((Integer)value);
      }
      break;

    case INTERVALS:
      if (value == null) {
        unsetIntervals();
      } else {
        setIntervals((String)value);
      }
      break;

    case TIME_INTERVAL:
      if (value == null) {
        unsetTime_interval();
      } else {
        setTime_interval((Integer)value);
      }
      break;

    case DAY_NUM:
      if (value == null) {
        unsetDay_num();
      } else {
        setDay_num((Integer)value);
      }
      break;

    case SHOW_NUM:
      if (value == null) {
        unsetShow_num();
      } else {
        setShow_num((Integer)value);
      }
      break;

    case TYPE_ID:
      if (value == null) {
        unsetType_id();
      } else {
        setType_id((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAN_ID:
      return Integer.valueOf(getPlan_id());

    case PLAN_NAME:
      return getPlan_name();

    case UID:
      return Integer.valueOf(getUid());

    case VOCATION:
      return getVocation();

    case BILLING_TYPE:
      return getBilling_type();

    case BUDGET:
      return Double.valueOf(getBudget());

    case CURRENCY:
      return getCurrency();

    case START_DATE:
      return Integer.valueOf(getStart_date());

    case END_DATE:
      return Integer.valueOf(getEnd_date());

    case IS_DATE_LIMIT:
      return Integer.valueOf(getIs_date_limit());

    case DAY_MAX:
      return Integer.valueOf(getDay_max());

    case ADTIME:
      return getAdtime();

    case ENABLE:
      return getEnable();

    case CTIME:
      return Integer.valueOf(getCtime());

    case MTIME:
      return Integer.valueOf(getMtime());

    case POP_RESULT:
      return Integer.valueOf(getPop_result());

    case RELEASE_TYPE:
      return getRelease_type();

    case SMOOTH_CONTROL:
      return Integer.valueOf(getSmooth_control());

    case PRIORITY:
      return getPriority();

    case NET_TYPE:
      return getNet_type();

    case CPM:
      return Double.valueOf(getCpm());

    case DAILY_CONSUM:
      return Double.valueOf(getDaily_consum());

    case REAL_CONSUM:
      return Double.valueOf(getReal_consum());

    case COST:
      return Double.valueOf(getCost());

    case CPC:
      return Double.valueOf(getCpc());

    case COLUM1:
      return Integer.valueOf(getColum1());

    case COLUM2:
      return getColum2();

    case MEDIA_NAME:
      return getMedia_name();

    case VERSION:
      return Integer.valueOf(getVersion());

    case ORDER_POLICY:
      return getOrder_policy();

    case ALL_DAY_OR_NOT:
      return Integer.valueOf(getAll_day_or_not());

    case INTERVALS:
      return getIntervals();

    case TIME_INTERVAL:
      return Integer.valueOf(getTime_interval());

    case DAY_NUM:
      return Integer.valueOf(getDay_num());

    case SHOW_NUM:
      return Integer.valueOf(getShow_num());

    case TYPE_ID:
      return Integer.valueOf(getType_id());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAN_ID:
      return isSetPlan_id();
    case PLAN_NAME:
      return isSetPlan_name();
    case UID:
      return isSetUid();
    case VOCATION:
      return isSetVocation();
    case BILLING_TYPE:
      return isSetBilling_type();
    case BUDGET:
      return isSetBudget();
    case CURRENCY:
      return isSetCurrency();
    case START_DATE:
      return isSetStart_date();
    case END_DATE:
      return isSetEnd_date();
    case IS_DATE_LIMIT:
      return isSetIs_date_limit();
    case DAY_MAX:
      return isSetDay_max();
    case ADTIME:
      return isSetAdtime();
    case ENABLE:
      return isSetEnable();
    case CTIME:
      return isSetCtime();
    case MTIME:
      return isSetMtime();
    case POP_RESULT:
      return isSetPop_result();
    case RELEASE_TYPE:
      return isSetRelease_type();
    case SMOOTH_CONTROL:
      return isSetSmooth_control();
    case PRIORITY:
      return isSetPriority();
    case NET_TYPE:
      return isSetNet_type();
    case CPM:
      return isSetCpm();
    case DAILY_CONSUM:
      return isSetDaily_consum();
    case REAL_CONSUM:
      return isSetReal_consum();
    case COST:
      return isSetCost();
    case CPC:
      return isSetCpc();
    case COLUM1:
      return isSetColum1();
    case COLUM2:
      return isSetColum2();
    case MEDIA_NAME:
      return isSetMedia_name();
    case VERSION:
      return isSetVersion();
    case ORDER_POLICY:
      return isSetOrder_policy();
    case ALL_DAY_OR_NOT:
      return isSetAll_day_or_not();
    case INTERVALS:
      return isSetIntervals();
    case TIME_INTERVAL:
      return isSetTime_interval();
    case DAY_NUM:
      return isSetDay_num();
    case SHOW_NUM:
      return isSetShow_num();
    case TYPE_ID:
      return isSetType_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdPlan)
      return this.equals((AdPlan)that);
    return false;
  }

  public boolean equals(AdPlan that) {
    if (that == null)
      return false;

    boolean this_present_plan_id = true;
    boolean that_present_plan_id = true;
    if (this_present_plan_id || that_present_plan_id) {
      if (!(this_present_plan_id && that_present_plan_id))
        return false;
      if (this.plan_id != that.plan_id)
        return false;
    }

    boolean this_present_plan_name = true && this.isSetPlan_name();
    boolean that_present_plan_name = true && that.isSetPlan_name();
    if (this_present_plan_name || that_present_plan_name) {
      if (!(this_present_plan_name && that_present_plan_name))
        return false;
      if (!this.plan_name.equals(that.plan_name))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_vocation = true && this.isSetVocation();
    boolean that_present_vocation = true && that.isSetVocation();
    if (this_present_vocation || that_present_vocation) {
      if (!(this_present_vocation && that_present_vocation))
        return false;
      if (!this.vocation.equals(that.vocation))
        return false;
    }

    boolean this_present_billing_type = true && this.isSetBilling_type();
    boolean that_present_billing_type = true && that.isSetBilling_type();
    if (this_present_billing_type || that_present_billing_type) {
      if (!(this_present_billing_type && that_present_billing_type))
        return false;
      if (!this.billing_type.equals(that.billing_type))
        return false;
    }

    boolean this_present_budget = true;
    boolean that_present_budget = true;
    if (this_present_budget || that_present_budget) {
      if (!(this_present_budget && that_present_budget))
        return false;
      if (this.budget != that.budget)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_start_date = true;
    boolean that_present_start_date = true;
    if (this_present_start_date || that_present_start_date) {
      if (!(this_present_start_date && that_present_start_date))
        return false;
      if (this.start_date != that.start_date)
        return false;
    }

    boolean this_present_end_date = true;
    boolean that_present_end_date = true;
    if (this_present_end_date || that_present_end_date) {
      if (!(this_present_end_date && that_present_end_date))
        return false;
      if (this.end_date != that.end_date)
        return false;
    }

    boolean this_present_is_date_limit = true;
    boolean that_present_is_date_limit = true;
    if (this_present_is_date_limit || that_present_is_date_limit) {
      if (!(this_present_is_date_limit && that_present_is_date_limit))
        return false;
      if (this.is_date_limit != that.is_date_limit)
        return false;
    }

    boolean this_present_day_max = true;
    boolean that_present_day_max = true;
    if (this_present_day_max || that_present_day_max) {
      if (!(this_present_day_max && that_present_day_max))
        return false;
      if (this.day_max != that.day_max)
        return false;
    }

    boolean this_present_adtime = true && this.isSetAdtime();
    boolean that_present_adtime = true && that.isSetAdtime();
    if (this_present_adtime || that_present_adtime) {
      if (!(this_present_adtime && that_present_adtime))
        return false;
      if (!this.adtime.equals(that.adtime))
        return false;
    }

    boolean this_present_enable = true && this.isSetEnable();
    boolean that_present_enable = true && that.isSetEnable();
    if (this_present_enable || that_present_enable) {
      if (!(this_present_enable && that_present_enable))
        return false;
      if (!this.enable.equals(that.enable))
        return false;
    }

    boolean this_present_ctime = true;
    boolean that_present_ctime = true;
    if (this_present_ctime || that_present_ctime) {
      if (!(this_present_ctime && that_present_ctime))
        return false;
      if (this.ctime != that.ctime)
        return false;
    }

    boolean this_present_mtime = true;
    boolean that_present_mtime = true;
    if (this_present_mtime || that_present_mtime) {
      if (!(this_present_mtime && that_present_mtime))
        return false;
      if (this.mtime != that.mtime)
        return false;
    }

    boolean this_present_pop_result = true;
    boolean that_present_pop_result = true;
    if (this_present_pop_result || that_present_pop_result) {
      if (!(this_present_pop_result && that_present_pop_result))
        return false;
      if (this.pop_result != that.pop_result)
        return false;
    }

    boolean this_present_release_type = true && this.isSetRelease_type();
    boolean that_present_release_type = true && that.isSetRelease_type();
    if (this_present_release_type || that_present_release_type) {
      if (!(this_present_release_type && that_present_release_type))
        return false;
      if (!this.release_type.equals(that.release_type))
        return false;
    }

    boolean this_present_smooth_control = true;
    boolean that_present_smooth_control = true;
    if (this_present_smooth_control || that_present_smooth_control) {
      if (!(this_present_smooth_control && that_present_smooth_control))
        return false;
      if (this.smooth_control != that.smooth_control)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_net_type = true && this.isSetNet_type();
    boolean that_present_net_type = true && that.isSetNet_type();
    if (this_present_net_type || that_present_net_type) {
      if (!(this_present_net_type && that_present_net_type))
        return false;
      if (!this.net_type.equals(that.net_type))
        return false;
    }

    boolean this_present_cpm = true;
    boolean that_present_cpm = true;
    if (this_present_cpm || that_present_cpm) {
      if (!(this_present_cpm && that_present_cpm))
        return false;
      if (this.cpm != that.cpm)
        return false;
    }

    boolean this_present_daily_consum = true;
    boolean that_present_daily_consum = true;
    if (this_present_daily_consum || that_present_daily_consum) {
      if (!(this_present_daily_consum && that_present_daily_consum))
        return false;
      if (this.daily_consum != that.daily_consum)
        return false;
    }

    boolean this_present_real_consum = true;
    boolean that_present_real_consum = true;
    if (this_present_real_consum || that_present_real_consum) {
      if (!(this_present_real_consum && that_present_real_consum))
        return false;
      if (this.real_consum != that.real_consum)
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    boolean this_present_cpc = true;
    boolean that_present_cpc = true;
    if (this_present_cpc || that_present_cpc) {
      if (!(this_present_cpc && that_present_cpc))
        return false;
      if (this.cpc != that.cpc)
        return false;
    }

    boolean this_present_colum1 = true;
    boolean that_present_colum1 = true;
    if (this_present_colum1 || that_present_colum1) {
      if (!(this_present_colum1 && that_present_colum1))
        return false;
      if (this.colum1 != that.colum1)
        return false;
    }

    boolean this_present_colum2 = true && this.isSetColum2();
    boolean that_present_colum2 = true && that.isSetColum2();
    if (this_present_colum2 || that_present_colum2) {
      if (!(this_present_colum2 && that_present_colum2))
        return false;
      if (!this.colum2.equals(that.colum2))
        return false;
    }

    boolean this_present_media_name = true && this.isSetMedia_name();
    boolean that_present_media_name = true && that.isSetMedia_name();
    if (this_present_media_name || that_present_media_name) {
      if (!(this_present_media_name && that_present_media_name))
        return false;
      if (!this.media_name.equals(that.media_name))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_order_policy = true && this.isSetOrder_policy();
    boolean that_present_order_policy = true && that.isSetOrder_policy();
    if (this_present_order_policy || that_present_order_policy) {
      if (!(this_present_order_policy && that_present_order_policy))
        return false;
      if (!this.order_policy.equals(that.order_policy))
        return false;
    }

    boolean this_present_all_day_or_not = true;
    boolean that_present_all_day_or_not = true;
    if (this_present_all_day_or_not || that_present_all_day_or_not) {
      if (!(this_present_all_day_or_not && that_present_all_day_or_not))
        return false;
      if (this.all_day_or_not != that.all_day_or_not)
        return false;
    }

    boolean this_present_intervals = true && this.isSetIntervals();
    boolean that_present_intervals = true && that.isSetIntervals();
    if (this_present_intervals || that_present_intervals) {
      if (!(this_present_intervals && that_present_intervals))
        return false;
      if (!this.intervals.equals(that.intervals))
        return false;
    }

    boolean this_present_time_interval = true;
    boolean that_present_time_interval = true;
    if (this_present_time_interval || that_present_time_interval) {
      if (!(this_present_time_interval && that_present_time_interval))
        return false;
      if (this.time_interval != that.time_interval)
        return false;
    }

    boolean this_present_day_num = true;
    boolean that_present_day_num = true;
    if (this_present_day_num || that_present_day_num) {
      if (!(this_present_day_num && that_present_day_num))
        return false;
      if (this.day_num != that.day_num)
        return false;
    }

    boolean this_present_show_num = true;
    boolean that_present_show_num = true;
    if (this_present_show_num || that_present_show_num) {
      if (!(this_present_show_num && that_present_show_num))
        return false;
      if (this.show_num != that.show_num)
        return false;
    }

    boolean this_present_type_id = true;
    boolean that_present_type_id = true;
    if (this_present_type_id || that_present_type_id) {
      if (!(this_present_type_id && that_present_type_id))
        return false;
      if (this.type_id != that.type_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AdPlan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdPlan typedOther = (AdPlan)other;

    lastComparison = Boolean.valueOf(isSetPlan_id()).compareTo(typedOther.isSetPlan_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_id, typedOther.plan_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlan_name()).compareTo(typedOther.isSetPlan_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_name, typedOther.plan_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVocation()).compareTo(typedOther.isSetVocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vocation, typedOther.vocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBilling_type()).compareTo(typedOther.isSetBilling_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBilling_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billing_type, typedOther.billing_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBudget()).compareTo(typedOther.isSetBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.budget, typedOther.budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(typedOther.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, typedOther.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_date()).compareTo(typedOther.isSetStart_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, typedOther.start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_date()).compareTo(typedOther.isSetEnd_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, typedOther.end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_date_limit()).compareTo(typedOther.isSetIs_date_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_date_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_date_limit, typedOther.is_date_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay_max()).compareTo(typedOther.isSetDay_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day_max, typedOther.day_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdtime()).compareTo(typedOther.isSetAdtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adtime, typedOther.adtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnable()).compareTo(typedOther.isSetEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable, typedOther.enable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtime()).compareTo(typedOther.isSetCtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctime, typedOther.ctime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMtime()).compareTo(typedOther.isSetMtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtime, typedOther.mtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPop_result()).compareTo(typedOther.isSetPop_result());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPop_result()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pop_result, typedOther.pop_result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelease_type()).compareTo(typedOther.isSetRelease_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelease_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release_type, typedOther.release_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmooth_control()).compareTo(typedOther.isSetSmooth_control());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmooth_control()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smooth_control, typedOther.smooth_control);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNet_type()).compareTo(typedOther.isSetNet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.net_type, typedOther.net_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpm()).compareTo(typedOther.isSetCpm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpm, typedOther.cpm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDaily_consum()).compareTo(typedOther.isSetDaily_consum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDaily_consum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.daily_consum, typedOther.daily_consum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReal_consum()).compareTo(typedOther.isSetReal_consum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReal_consum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.real_consum, typedOther.real_consum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCost()).compareTo(typedOther.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, typedOther.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpc()).compareTo(typedOther.isSetCpc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpc, typedOther.cpc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColum1()).compareTo(typedOther.isSetColum1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColum1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colum1, typedOther.colum1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColum2()).compareTo(typedOther.isSetColum2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColum2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colum2, typedOther.colum2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_name()).compareTo(typedOther.isSetMedia_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_name, typedOther.media_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder_policy()).compareTo(typedOther.isSetOrder_policy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_policy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_policy, typedOther.order_policy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAll_day_or_not()).compareTo(typedOther.isSetAll_day_or_not());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAll_day_or_not()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_day_or_not, typedOther.all_day_or_not);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntervals()).compareTo(typedOther.isSetIntervals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntervals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intervals, typedOther.intervals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_interval()).compareTo(typedOther.isSetTime_interval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_interval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_interval, typedOther.time_interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay_num()).compareTo(typedOther.isSetDay_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day_num, typedOther.day_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_num()).compareTo(typedOther.isSetShow_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_num, typedOther.show_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType_id()).compareTo(typedOther.isSetType_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_id, typedOther.type_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdPlan(");
    boolean first = true;

    sb.append("plan_id:");
    sb.append(this.plan_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plan_name:");
    if (this.plan_name == null) {
      sb.append("null");
    } else {
      sb.append(this.plan_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vocation:");
    if (this.vocation == null) {
      sb.append("null");
    } else {
      sb.append(this.vocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("billing_type:");
    if (this.billing_type == null) {
      sb.append("null");
    } else {
      sb.append(this.billing_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("budget:");
    sb.append(this.budget);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_date:");
    sb.append(this.start_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_date:");
    sb.append(this.end_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_date_limit:");
    sb.append(this.is_date_limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day_max:");
    sb.append(this.day_max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adtime:");
    if (this.adtime == null) {
      sb.append("null");
    } else {
      sb.append(this.adtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enable:");
    if (this.enable == null) {
      sb.append("null");
    } else {
      sb.append(this.enable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ctime:");
    sb.append(this.ctime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mtime:");
    sb.append(this.mtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pop_result:");
    sb.append(this.pop_result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("release_type:");
    if (this.release_type == null) {
      sb.append("null");
    } else {
      sb.append(this.release_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("smooth_control:");
    sb.append(this.smooth_control);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    if (this.priority == null) {
      sb.append("null");
    } else {
      sb.append(this.priority);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("net_type:");
    if (this.net_type == null) {
      sb.append("null");
    } else {
      sb.append(this.net_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpm:");
    sb.append(this.cpm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("daily_consum:");
    sb.append(this.daily_consum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("real_consum:");
    sb.append(this.real_consum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpc:");
    sb.append(this.cpc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("colum1:");
    sb.append(this.colum1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("colum2:");
    if (this.colum2 == null) {
      sb.append("null");
    } else {
      sb.append(this.colum2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("media_name:");
    if (this.media_name == null) {
      sb.append("null");
    } else {
      sb.append(this.media_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("order_policy:");
    if (this.order_policy == null) {
      sb.append("null");
    } else {
      sb.append(this.order_policy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("all_day_or_not:");
    sb.append(this.all_day_or_not);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intervals:");
    if (this.intervals == null) {
      sb.append("null");
    } else {
      sb.append(this.intervals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time_interval:");
    sb.append(this.time_interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day_num:");
    sb.append(this.day_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("show_num:");
    sb.append(this.show_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type_id:");
    sb.append(this.type_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdPlanStandardSchemeFactory implements SchemeFactory {
    public AdPlanStandardScheme getScheme() {
      return new AdPlanStandardScheme();
    }
  }

  private static class AdPlanStandardScheme extends StandardScheme<AdPlan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdPlan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plan_id = iprot.readI32();
              struct.setPlan_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plan_name = iprot.readString();
              struct.setPlan_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vocation = iprot.readString();
              struct.setVocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BILLING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.billing_type = com.adp.java.AdChargeType.findByValue(iprot.readI32());
              struct.setBilling_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.budget = iprot.readDouble();
              struct.setBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currency = com.adp.java.CurrencyType.findByValue(iprot.readI32());
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start_date = iprot.readI32();
              struct.setStart_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.end_date = iprot.readI32();
              struct.setEnd_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_DATE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.is_date_limit = iprot.readI32();
              struct.setIs_date_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DAY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.day_max = iprot.readI32();
              struct.setDay_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ADTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adtime = iprot.readString();
              struct.setAdtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enable = com.adp.java.PlanStatus.findByValue(iprot.readI32());
              struct.setEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ctime = iprot.readI32();
              struct.setCtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mtime = iprot.readI32();
              struct.setMtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POP_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pop_result = iprot.readI32();
              struct.setPop_resultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RELEASE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.release_type = com.adp.java.ReleaseType.findByValue(iprot.readI32());
              struct.setRelease_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SMOOTH_CONTROL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smooth_control = iprot.readI32();
              struct.setSmooth_controlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = com.adp.java.AdPriority.findByValue(iprot.readI32());
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.net_type = com.adp.java.NetWorkType.findByValue(iprot.readI32());
              struct.setNet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CPM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpm = iprot.readDouble();
              struct.setCpmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DAILY_CONSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.daily_consum = iprot.readDouble();
              struct.setDaily_consumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REAL_CONSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.real_consum = iprot.readDouble();
              struct.setReal_consumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cost = iprot.readDouble();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CPC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpc = iprot.readDouble();
              struct.setCpcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // COLUM1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.colum1 = iprot.readI32();
              struct.setColum1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // COLUM2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colum2 = iprot.readString();
              struct.setColum2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MEDIA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_name = iprot.readString();
              struct.setMedia_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ORDER_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order_policy = com.adp.java.OrderPolicy.findByValue(iprot.readI32());
              struct.setOrder_policyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ALL_DAY_OR_NOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.all_day_or_not = iprot.readI32();
              struct.setAll_day_or_notIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // INTERVALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intervals = iprot.readString();
              struct.setIntervalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // TIME_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time_interval = iprot.readI32();
              struct.setTime_intervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DAY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.day_num = iprot.readI32();
              struct.setDay_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // SHOW_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.show_num = iprot.readI32();
              struct.setShow_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type_id = iprot.readI32();
              struct.setType_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdPlan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.plan_id);
      oprot.writeFieldEnd();
      if (struct.plan_name != null) {
        oprot.writeFieldBegin(PLAN_NAME_FIELD_DESC);
        oprot.writeString(struct.plan_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      if (struct.vocation != null) {
        oprot.writeFieldBegin(VOCATION_FIELD_DESC);
        oprot.writeString(struct.vocation);
        oprot.writeFieldEnd();
      }
      if (struct.billing_type != null) {
        oprot.writeFieldBegin(BILLING_TYPE_FIELD_DESC);
        oprot.writeI32(struct.billing_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUDGET_FIELD_DESC);
      oprot.writeDouble(struct.budget);
      oprot.writeFieldEnd();
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeI32(struct.currency.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_DATE_FIELD_DESC);
      oprot.writeI32(struct.start_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_DATE_FIELD_DESC);
      oprot.writeI32(struct.end_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DATE_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.is_date_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_MAX_FIELD_DESC);
      oprot.writeI32(struct.day_max);
      oprot.writeFieldEnd();
      if (struct.adtime != null) {
        oprot.writeFieldBegin(ADTIME_FIELD_DESC);
        oprot.writeString(struct.adtime);
        oprot.writeFieldEnd();
      }
      if (struct.enable != null) {
        oprot.writeFieldBegin(ENABLE_FIELD_DESC);
        oprot.writeI32(struct.enable.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CTIME_FIELD_DESC);
      oprot.writeI32(struct.ctime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MTIME_FIELD_DESC);
      oprot.writeI32(struct.mtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POP_RESULT_FIELD_DESC);
      oprot.writeI32(struct.pop_result);
      oprot.writeFieldEnd();
      if (struct.release_type != null) {
        oprot.writeFieldBegin(RELEASE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.release_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SMOOTH_CONTROL_FIELD_DESC);
      oprot.writeI32(struct.smooth_control);
      oprot.writeFieldEnd();
      if (struct.priority != null) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.net_type != null) {
        oprot.writeFieldBegin(NET_TYPE_FIELD_DESC);
        oprot.writeI32(struct.net_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPM_FIELD_DESC);
      oprot.writeDouble(struct.cpm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAILY_CONSUM_FIELD_DESC);
      oprot.writeDouble(struct.daily_consum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_CONSUM_FIELD_DESC);
      oprot.writeDouble(struct.real_consum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeDouble(struct.cost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPC_FIELD_DESC);
      oprot.writeDouble(struct.cpc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLUM1_FIELD_DESC);
      oprot.writeI32(struct.colum1);
      oprot.writeFieldEnd();
      if (struct.colum2 != null) {
        oprot.writeFieldBegin(COLUM2_FIELD_DESC);
        oprot.writeString(struct.colum2);
        oprot.writeFieldEnd();
      }
      if (struct.media_name != null) {
        oprot.writeFieldBegin(MEDIA_NAME_FIELD_DESC);
        oprot.writeString(struct.media_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.order_policy != null) {
        oprot.writeFieldBegin(ORDER_POLICY_FIELD_DESC);
        oprot.writeI32(struct.order_policy.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALL_DAY_OR_NOT_FIELD_DESC);
      oprot.writeI32(struct.all_day_or_not);
      oprot.writeFieldEnd();
      if (struct.intervals != null) {
        oprot.writeFieldBegin(INTERVALS_FIELD_DESC);
        oprot.writeString(struct.intervals);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.time_interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_NUM_FIELD_DESC);
      oprot.writeI32(struct.day_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_NUM_FIELD_DESC);
      oprot.writeI32(struct.show_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
      oprot.writeI32(struct.type_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdPlanTupleSchemeFactory implements SchemeFactory {
    public AdPlanTupleScheme getScheme() {
      return new AdPlanTupleScheme();
    }
  }

  private static class AdPlanTupleScheme extends TupleScheme<AdPlan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdPlan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlan_id()) {
        optionals.set(0);
      }
      if (struct.isSetPlan_name()) {
        optionals.set(1);
      }
      if (struct.isSetUid()) {
        optionals.set(2);
      }
      if (struct.isSetVocation()) {
        optionals.set(3);
      }
      if (struct.isSetBilling_type()) {
        optionals.set(4);
      }
      if (struct.isSetBudget()) {
        optionals.set(5);
      }
      if (struct.isSetCurrency()) {
        optionals.set(6);
      }
      if (struct.isSetStart_date()) {
        optionals.set(7);
      }
      if (struct.isSetEnd_date()) {
        optionals.set(8);
      }
      if (struct.isSetIs_date_limit()) {
        optionals.set(9);
      }
      if (struct.isSetDay_max()) {
        optionals.set(10);
      }
      if (struct.isSetAdtime()) {
        optionals.set(11);
      }
      if (struct.isSetEnable()) {
        optionals.set(12);
      }
      if (struct.isSetCtime()) {
        optionals.set(13);
      }
      if (struct.isSetMtime()) {
        optionals.set(14);
      }
      if (struct.isSetPop_result()) {
        optionals.set(15);
      }
      if (struct.isSetRelease_type()) {
        optionals.set(16);
      }
      if (struct.isSetSmooth_control()) {
        optionals.set(17);
      }
      if (struct.isSetPriority()) {
        optionals.set(18);
      }
      if (struct.isSetNet_type()) {
        optionals.set(19);
      }
      if (struct.isSetCpm()) {
        optionals.set(20);
      }
      if (struct.isSetDaily_consum()) {
        optionals.set(21);
      }
      if (struct.isSetReal_consum()) {
        optionals.set(22);
      }
      if (struct.isSetCost()) {
        optionals.set(23);
      }
      if (struct.isSetCpc()) {
        optionals.set(24);
      }
      if (struct.isSetColum1()) {
        optionals.set(25);
      }
      if (struct.isSetColum2()) {
        optionals.set(26);
      }
      if (struct.isSetMedia_name()) {
        optionals.set(27);
      }
      if (struct.isSetVersion()) {
        optionals.set(28);
      }
      if (struct.isSetOrder_policy()) {
        optionals.set(29);
      }
      if (struct.isSetAll_day_or_not()) {
        optionals.set(30);
      }
      if (struct.isSetIntervals()) {
        optionals.set(31);
      }
      if (struct.isSetTime_interval()) {
        optionals.set(32);
      }
      if (struct.isSetDay_num()) {
        optionals.set(33);
      }
      if (struct.isSetShow_num()) {
        optionals.set(34);
      }
      if (struct.isSetType_id()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetPlan_id()) {
        oprot.writeI32(struct.plan_id);
      }
      if (struct.isSetPlan_name()) {
        oprot.writeString(struct.plan_name);
      }
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetVocation()) {
        oprot.writeString(struct.vocation);
      }
      if (struct.isSetBilling_type()) {
        oprot.writeI32(struct.billing_type.getValue());
      }
      if (struct.isSetBudget()) {
        oprot.writeDouble(struct.budget);
      }
      if (struct.isSetCurrency()) {
        oprot.writeI32(struct.currency.getValue());
      }
      if (struct.isSetStart_date()) {
        oprot.writeI32(struct.start_date);
      }
      if (struct.isSetEnd_date()) {
        oprot.writeI32(struct.end_date);
      }
      if (struct.isSetIs_date_limit()) {
        oprot.writeI32(struct.is_date_limit);
      }
      if (struct.isSetDay_max()) {
        oprot.writeI32(struct.day_max);
      }
      if (struct.isSetAdtime()) {
        oprot.writeString(struct.adtime);
      }
      if (struct.isSetEnable()) {
        oprot.writeI32(struct.enable.getValue());
      }
      if (struct.isSetCtime()) {
        oprot.writeI32(struct.ctime);
      }
      if (struct.isSetMtime()) {
        oprot.writeI32(struct.mtime);
      }
      if (struct.isSetPop_result()) {
        oprot.writeI32(struct.pop_result);
      }
      if (struct.isSetRelease_type()) {
        oprot.writeI32(struct.release_type.getValue());
      }
      if (struct.isSetSmooth_control()) {
        oprot.writeI32(struct.smooth_control);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority.getValue());
      }
      if (struct.isSetNet_type()) {
        oprot.writeI32(struct.net_type.getValue());
      }
      if (struct.isSetCpm()) {
        oprot.writeDouble(struct.cpm);
      }
      if (struct.isSetDaily_consum()) {
        oprot.writeDouble(struct.daily_consum);
      }
      if (struct.isSetReal_consum()) {
        oprot.writeDouble(struct.real_consum);
      }
      if (struct.isSetCost()) {
        oprot.writeDouble(struct.cost);
      }
      if (struct.isSetCpc()) {
        oprot.writeDouble(struct.cpc);
      }
      if (struct.isSetColum1()) {
        oprot.writeI32(struct.colum1);
      }
      if (struct.isSetColum2()) {
        oprot.writeString(struct.colum2);
      }
      if (struct.isSetMedia_name()) {
        oprot.writeString(struct.media_name);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetOrder_policy()) {
        oprot.writeI32(struct.order_policy.getValue());
      }
      if (struct.isSetAll_day_or_not()) {
        oprot.writeI32(struct.all_day_or_not);
      }
      if (struct.isSetIntervals()) {
        oprot.writeString(struct.intervals);
      }
      if (struct.isSetTime_interval()) {
        oprot.writeI32(struct.time_interval);
      }
      if (struct.isSetDay_num()) {
        oprot.writeI32(struct.day_num);
      }
      if (struct.isSetShow_num()) {
        oprot.writeI32(struct.show_num);
      }
      if (struct.isSetType_id()) {
        oprot.writeI32(struct.type_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdPlan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.plan_id = iprot.readI32();
        struct.setPlan_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.plan_name = iprot.readString();
        struct.setPlan_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vocation = iprot.readString();
        struct.setVocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.billing_type = com.adp.java.AdChargeType.findByValue(iprot.readI32());
        struct.setBilling_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.budget = iprot.readDouble();
        struct.setBudgetIsSet(true);
      }
      if (incoming.get(6)) {
        struct.currency = com.adp.java.CurrencyType.findByValue(iprot.readI32());
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.start_date = iprot.readI32();
        struct.setStart_dateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.end_date = iprot.readI32();
        struct.setEnd_dateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.is_date_limit = iprot.readI32();
        struct.setIs_date_limitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.day_max = iprot.readI32();
        struct.setDay_maxIsSet(true);
      }
      if (incoming.get(11)) {
        struct.adtime = iprot.readString();
        struct.setAdtimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.enable = com.adp.java.PlanStatus.findByValue(iprot.readI32());
        struct.setEnableIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ctime = iprot.readI32();
        struct.setCtimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.mtime = iprot.readI32();
        struct.setMtimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pop_result = iprot.readI32();
        struct.setPop_resultIsSet(true);
      }
      if (incoming.get(16)) {
        struct.release_type = com.adp.java.ReleaseType.findByValue(iprot.readI32());
        struct.setRelease_typeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.smooth_control = iprot.readI32();
        struct.setSmooth_controlIsSet(true);
      }
      if (incoming.get(18)) {
        struct.priority = com.adp.java.AdPriority.findByValue(iprot.readI32());
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(19)) {
        struct.net_type = com.adp.java.NetWorkType.findByValue(iprot.readI32());
        struct.setNet_typeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.cpm = iprot.readDouble();
        struct.setCpmIsSet(true);
      }
      if (incoming.get(21)) {
        struct.daily_consum = iprot.readDouble();
        struct.setDaily_consumIsSet(true);
      }
      if (incoming.get(22)) {
        struct.real_consum = iprot.readDouble();
        struct.setReal_consumIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cost = iprot.readDouble();
        struct.setCostIsSet(true);
      }
      if (incoming.get(24)) {
        struct.cpc = iprot.readDouble();
        struct.setCpcIsSet(true);
      }
      if (incoming.get(25)) {
        struct.colum1 = iprot.readI32();
        struct.setColum1IsSet(true);
      }
      if (incoming.get(26)) {
        struct.colum2 = iprot.readString();
        struct.setColum2IsSet(true);
      }
      if (incoming.get(27)) {
        struct.media_name = iprot.readString();
        struct.setMedia_nameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(29)) {
        struct.order_policy = com.adp.java.OrderPolicy.findByValue(iprot.readI32());
        struct.setOrder_policyIsSet(true);
      }
      if (incoming.get(30)) {
        struct.all_day_or_not = iprot.readI32();
        struct.setAll_day_or_notIsSet(true);
      }
      if (incoming.get(31)) {
        struct.intervals = iprot.readString();
        struct.setIntervalsIsSet(true);
      }
      if (incoming.get(32)) {
        struct.time_interval = iprot.readI32();
        struct.setTime_intervalIsSet(true);
      }
      if (incoming.get(33)) {
        struct.day_num = iprot.readI32();
        struct.setDay_numIsSet(true);
      }
      if (incoming.get(34)) {
        struct.show_num = iprot.readI32();
        struct.setShow_numIsSet(true);
      }
      if (incoming.get(35)) {
        struct.type_id = iprot.readI32();
        struct.setType_idIsSet(true);
      }
    }
  }

}

