/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.adp.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdGroupService {

  public interface Iface {

    public int addAdgroup(AdGroup adGroup) throws org.apache.thrift.TException;

    public int addAdGroupAndPolicy(AdGroup adGroup, List<Integer> cids) throws org.apache.thrift.TException;

    public int addAdGroupsAndPolicys(List<AdGroup> adGroups, List<Integer> cids) throws org.apache.thrift.TException;

    public int delAdGroup(int group_id) throws org.apache.thrift.TException;

    public int delAdGroups(List<Integer> adGroups) throws org.apache.thrift.TException;

    public AdGroup findAdGroupById(int group_id) throws org.apache.thrift.TException;

    public List<AdGroup> batchFindAdGroupById(List<Integer> group_ids) throws org.apache.thrift.TException;

    public List<AdGroup> findAdGroupByInt(Map<String,Integer> int_params) throws org.apache.thrift.TException;

    public int updateStatusByGid(int group_id, com.adp.java.PlanStatus status) throws org.apache.thrift.TException;

    public int updateStatusByPid(int plan_id, com.adp.java.PlanStatus status) throws org.apache.thrift.TException;

    public int updateStatusByUid(int uid, com.adp.java.PlanStatus status) throws org.apache.thrift.TException;

    public int delAdGroupByUid(int plan_id) throws org.apache.thrift.TException;

    public List<AdGroup> getAdGroupsByUid(int uid) throws org.apache.thrift.TException;

    public List<AdGroup> getAdGroupByPid(int pid) throws org.apache.thrift.TException;

    public List<AdGroup> getAdGroupsByPidUid(int uid, int pid) throws org.apache.thrift.TException;

    public int insertPolicy(AdGroupPolicy policy) throws org.apache.thrift.TException;

    public int insertHost(List<AdGroupHost> hosts) throws org.apache.thrift.TException;

    public int updateAdGroup(AdGroup adGroup) throws org.apache.thrift.TException;

    public List<AdGroupPolicy> getPolicyIdByGid(int group_id) throws org.apache.thrift.TException;

    public List<AdGroupHost> getHostsByGid(int group_id) throws org.apache.thrift.TException;

    public int getNumOfAdGroupPagesByPlanId(int plan_id, int page_size) throws org.apache.thrift.TException;

    public List<AdGroup> getAdGroupsByPageIndex(int page_index, int page_size, int plan_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addAdgroup(AdGroup adGroup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAdgroup_call> resultHandler) throws org.apache.thrift.TException;

    public void addAdGroupAndPolicy(AdGroup adGroup, List<Integer> cids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAdGroupAndPolicy_call> resultHandler) throws org.apache.thrift.TException;

    public void addAdGroupsAndPolicys(List<AdGroup> adGroups, List<Integer> cids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAdGroupsAndPolicys_call> resultHandler) throws org.apache.thrift.TException;

    public void delAdGroup(int group_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delAdGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void delAdGroups(List<Integer> adGroups, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delAdGroups_call> resultHandler) throws org.apache.thrift.TException;

    public void findAdGroupById(int group_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAdGroupById_call> resultHandler) throws org.apache.thrift.TException;

    public void batchFindAdGroupById(List<Integer> group_ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.batchFindAdGroupById_call> resultHandler) throws org.apache.thrift.TException;

    public void findAdGroupByInt(Map<String,Integer> int_params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAdGroupByInt_call> resultHandler) throws org.apache.thrift.TException;

    public void updateStatusByGid(int group_id, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStatusByGid_call> resultHandler) throws org.apache.thrift.TException;

    public void updateStatusByPid(int plan_id, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStatusByPid_call> resultHandler) throws org.apache.thrift.TException;

    public void updateStatusByUid(int uid, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStatusByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void delAdGroupByUid(int plan_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delAdGroupByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void getAdGroupsByUid(int uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAdGroupsByUid_call> resultHandler) throws org.apache.thrift.TException;

    public void getAdGroupByPid(int pid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAdGroupByPid_call> resultHandler) throws org.apache.thrift.TException;

    public void getAdGroupsByPidUid(int uid, int pid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAdGroupsByPidUid_call> resultHandler) throws org.apache.thrift.TException;

    public void insertPolicy(AdGroupPolicy policy, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insertPolicy_call> resultHandler) throws org.apache.thrift.TException;

    public void insertHost(List<AdGroupHost> hosts, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insertHost_call> resultHandler) throws org.apache.thrift.TException;

    public void updateAdGroup(AdGroup adGroup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateAdGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void getPolicyIdByGid(int group_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPolicyIdByGid_call> resultHandler) throws org.apache.thrift.TException;

    public void getHostsByGid(int group_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHostsByGid_call> resultHandler) throws org.apache.thrift.TException;

    public void getNumOfAdGroupPagesByPlanId(int plan_id, int page_size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getNumOfAdGroupPagesByPlanId_call> resultHandler) throws org.apache.thrift.TException;

    public void getAdGroupsByPageIndex(int page_index, int page_size, int plan_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAdGroupsByPageIndex_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addAdgroup(AdGroup adGroup) throws org.apache.thrift.TException
    {
      send_addAdgroup(adGroup);
      return recv_addAdgroup();
    }

    public void send_addAdgroup(AdGroup adGroup) throws org.apache.thrift.TException
    {
      addAdgroup_args args = new addAdgroup_args();
      args.setAdGroup(adGroup);
      sendBase("addAdgroup", args);
    }

    public int recv_addAdgroup() throws org.apache.thrift.TException
    {
      addAdgroup_result result = new addAdgroup_result();
      receiveBase(result, "addAdgroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAdgroup failed: unknown result");
    }

    public int addAdGroupAndPolicy(AdGroup adGroup, List<Integer> cids) throws org.apache.thrift.TException
    {
      send_addAdGroupAndPolicy(adGroup, cids);
      return recv_addAdGroupAndPolicy();
    }

    public void send_addAdGroupAndPolicy(AdGroup adGroup, List<Integer> cids) throws org.apache.thrift.TException
    {
      addAdGroupAndPolicy_args args = new addAdGroupAndPolicy_args();
      args.setAdGroup(adGroup);
      args.setCids(cids);
      sendBase("addAdGroupAndPolicy", args);
    }

    public int recv_addAdGroupAndPolicy() throws org.apache.thrift.TException
    {
      addAdGroupAndPolicy_result result = new addAdGroupAndPolicy_result();
      receiveBase(result, "addAdGroupAndPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAdGroupAndPolicy failed: unknown result");
    }

    public int addAdGroupsAndPolicys(List<AdGroup> adGroups, List<Integer> cids) throws org.apache.thrift.TException
    {
      send_addAdGroupsAndPolicys(adGroups, cids);
      return recv_addAdGroupsAndPolicys();
    }

    public void send_addAdGroupsAndPolicys(List<AdGroup> adGroups, List<Integer> cids) throws org.apache.thrift.TException
    {
      addAdGroupsAndPolicys_args args = new addAdGroupsAndPolicys_args();
      args.setAdGroups(adGroups);
      args.setCids(cids);
      sendBase("addAdGroupsAndPolicys", args);
    }

    public int recv_addAdGroupsAndPolicys() throws org.apache.thrift.TException
    {
      addAdGroupsAndPolicys_result result = new addAdGroupsAndPolicys_result();
      receiveBase(result, "addAdGroupsAndPolicys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAdGroupsAndPolicys failed: unknown result");
    }

    public int delAdGroup(int group_id) throws org.apache.thrift.TException
    {
      send_delAdGroup(group_id);
      return recv_delAdGroup();
    }

    public void send_delAdGroup(int group_id) throws org.apache.thrift.TException
    {
      delAdGroup_args args = new delAdGroup_args();
      args.setGroup_id(group_id);
      sendBase("delAdGroup", args);
    }

    public int recv_delAdGroup() throws org.apache.thrift.TException
    {
      delAdGroup_result result = new delAdGroup_result();
      receiveBase(result, "delAdGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delAdGroup failed: unknown result");
    }

    public int delAdGroups(List<Integer> adGroups) throws org.apache.thrift.TException
    {
      send_delAdGroups(adGroups);
      return recv_delAdGroups();
    }

    public void send_delAdGroups(List<Integer> adGroups) throws org.apache.thrift.TException
    {
      delAdGroups_args args = new delAdGroups_args();
      args.setAdGroups(adGroups);
      sendBase("delAdGroups", args);
    }

    public int recv_delAdGroups() throws org.apache.thrift.TException
    {
      delAdGroups_result result = new delAdGroups_result();
      receiveBase(result, "delAdGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delAdGroups failed: unknown result");
    }

    public AdGroup findAdGroupById(int group_id) throws org.apache.thrift.TException
    {
      send_findAdGroupById(group_id);
      return recv_findAdGroupById();
    }

    public void send_findAdGroupById(int group_id) throws org.apache.thrift.TException
    {
      findAdGroupById_args args = new findAdGroupById_args();
      args.setGroup_id(group_id);
      sendBase("findAdGroupById", args);
    }

    public AdGroup recv_findAdGroupById() throws org.apache.thrift.TException
    {
      findAdGroupById_result result = new findAdGroupById_result();
      receiveBase(result, "findAdGroupById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAdGroupById failed: unknown result");
    }

    public List<AdGroup> batchFindAdGroupById(List<Integer> group_ids) throws org.apache.thrift.TException
    {
      send_batchFindAdGroupById(group_ids);
      return recv_batchFindAdGroupById();
    }

    public void send_batchFindAdGroupById(List<Integer> group_ids) throws org.apache.thrift.TException
    {
      batchFindAdGroupById_args args = new batchFindAdGroupById_args();
      args.setGroup_ids(group_ids);
      sendBase("batchFindAdGroupById", args);
    }

    public List<AdGroup> recv_batchFindAdGroupById() throws org.apache.thrift.TException
    {
      batchFindAdGroupById_result result = new batchFindAdGroupById_result();
      receiveBase(result, "batchFindAdGroupById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchFindAdGroupById failed: unknown result");
    }

    public List<AdGroup> findAdGroupByInt(Map<String,Integer> int_params) throws org.apache.thrift.TException
    {
      send_findAdGroupByInt(int_params);
      return recv_findAdGroupByInt();
    }

    public void send_findAdGroupByInt(Map<String,Integer> int_params) throws org.apache.thrift.TException
    {
      findAdGroupByInt_args args = new findAdGroupByInt_args();
      args.setInt_params(int_params);
      sendBase("findAdGroupByInt", args);
    }

    public List<AdGroup> recv_findAdGroupByInt() throws org.apache.thrift.TException
    {
      findAdGroupByInt_result result = new findAdGroupByInt_result();
      receiveBase(result, "findAdGroupByInt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAdGroupByInt failed: unknown result");
    }

    public int updateStatusByGid(int group_id, com.adp.java.PlanStatus status) throws org.apache.thrift.TException
    {
      send_updateStatusByGid(group_id, status);
      return recv_updateStatusByGid();
    }

    public void send_updateStatusByGid(int group_id, com.adp.java.PlanStatus status) throws org.apache.thrift.TException
    {
      updateStatusByGid_args args = new updateStatusByGid_args();
      args.setGroup_id(group_id);
      args.setStatus(status);
      sendBase("updateStatusByGid", args);
    }

    public int recv_updateStatusByGid() throws org.apache.thrift.TException
    {
      updateStatusByGid_result result = new updateStatusByGid_result();
      receiveBase(result, "updateStatusByGid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStatusByGid failed: unknown result");
    }

    public int updateStatusByPid(int plan_id, com.adp.java.PlanStatus status) throws org.apache.thrift.TException
    {
      send_updateStatusByPid(plan_id, status);
      return recv_updateStatusByPid();
    }

    public void send_updateStatusByPid(int plan_id, com.adp.java.PlanStatus status) throws org.apache.thrift.TException
    {
      updateStatusByPid_args args = new updateStatusByPid_args();
      args.setPlan_id(plan_id);
      args.setStatus(status);
      sendBase("updateStatusByPid", args);
    }

    public int recv_updateStatusByPid() throws org.apache.thrift.TException
    {
      updateStatusByPid_result result = new updateStatusByPid_result();
      receiveBase(result, "updateStatusByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStatusByPid failed: unknown result");
    }

    public int updateStatusByUid(int uid, com.adp.java.PlanStatus status) throws org.apache.thrift.TException
    {
      send_updateStatusByUid(uid, status);
      return recv_updateStatusByUid();
    }

    public void send_updateStatusByUid(int uid, com.adp.java.PlanStatus status) throws org.apache.thrift.TException
    {
      updateStatusByUid_args args = new updateStatusByUid_args();
      args.setUid(uid);
      args.setStatus(status);
      sendBase("updateStatusByUid", args);
    }

    public int recv_updateStatusByUid() throws org.apache.thrift.TException
    {
      updateStatusByUid_result result = new updateStatusByUid_result();
      receiveBase(result, "updateStatusByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStatusByUid failed: unknown result");
    }

    public int delAdGroupByUid(int plan_id) throws org.apache.thrift.TException
    {
      send_delAdGroupByUid(plan_id);
      return recv_delAdGroupByUid();
    }

    public void send_delAdGroupByUid(int plan_id) throws org.apache.thrift.TException
    {
      delAdGroupByUid_args args = new delAdGroupByUid_args();
      args.setPlan_id(plan_id);
      sendBase("delAdGroupByUid", args);
    }

    public int recv_delAdGroupByUid() throws org.apache.thrift.TException
    {
      delAdGroupByUid_result result = new delAdGroupByUid_result();
      receiveBase(result, "delAdGroupByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delAdGroupByUid failed: unknown result");
    }

    public List<AdGroup> getAdGroupsByUid(int uid) throws org.apache.thrift.TException
    {
      send_getAdGroupsByUid(uid);
      return recv_getAdGroupsByUid();
    }

    public void send_getAdGroupsByUid(int uid) throws org.apache.thrift.TException
    {
      getAdGroupsByUid_args args = new getAdGroupsByUid_args();
      args.setUid(uid);
      sendBase("getAdGroupsByUid", args);
    }

    public List<AdGroup> recv_getAdGroupsByUid() throws org.apache.thrift.TException
    {
      getAdGroupsByUid_result result = new getAdGroupsByUid_result();
      receiveBase(result, "getAdGroupsByUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdGroupsByUid failed: unknown result");
    }

    public List<AdGroup> getAdGroupByPid(int pid) throws org.apache.thrift.TException
    {
      send_getAdGroupByPid(pid);
      return recv_getAdGroupByPid();
    }

    public void send_getAdGroupByPid(int pid) throws org.apache.thrift.TException
    {
      getAdGroupByPid_args args = new getAdGroupByPid_args();
      args.setPid(pid);
      sendBase("getAdGroupByPid", args);
    }

    public List<AdGroup> recv_getAdGroupByPid() throws org.apache.thrift.TException
    {
      getAdGroupByPid_result result = new getAdGroupByPid_result();
      receiveBase(result, "getAdGroupByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdGroupByPid failed: unknown result");
    }

    public List<AdGroup> getAdGroupsByPidUid(int uid, int pid) throws org.apache.thrift.TException
    {
      send_getAdGroupsByPidUid(uid, pid);
      return recv_getAdGroupsByPidUid();
    }

    public void send_getAdGroupsByPidUid(int uid, int pid) throws org.apache.thrift.TException
    {
      getAdGroupsByPidUid_args args = new getAdGroupsByPidUid_args();
      args.setUid(uid);
      args.setPid(pid);
      sendBase("getAdGroupsByPidUid", args);
    }

    public List<AdGroup> recv_getAdGroupsByPidUid() throws org.apache.thrift.TException
    {
      getAdGroupsByPidUid_result result = new getAdGroupsByPidUid_result();
      receiveBase(result, "getAdGroupsByPidUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdGroupsByPidUid failed: unknown result");
    }

    public int insertPolicy(AdGroupPolicy policy) throws org.apache.thrift.TException
    {
      send_insertPolicy(policy);
      return recv_insertPolicy();
    }

    public void send_insertPolicy(AdGroupPolicy policy) throws org.apache.thrift.TException
    {
      insertPolicy_args args = new insertPolicy_args();
      args.setPolicy(policy);
      sendBase("insertPolicy", args);
    }

    public int recv_insertPolicy() throws org.apache.thrift.TException
    {
      insertPolicy_result result = new insertPolicy_result();
      receiveBase(result, "insertPolicy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertPolicy failed: unknown result");
    }

    public int insertHost(List<AdGroupHost> hosts) throws org.apache.thrift.TException
    {
      send_insertHost(hosts);
      return recv_insertHost();
    }

    public void send_insertHost(List<AdGroupHost> hosts) throws org.apache.thrift.TException
    {
      insertHost_args args = new insertHost_args();
      args.setHosts(hosts);
      sendBase("insertHost", args);
    }

    public int recv_insertHost() throws org.apache.thrift.TException
    {
      insertHost_result result = new insertHost_result();
      receiveBase(result, "insertHost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertHost failed: unknown result");
    }

    public int updateAdGroup(AdGroup adGroup) throws org.apache.thrift.TException
    {
      send_updateAdGroup(adGroup);
      return recv_updateAdGroup();
    }

    public void send_updateAdGroup(AdGroup adGroup) throws org.apache.thrift.TException
    {
      updateAdGroup_args args = new updateAdGroup_args();
      args.setAdGroup(adGroup);
      sendBase("updateAdGroup", args);
    }

    public int recv_updateAdGroup() throws org.apache.thrift.TException
    {
      updateAdGroup_result result = new updateAdGroup_result();
      receiveBase(result, "updateAdGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAdGroup failed: unknown result");
    }

    public List<AdGroupPolicy> getPolicyIdByGid(int group_id) throws org.apache.thrift.TException
    {
      send_getPolicyIdByGid(group_id);
      return recv_getPolicyIdByGid();
    }

    public void send_getPolicyIdByGid(int group_id) throws org.apache.thrift.TException
    {
      getPolicyIdByGid_args args = new getPolicyIdByGid_args();
      args.setGroup_id(group_id);
      sendBase("getPolicyIdByGid", args);
    }

    public List<AdGroupPolicy> recv_getPolicyIdByGid() throws org.apache.thrift.TException
    {
      getPolicyIdByGid_result result = new getPolicyIdByGid_result();
      receiveBase(result, "getPolicyIdByGid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPolicyIdByGid failed: unknown result");
    }

    public List<AdGroupHost> getHostsByGid(int group_id) throws org.apache.thrift.TException
    {
      send_getHostsByGid(group_id);
      return recv_getHostsByGid();
    }

    public void send_getHostsByGid(int group_id) throws org.apache.thrift.TException
    {
      getHostsByGid_args args = new getHostsByGid_args();
      args.setGroup_id(group_id);
      sendBase("getHostsByGid", args);
    }

    public List<AdGroupHost> recv_getHostsByGid() throws org.apache.thrift.TException
    {
      getHostsByGid_result result = new getHostsByGid_result();
      receiveBase(result, "getHostsByGid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHostsByGid failed: unknown result");
    }

    public int getNumOfAdGroupPagesByPlanId(int plan_id, int page_size) throws org.apache.thrift.TException
    {
      send_getNumOfAdGroupPagesByPlanId(plan_id, page_size);
      return recv_getNumOfAdGroupPagesByPlanId();
    }

    public void send_getNumOfAdGroupPagesByPlanId(int plan_id, int page_size) throws org.apache.thrift.TException
    {
      getNumOfAdGroupPagesByPlanId_args args = new getNumOfAdGroupPagesByPlanId_args();
      args.setPlan_id(plan_id);
      args.setPage_size(page_size);
      sendBase("getNumOfAdGroupPagesByPlanId", args);
    }

    public int recv_getNumOfAdGroupPagesByPlanId() throws org.apache.thrift.TException
    {
      getNumOfAdGroupPagesByPlanId_result result = new getNumOfAdGroupPagesByPlanId_result();
      receiveBase(result, "getNumOfAdGroupPagesByPlanId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNumOfAdGroupPagesByPlanId failed: unknown result");
    }

    public List<AdGroup> getAdGroupsByPageIndex(int page_index, int page_size, int plan_id) throws org.apache.thrift.TException
    {
      send_getAdGroupsByPageIndex(page_index, page_size, plan_id);
      return recv_getAdGroupsByPageIndex();
    }

    public void send_getAdGroupsByPageIndex(int page_index, int page_size, int plan_id) throws org.apache.thrift.TException
    {
      getAdGroupsByPageIndex_args args = new getAdGroupsByPageIndex_args();
      args.setPage_index(page_index);
      args.setPage_size(page_size);
      args.setPlan_id(plan_id);
      sendBase("getAdGroupsByPageIndex", args);
    }

    public List<AdGroup> recv_getAdGroupsByPageIndex() throws org.apache.thrift.TException
    {
      getAdGroupsByPageIndex_result result = new getAdGroupsByPageIndex_result();
      receiveBase(result, "getAdGroupsByPageIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdGroupsByPageIndex failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addAdgroup(AdGroup adGroup, org.apache.thrift.async.AsyncMethodCallback<addAdgroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAdgroup_call method_call = new addAdgroup_call(adGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAdgroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AdGroup adGroup;
      public addAdgroup_call(AdGroup adGroup, org.apache.thrift.async.AsyncMethodCallback<addAdgroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adGroup = adGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAdgroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAdgroup_args args = new addAdgroup_args();
        args.setAdGroup(adGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAdgroup();
      }
    }

    public void addAdGroupAndPolicy(AdGroup adGroup, List<Integer> cids, org.apache.thrift.async.AsyncMethodCallback<addAdGroupAndPolicy_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAdGroupAndPolicy_call method_call = new addAdGroupAndPolicy_call(adGroup, cids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAdGroupAndPolicy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AdGroup adGroup;
      private List<Integer> cids;
      public addAdGroupAndPolicy_call(AdGroup adGroup, List<Integer> cids, org.apache.thrift.async.AsyncMethodCallback<addAdGroupAndPolicy_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adGroup = adGroup;
        this.cids = cids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAdGroupAndPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAdGroupAndPolicy_args args = new addAdGroupAndPolicy_args();
        args.setAdGroup(adGroup);
        args.setCids(cids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAdGroupAndPolicy();
      }
    }

    public void addAdGroupsAndPolicys(List<AdGroup> adGroups, List<Integer> cids, org.apache.thrift.async.AsyncMethodCallback<addAdGroupsAndPolicys_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAdGroupsAndPolicys_call method_call = new addAdGroupsAndPolicys_call(adGroups, cids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAdGroupsAndPolicys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<AdGroup> adGroups;
      private List<Integer> cids;
      public addAdGroupsAndPolicys_call(List<AdGroup> adGroups, List<Integer> cids, org.apache.thrift.async.AsyncMethodCallback<addAdGroupsAndPolicys_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adGroups = adGroups;
        this.cids = cids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAdGroupsAndPolicys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAdGroupsAndPolicys_args args = new addAdGroupsAndPolicys_args();
        args.setAdGroups(adGroups);
        args.setCids(cids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAdGroupsAndPolicys();
      }
    }

    public void delAdGroup(int group_id, org.apache.thrift.async.AsyncMethodCallback<delAdGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delAdGroup_call method_call = new delAdGroup_call(group_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delAdGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      public delAdGroup_call(int group_id, org.apache.thrift.async.AsyncMethodCallback<delAdGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delAdGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delAdGroup_args args = new delAdGroup_args();
        args.setGroup_id(group_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delAdGroup();
      }
    }

    public void delAdGroups(List<Integer> adGroups, org.apache.thrift.async.AsyncMethodCallback<delAdGroups_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delAdGroups_call method_call = new delAdGroups_call(adGroups, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delAdGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> adGroups;
      public delAdGroups_call(List<Integer> adGroups, org.apache.thrift.async.AsyncMethodCallback<delAdGroups_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adGroups = adGroups;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delAdGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delAdGroups_args args = new delAdGroups_args();
        args.setAdGroups(adGroups);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delAdGroups();
      }
    }

    public void findAdGroupById(int group_id, org.apache.thrift.async.AsyncMethodCallback<findAdGroupById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAdGroupById_call method_call = new findAdGroupById_call(group_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAdGroupById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      public findAdGroupById_call(int group_id, org.apache.thrift.async.AsyncMethodCallback<findAdGroupById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAdGroupById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAdGroupById_args args = new findAdGroupById_args();
        args.setGroup_id(group_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AdGroup getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAdGroupById();
      }
    }

    public void batchFindAdGroupById(List<Integer> group_ids, org.apache.thrift.async.AsyncMethodCallback<batchFindAdGroupById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchFindAdGroupById_call method_call = new batchFindAdGroupById_call(group_ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchFindAdGroupById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> group_ids;
      public batchFindAdGroupById_call(List<Integer> group_ids, org.apache.thrift.async.AsyncMethodCallback<batchFindAdGroupById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_ids = group_ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchFindAdGroupById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchFindAdGroupById_args args = new batchFindAdGroupById_args();
        args.setGroup_ids(group_ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchFindAdGroupById();
      }
    }

    public void findAdGroupByInt(Map<String,Integer> int_params, org.apache.thrift.async.AsyncMethodCallback<findAdGroupByInt_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAdGroupByInt_call method_call = new findAdGroupByInt_call(int_params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAdGroupByInt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,Integer> int_params;
      public findAdGroupByInt_call(Map<String,Integer> int_params, org.apache.thrift.async.AsyncMethodCallback<findAdGroupByInt_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.int_params = int_params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAdGroupByInt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAdGroupByInt_args args = new findAdGroupByInt_args();
        args.setInt_params(int_params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAdGroupByInt();
      }
    }

    public void updateStatusByGid(int group_id, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatusByGid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStatusByGid_call method_call = new updateStatusByGid_call(group_id, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStatusByGid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      private com.adp.java.PlanStatus status;
      public updateStatusByGid_call(int group_id, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatusByGid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatusByGid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStatusByGid_args args = new updateStatusByGid_args();
        args.setGroup_id(group_id);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStatusByGid();
      }
    }

    public void updateStatusByPid(int plan_id, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatusByPid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStatusByPid_call method_call = new updateStatusByPid_call(plan_id, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStatusByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int plan_id;
      private com.adp.java.PlanStatus status;
      public updateStatusByPid_call(int plan_id, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatusByPid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.plan_id = plan_id;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatusByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStatusByPid_args args = new updateStatusByPid_args();
        args.setPlan_id(plan_id);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStatusByPid();
      }
    }

    public void updateStatusByUid(int uid, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatusByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStatusByUid_call method_call = new updateStatusByUid_call(uid, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStatusByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      private com.adp.java.PlanStatus status;
      public updateStatusByUid_call(int uid, com.adp.java.PlanStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatusByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatusByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStatusByUid_args args = new updateStatusByUid_args();
        args.setUid(uid);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStatusByUid();
      }
    }

    public void delAdGroupByUid(int plan_id, org.apache.thrift.async.AsyncMethodCallback<delAdGroupByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delAdGroupByUid_call method_call = new delAdGroupByUid_call(plan_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delAdGroupByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int plan_id;
      public delAdGroupByUid_call(int plan_id, org.apache.thrift.async.AsyncMethodCallback<delAdGroupByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.plan_id = plan_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delAdGroupByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delAdGroupByUid_args args = new delAdGroupByUid_args();
        args.setPlan_id(plan_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delAdGroupByUid();
      }
    }

    public void getAdGroupsByUid(int uid, org.apache.thrift.async.AsyncMethodCallback<getAdGroupsByUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdGroupsByUid_call method_call = new getAdGroupsByUid_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdGroupsByUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      public getAdGroupsByUid_call(int uid, org.apache.thrift.async.AsyncMethodCallback<getAdGroupsByUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdGroupsByUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdGroupsByUid_args args = new getAdGroupsByUid_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdGroupsByUid();
      }
    }

    public void getAdGroupByPid(int pid, org.apache.thrift.async.AsyncMethodCallback<getAdGroupByPid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdGroupByPid_call method_call = new getAdGroupByPid_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdGroupByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getAdGroupByPid_call(int pid, org.apache.thrift.async.AsyncMethodCallback<getAdGroupByPid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdGroupByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdGroupByPid_args args = new getAdGroupByPid_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdGroupByPid();
      }
    }

    public void getAdGroupsByPidUid(int uid, int pid, org.apache.thrift.async.AsyncMethodCallback<getAdGroupsByPidUid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdGroupsByPidUid_call method_call = new getAdGroupsByPidUid_call(uid, pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdGroupsByPidUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      private int pid;
      public getAdGroupsByPidUid_call(int uid, int pid, org.apache.thrift.async.AsyncMethodCallback<getAdGroupsByPidUid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdGroupsByPidUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdGroupsByPidUid_args args = new getAdGroupsByPidUid_args();
        args.setUid(uid);
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdGroupsByPidUid();
      }
    }

    public void insertPolicy(AdGroupPolicy policy, org.apache.thrift.async.AsyncMethodCallback<insertPolicy_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertPolicy_call method_call = new insertPolicy_call(policy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertPolicy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AdGroupPolicy policy;
      public insertPolicy_call(AdGroupPolicy policy, org.apache.thrift.async.AsyncMethodCallback<insertPolicy_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.policy = policy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertPolicy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertPolicy_args args = new insertPolicy_args();
        args.setPolicy(policy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertPolicy();
      }
    }

    public void insertHost(List<AdGroupHost> hosts, org.apache.thrift.async.AsyncMethodCallback<insertHost_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertHost_call method_call = new insertHost_call(hosts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertHost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<AdGroupHost> hosts;
      public insertHost_call(List<AdGroupHost> hosts, org.apache.thrift.async.AsyncMethodCallback<insertHost_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hosts = hosts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertHost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertHost_args args = new insertHost_args();
        args.setHosts(hosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertHost();
      }
    }

    public void updateAdGroup(AdGroup adGroup, org.apache.thrift.async.AsyncMethodCallback<updateAdGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAdGroup_call method_call = new updateAdGroup_call(adGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAdGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AdGroup adGroup;
      public updateAdGroup_call(AdGroup adGroup, org.apache.thrift.async.AsyncMethodCallback<updateAdGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adGroup = adGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAdGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAdGroup_args args = new updateAdGroup_args();
        args.setAdGroup(adGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAdGroup();
      }
    }

    public void getPolicyIdByGid(int group_id, org.apache.thrift.async.AsyncMethodCallback<getPolicyIdByGid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPolicyIdByGid_call method_call = new getPolicyIdByGid_call(group_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPolicyIdByGid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      public getPolicyIdByGid_call(int group_id, org.apache.thrift.async.AsyncMethodCallback<getPolicyIdByGid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPolicyIdByGid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPolicyIdByGid_args args = new getPolicyIdByGid_args();
        args.setGroup_id(group_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroupPolicy> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPolicyIdByGid();
      }
    }

    public void getHostsByGid(int group_id, org.apache.thrift.async.AsyncMethodCallback<getHostsByGid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHostsByGid_call method_call = new getHostsByGid_call(group_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHostsByGid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      public getHostsByGid_call(int group_id, org.apache.thrift.async.AsyncMethodCallback<getHostsByGid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHostsByGid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHostsByGid_args args = new getHostsByGid_args();
        args.setGroup_id(group_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroupHost> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHostsByGid();
      }
    }

    public void getNumOfAdGroupPagesByPlanId(int plan_id, int page_size, org.apache.thrift.async.AsyncMethodCallback<getNumOfAdGroupPagesByPlanId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNumOfAdGroupPagesByPlanId_call method_call = new getNumOfAdGroupPagesByPlanId_call(plan_id, page_size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNumOfAdGroupPagesByPlanId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int plan_id;
      private int page_size;
      public getNumOfAdGroupPagesByPlanId_call(int plan_id, int page_size, org.apache.thrift.async.AsyncMethodCallback<getNumOfAdGroupPagesByPlanId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.plan_id = plan_id;
        this.page_size = page_size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNumOfAdGroupPagesByPlanId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNumOfAdGroupPagesByPlanId_args args = new getNumOfAdGroupPagesByPlanId_args();
        args.setPlan_id(plan_id);
        args.setPage_size(page_size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNumOfAdGroupPagesByPlanId();
      }
    }

    public void getAdGroupsByPageIndex(int page_index, int page_size, int plan_id, org.apache.thrift.async.AsyncMethodCallback<getAdGroupsByPageIndex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdGroupsByPageIndex_call method_call = new getAdGroupsByPageIndex_call(page_index, page_size, plan_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdGroupsByPageIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int page_index;
      private int page_size;
      private int plan_id;
      public getAdGroupsByPageIndex_call(int page_index, int page_size, int plan_id, org.apache.thrift.async.AsyncMethodCallback<getAdGroupsByPageIndex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page_index = page_index;
        this.page_size = page_size;
        this.plan_id = plan_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdGroupsByPageIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdGroupsByPageIndex_args args = new getAdGroupsByPageIndex_args();
        args.setPage_index(page_index);
        args.setPage_size(page_size);
        args.setPlan_id(plan_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AdGroup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdGroupsByPageIndex();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addAdgroup", new addAdgroup());
      processMap.put("addAdGroupAndPolicy", new addAdGroupAndPolicy());
      processMap.put("addAdGroupsAndPolicys", new addAdGroupsAndPolicys());
      processMap.put("delAdGroup", new delAdGroup());
      processMap.put("delAdGroups", new delAdGroups());
      processMap.put("findAdGroupById", new findAdGroupById());
      processMap.put("batchFindAdGroupById", new batchFindAdGroupById());
      processMap.put("findAdGroupByInt", new findAdGroupByInt());
      processMap.put("updateStatusByGid", new updateStatusByGid());
      processMap.put("updateStatusByPid", new updateStatusByPid());
      processMap.put("updateStatusByUid", new updateStatusByUid());
      processMap.put("delAdGroupByUid", new delAdGroupByUid());
      processMap.put("getAdGroupsByUid", new getAdGroupsByUid());
      processMap.put("getAdGroupByPid", new getAdGroupByPid());
      processMap.put("getAdGroupsByPidUid", new getAdGroupsByPidUid());
      processMap.put("insertPolicy", new insertPolicy());
      processMap.put("insertHost", new insertHost());
      processMap.put("updateAdGroup", new updateAdGroup());
      processMap.put("getPolicyIdByGid", new getPolicyIdByGid());
      processMap.put("getHostsByGid", new getHostsByGid());
      processMap.put("getNumOfAdGroupPagesByPlanId", new getNumOfAdGroupPagesByPlanId());
      processMap.put("getAdGroupsByPageIndex", new getAdGroupsByPageIndex());
      return processMap;
    }

    private static class addAdgroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAdgroup_args> {
      public addAdgroup() {
        super("addAdgroup");
      }

      protected addAdgroup_args getEmptyArgsInstance() {
        return new addAdgroup_args();
      }

      protected addAdgroup_result getResult(I iface, addAdgroup_args args) throws org.apache.thrift.TException {
        addAdgroup_result result = new addAdgroup_result();
        result.success = iface.addAdgroup(args.adGroup);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class addAdGroupAndPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAdGroupAndPolicy_args> {
      public addAdGroupAndPolicy() {
        super("addAdGroupAndPolicy");
      }

      protected addAdGroupAndPolicy_args getEmptyArgsInstance() {
        return new addAdGroupAndPolicy_args();
      }

      protected addAdGroupAndPolicy_result getResult(I iface, addAdGroupAndPolicy_args args) throws org.apache.thrift.TException {
        addAdGroupAndPolicy_result result = new addAdGroupAndPolicy_result();
        result.success = iface.addAdGroupAndPolicy(args.adGroup, args.cids);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class addAdGroupsAndPolicys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAdGroupsAndPolicys_args> {
      public addAdGroupsAndPolicys() {
        super("addAdGroupsAndPolicys");
      }

      protected addAdGroupsAndPolicys_args getEmptyArgsInstance() {
        return new addAdGroupsAndPolicys_args();
      }

      protected addAdGroupsAndPolicys_result getResult(I iface, addAdGroupsAndPolicys_args args) throws org.apache.thrift.TException {
        addAdGroupsAndPolicys_result result = new addAdGroupsAndPolicys_result();
        result.success = iface.addAdGroupsAndPolicys(args.adGroups, args.cids);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delAdGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delAdGroup_args> {
      public delAdGroup() {
        super("delAdGroup");
      }

      protected delAdGroup_args getEmptyArgsInstance() {
        return new delAdGroup_args();
      }

      protected delAdGroup_result getResult(I iface, delAdGroup_args args) throws org.apache.thrift.TException {
        delAdGroup_result result = new delAdGroup_result();
        result.success = iface.delAdGroup(args.group_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delAdGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delAdGroups_args> {
      public delAdGroups() {
        super("delAdGroups");
      }

      protected delAdGroups_args getEmptyArgsInstance() {
        return new delAdGroups_args();
      }

      protected delAdGroups_result getResult(I iface, delAdGroups_args args) throws org.apache.thrift.TException {
        delAdGroups_result result = new delAdGroups_result();
        result.success = iface.delAdGroups(args.adGroups);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class findAdGroupById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAdGroupById_args> {
      public findAdGroupById() {
        super("findAdGroupById");
      }

      protected findAdGroupById_args getEmptyArgsInstance() {
        return new findAdGroupById_args();
      }

      protected findAdGroupById_result getResult(I iface, findAdGroupById_args args) throws org.apache.thrift.TException {
        findAdGroupById_result result = new findAdGroupById_result();
        result.success = iface.findAdGroupById(args.group_id);
        return result;
      }
    }

    private static class batchFindAdGroupById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchFindAdGroupById_args> {
      public batchFindAdGroupById() {
        super("batchFindAdGroupById");
      }

      protected batchFindAdGroupById_args getEmptyArgsInstance() {
        return new batchFindAdGroupById_args();
      }

      protected batchFindAdGroupById_result getResult(I iface, batchFindAdGroupById_args args) throws org.apache.thrift.TException {
        batchFindAdGroupById_result result = new batchFindAdGroupById_result();
        result.success = iface.batchFindAdGroupById(args.group_ids);
        return result;
      }
    }

    private static class findAdGroupByInt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAdGroupByInt_args> {
      public findAdGroupByInt() {
        super("findAdGroupByInt");
      }

      protected findAdGroupByInt_args getEmptyArgsInstance() {
        return new findAdGroupByInt_args();
      }

      protected findAdGroupByInt_result getResult(I iface, findAdGroupByInt_args args) throws org.apache.thrift.TException {
        findAdGroupByInt_result result = new findAdGroupByInt_result();
        result.success = iface.findAdGroupByInt(args.int_params);
        return result;
      }
    }

    private static class updateStatusByGid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatusByGid_args> {
      public updateStatusByGid() {
        super("updateStatusByGid");
      }

      protected updateStatusByGid_args getEmptyArgsInstance() {
        return new updateStatusByGid_args();
      }

      protected updateStatusByGid_result getResult(I iface, updateStatusByGid_args args) throws org.apache.thrift.TException {
        updateStatusByGid_result result = new updateStatusByGid_result();
        result.success = iface.updateStatusByGid(args.group_id, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class updateStatusByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatusByPid_args> {
      public updateStatusByPid() {
        super("updateStatusByPid");
      }

      protected updateStatusByPid_args getEmptyArgsInstance() {
        return new updateStatusByPid_args();
      }

      protected updateStatusByPid_result getResult(I iface, updateStatusByPid_args args) throws org.apache.thrift.TException {
        updateStatusByPid_result result = new updateStatusByPid_result();
        result.success = iface.updateStatusByPid(args.plan_id, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class updateStatusByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatusByUid_args> {
      public updateStatusByUid() {
        super("updateStatusByUid");
      }

      protected updateStatusByUid_args getEmptyArgsInstance() {
        return new updateStatusByUid_args();
      }

      protected updateStatusByUid_result getResult(I iface, updateStatusByUid_args args) throws org.apache.thrift.TException {
        updateStatusByUid_result result = new updateStatusByUid_result();
        result.success = iface.updateStatusByUid(args.uid, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delAdGroupByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delAdGroupByUid_args> {
      public delAdGroupByUid() {
        super("delAdGroupByUid");
      }

      protected delAdGroupByUid_args getEmptyArgsInstance() {
        return new delAdGroupByUid_args();
      }

      protected delAdGroupByUid_result getResult(I iface, delAdGroupByUid_args args) throws org.apache.thrift.TException {
        delAdGroupByUid_result result = new delAdGroupByUid_result();
        result.success = iface.delAdGroupByUid(args.plan_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getAdGroupsByUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdGroupsByUid_args> {
      public getAdGroupsByUid() {
        super("getAdGroupsByUid");
      }

      protected getAdGroupsByUid_args getEmptyArgsInstance() {
        return new getAdGroupsByUid_args();
      }

      protected getAdGroupsByUid_result getResult(I iface, getAdGroupsByUid_args args) throws org.apache.thrift.TException {
        getAdGroupsByUid_result result = new getAdGroupsByUid_result();
        result.success = iface.getAdGroupsByUid(args.uid);
        return result;
      }
    }

    private static class getAdGroupByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdGroupByPid_args> {
      public getAdGroupByPid() {
        super("getAdGroupByPid");
      }

      protected getAdGroupByPid_args getEmptyArgsInstance() {
        return new getAdGroupByPid_args();
      }

      protected getAdGroupByPid_result getResult(I iface, getAdGroupByPid_args args) throws org.apache.thrift.TException {
        getAdGroupByPid_result result = new getAdGroupByPid_result();
        result.success = iface.getAdGroupByPid(args.pid);
        return result;
      }
    }

    private static class getAdGroupsByPidUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdGroupsByPidUid_args> {
      public getAdGroupsByPidUid() {
        super("getAdGroupsByPidUid");
      }

      protected getAdGroupsByPidUid_args getEmptyArgsInstance() {
        return new getAdGroupsByPidUid_args();
      }

      protected getAdGroupsByPidUid_result getResult(I iface, getAdGroupsByPidUid_args args) throws org.apache.thrift.TException {
        getAdGroupsByPidUid_result result = new getAdGroupsByPidUid_result();
        result.success = iface.getAdGroupsByPidUid(args.uid, args.pid);
        return result;
      }
    }

    private static class insertPolicy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertPolicy_args> {
      public insertPolicy() {
        super("insertPolicy");
      }

      protected insertPolicy_args getEmptyArgsInstance() {
        return new insertPolicy_args();
      }

      protected insertPolicy_result getResult(I iface, insertPolicy_args args) throws org.apache.thrift.TException {
        insertPolicy_result result = new insertPolicy_result();
        result.success = iface.insertPolicy(args.policy);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class insertHost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertHost_args> {
      public insertHost() {
        super("insertHost");
      }

      protected insertHost_args getEmptyArgsInstance() {
        return new insertHost_args();
      }

      protected insertHost_result getResult(I iface, insertHost_args args) throws org.apache.thrift.TException {
        insertHost_result result = new insertHost_result();
        result.success = iface.insertHost(args.hosts);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class updateAdGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAdGroup_args> {
      public updateAdGroup() {
        super("updateAdGroup");
      }

      protected updateAdGroup_args getEmptyArgsInstance() {
        return new updateAdGroup_args();
      }

      protected updateAdGroup_result getResult(I iface, updateAdGroup_args args) throws org.apache.thrift.TException {
        updateAdGroup_result result = new updateAdGroup_result();
        result.success = iface.updateAdGroup(args.adGroup);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getPolicyIdByGid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPolicyIdByGid_args> {
      public getPolicyIdByGid() {
        super("getPolicyIdByGid");
      }

      protected getPolicyIdByGid_args getEmptyArgsInstance() {
        return new getPolicyIdByGid_args();
      }

      protected getPolicyIdByGid_result getResult(I iface, getPolicyIdByGid_args args) throws org.apache.thrift.TException {
        getPolicyIdByGid_result result = new getPolicyIdByGid_result();
        result.success = iface.getPolicyIdByGid(args.group_id);
        return result;
      }
    }

    private static class getHostsByGid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHostsByGid_args> {
      public getHostsByGid() {
        super("getHostsByGid");
      }

      protected getHostsByGid_args getEmptyArgsInstance() {
        return new getHostsByGid_args();
      }

      protected getHostsByGid_result getResult(I iface, getHostsByGid_args args) throws org.apache.thrift.TException {
        getHostsByGid_result result = new getHostsByGid_result();
        result.success = iface.getHostsByGid(args.group_id);
        return result;
      }
    }

    private static class getNumOfAdGroupPagesByPlanId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNumOfAdGroupPagesByPlanId_args> {
      public getNumOfAdGroupPagesByPlanId() {
        super("getNumOfAdGroupPagesByPlanId");
      }

      protected getNumOfAdGroupPagesByPlanId_args getEmptyArgsInstance() {
        return new getNumOfAdGroupPagesByPlanId_args();
      }

      protected getNumOfAdGroupPagesByPlanId_result getResult(I iface, getNumOfAdGroupPagesByPlanId_args args) throws org.apache.thrift.TException {
        getNumOfAdGroupPagesByPlanId_result result = new getNumOfAdGroupPagesByPlanId_result();
        result.success = iface.getNumOfAdGroupPagesByPlanId(args.plan_id, args.page_size);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getAdGroupsByPageIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdGroupsByPageIndex_args> {
      public getAdGroupsByPageIndex() {
        super("getAdGroupsByPageIndex");
      }

      protected getAdGroupsByPageIndex_args getEmptyArgsInstance() {
        return new getAdGroupsByPageIndex_args();
      }

      protected getAdGroupsByPageIndex_result getResult(I iface, getAdGroupsByPageIndex_args args) throws org.apache.thrift.TException {
        getAdGroupsByPageIndex_result result = new getAdGroupsByPageIndex_result();
        result.success = iface.getAdGroupsByPageIndex(args.page_index, args.page_size, args.plan_id);
        return result;
      }
    }

  }

  public static class addAdgroup_args implements org.apache.thrift.TBase<addAdgroup_args, addAdgroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAdgroup_args");

    private static final org.apache.thrift.protocol.TField AD_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("adGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAdgroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAdgroup_argsTupleSchemeFactory());
    }

    public AdGroup adGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_GROUP((short)1, "adGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_GROUP
            return AD_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_GROUP, new org.apache.thrift.meta_data.FieldMetaData("adGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAdgroup_args.class, metaDataMap);
    }

    public addAdgroup_args() {
    }

    public addAdgroup_args(
      AdGroup adGroup)
    {
      this();
      this.adGroup = adGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAdgroup_args(addAdgroup_args other) {
      if (other.isSetAdGroup()) {
        this.adGroup = new AdGroup(other.adGroup);
      }
    }

    public addAdgroup_args deepCopy() {
      return new addAdgroup_args(this);
    }

    @Override
    public void clear() {
      this.adGroup = null;
    }

    public AdGroup getAdGroup() {
      return this.adGroup;
    }

    public addAdgroup_args setAdGroup(AdGroup adGroup) {
      this.adGroup = adGroup;
      return this;
    }

    public void unsetAdGroup() {
      this.adGroup = null;
    }

    /** Returns true if field adGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetAdGroup() {
      return this.adGroup != null;
    }

    public void setAdGroupIsSet(boolean value) {
      if (!value) {
        this.adGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AD_GROUP:
        if (value == null) {
          unsetAdGroup();
        } else {
          setAdGroup((AdGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_GROUP:
        return getAdGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AD_GROUP:
        return isSetAdGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAdgroup_args)
        return this.equals((addAdgroup_args)that);
      return false;
    }

    public boolean equals(addAdgroup_args that) {
      if (that == null)
        return false;

      boolean this_present_adGroup = true && this.isSetAdGroup();
      boolean that_present_adGroup = true && that.isSetAdGroup();
      if (this_present_adGroup || that_present_adGroup) {
        if (!(this_present_adGroup && that_present_adGroup))
          return false;
        if (!this.adGroup.equals(that.adGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAdgroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAdgroup_args typedOther = (addAdgroup_args)other;

      lastComparison = Boolean.valueOf(isSetAdGroup()).compareTo(typedOther.isSetAdGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adGroup, typedOther.adGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAdgroup_args(");
      boolean first = true;

      sb.append("adGroup:");
      if (this.adGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.adGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAdgroup_argsStandardSchemeFactory implements SchemeFactory {
      public addAdgroup_argsStandardScheme getScheme() {
        return new addAdgroup_argsStandardScheme();
      }
    }

    private static class addAdgroup_argsStandardScheme extends StandardScheme<addAdgroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAdgroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adGroup = new AdGroup();
                struct.adGroup.read(iprot);
                struct.setAdGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAdgroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adGroup != null) {
          oprot.writeFieldBegin(AD_GROUP_FIELD_DESC);
          struct.adGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAdgroup_argsTupleSchemeFactory implements SchemeFactory {
      public addAdgroup_argsTupleScheme getScheme() {
        return new addAdgroup_argsTupleScheme();
      }
    }

    private static class addAdgroup_argsTupleScheme extends TupleScheme<addAdgroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAdgroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdGroup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdGroup()) {
          struct.adGroup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAdgroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adGroup = new AdGroup();
          struct.adGroup.read(iprot);
          struct.setAdGroupIsSet(true);
        }
      }
    }

  }

  public static class addAdgroup_result implements org.apache.thrift.TBase<addAdgroup_result, addAdgroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAdgroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAdgroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAdgroup_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAdgroup_result.class, metaDataMap);
    }

    public addAdgroup_result() {
    }

    public addAdgroup_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAdgroup_result(addAdgroup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addAdgroup_result deepCopy() {
      return new addAdgroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addAdgroup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAdgroup_result)
        return this.equals((addAdgroup_result)that);
      return false;
    }

    public boolean equals(addAdgroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAdgroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAdgroup_result typedOther = (addAdgroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAdgroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAdgroup_resultStandardSchemeFactory implements SchemeFactory {
      public addAdgroup_resultStandardScheme getScheme() {
        return new addAdgroup_resultStandardScheme();
      }
    }

    private static class addAdgroup_resultStandardScheme extends StandardScheme<addAdgroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAdgroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAdgroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAdgroup_resultTupleSchemeFactory implements SchemeFactory {
      public addAdgroup_resultTupleScheme getScheme() {
        return new addAdgroup_resultTupleScheme();
      }
    }

    private static class addAdgroup_resultTupleScheme extends TupleScheme<addAdgroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAdgroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAdgroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addAdGroupAndPolicy_args implements org.apache.thrift.TBase<addAdGroupAndPolicy_args, addAdGroupAndPolicy_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAdGroupAndPolicy_args");

    private static final org.apache.thrift.protocol.TField AD_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("adGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAdGroupAndPolicy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAdGroupAndPolicy_argsTupleSchemeFactory());
    }

    public AdGroup adGroup; // required
    public List<Integer> cids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_GROUP((short)1, "adGroup"),
      CIDS((short)2, "cids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_GROUP
            return AD_GROUP;
          case 2: // CIDS
            return CIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_GROUP, new org.apache.thrift.meta_data.FieldMetaData("adGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class)));
      tmpMap.put(_Fields.CIDS, new org.apache.thrift.meta_data.FieldMetaData("cids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAdGroupAndPolicy_args.class, metaDataMap);
    }

    public addAdGroupAndPolicy_args() {
    }

    public addAdGroupAndPolicy_args(
      AdGroup adGroup,
      List<Integer> cids)
    {
      this();
      this.adGroup = adGroup;
      this.cids = cids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAdGroupAndPolicy_args(addAdGroupAndPolicy_args other) {
      if (other.isSetAdGroup()) {
        this.adGroup = new AdGroup(other.adGroup);
      }
      if (other.isSetCids()) {
        List<Integer> __this__cids = new ArrayList<Integer>();
        for (Integer other_element : other.cids) {
          __this__cids.add(other_element);
        }
        this.cids = __this__cids;
      }
    }

    public addAdGroupAndPolicy_args deepCopy() {
      return new addAdGroupAndPolicy_args(this);
    }

    @Override
    public void clear() {
      this.adGroup = null;
      this.cids = null;
    }

    public AdGroup getAdGroup() {
      return this.adGroup;
    }

    public addAdGroupAndPolicy_args setAdGroup(AdGroup adGroup) {
      this.adGroup = adGroup;
      return this;
    }

    public void unsetAdGroup() {
      this.adGroup = null;
    }

    /** Returns true if field adGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetAdGroup() {
      return this.adGroup != null;
    }

    public void setAdGroupIsSet(boolean value) {
      if (!value) {
        this.adGroup = null;
      }
    }

    public int getCidsSize() {
      return (this.cids == null) ? 0 : this.cids.size();
    }

    public java.util.Iterator<Integer> getCidsIterator() {
      return (this.cids == null) ? null : this.cids.iterator();
    }

    public void addToCids(int elem) {
      if (this.cids == null) {
        this.cids = new ArrayList<Integer>();
      }
      this.cids.add(elem);
    }

    public List<Integer> getCids() {
      return this.cids;
    }

    public addAdGroupAndPolicy_args setCids(List<Integer> cids) {
      this.cids = cids;
      return this;
    }

    public void unsetCids() {
      this.cids = null;
    }

    /** Returns true if field cids is set (has been assigned a value) and false otherwise */
    public boolean isSetCids() {
      return this.cids != null;
    }

    public void setCidsIsSet(boolean value) {
      if (!value) {
        this.cids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AD_GROUP:
        if (value == null) {
          unsetAdGroup();
        } else {
          setAdGroup((AdGroup)value);
        }
        break;

      case CIDS:
        if (value == null) {
          unsetCids();
        } else {
          setCids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_GROUP:
        return getAdGroup();

      case CIDS:
        return getCids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AD_GROUP:
        return isSetAdGroup();
      case CIDS:
        return isSetCids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAdGroupAndPolicy_args)
        return this.equals((addAdGroupAndPolicy_args)that);
      return false;
    }

    public boolean equals(addAdGroupAndPolicy_args that) {
      if (that == null)
        return false;

      boolean this_present_adGroup = true && this.isSetAdGroup();
      boolean that_present_adGroup = true && that.isSetAdGroup();
      if (this_present_adGroup || that_present_adGroup) {
        if (!(this_present_adGroup && that_present_adGroup))
          return false;
        if (!this.adGroup.equals(that.adGroup))
          return false;
      }

      boolean this_present_cids = true && this.isSetCids();
      boolean that_present_cids = true && that.isSetCids();
      if (this_present_cids || that_present_cids) {
        if (!(this_present_cids && that_present_cids))
          return false;
        if (!this.cids.equals(that.cids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAdGroupAndPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAdGroupAndPolicy_args typedOther = (addAdGroupAndPolicy_args)other;

      lastComparison = Boolean.valueOf(isSetAdGroup()).compareTo(typedOther.isSetAdGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adGroup, typedOther.adGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCids()).compareTo(typedOther.isSetCids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cids, typedOther.cids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAdGroupAndPolicy_args(");
      boolean first = true;

      sb.append("adGroup:");
      if (this.adGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.adGroup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cids:");
      if (this.cids == null) {
        sb.append("null");
      } else {
        sb.append(this.cids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAdGroupAndPolicy_argsStandardSchemeFactory implements SchemeFactory {
      public addAdGroupAndPolicy_argsStandardScheme getScheme() {
        return new addAdGroupAndPolicy_argsStandardScheme();
      }
    }

    private static class addAdGroupAndPolicy_argsStandardScheme extends StandardScheme<addAdGroupAndPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAdGroupAndPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adGroup = new AdGroup();
                struct.adGroup.read(iprot);
                struct.setAdGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.cids = new ArrayList<Integer>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    int _elem18; // required
                    _elem18 = iprot.readI32();
                    struct.cids.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setCidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAdGroupAndPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adGroup != null) {
          oprot.writeFieldBegin(AD_GROUP_FIELD_DESC);
          struct.adGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cids != null) {
          oprot.writeFieldBegin(CIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.cids.size()));
            for (int _iter19 : struct.cids)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAdGroupAndPolicy_argsTupleSchemeFactory implements SchemeFactory {
      public addAdGroupAndPolicy_argsTupleScheme getScheme() {
        return new addAdGroupAndPolicy_argsTupleScheme();
      }
    }

    private static class addAdGroupAndPolicy_argsTupleScheme extends TupleScheme<addAdGroupAndPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAdGroupAndPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdGroup()) {
          optionals.set(0);
        }
        if (struct.isSetCids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdGroup()) {
          struct.adGroup.write(oprot);
        }
        if (struct.isSetCids()) {
          {
            oprot.writeI32(struct.cids.size());
            for (int _iter20 : struct.cids)
            {
              oprot.writeI32(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAdGroupAndPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adGroup = new AdGroup();
          struct.adGroup.read(iprot);
          struct.setAdGroupIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.cids = new ArrayList<Integer>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              int _elem23; // required
              _elem23 = iprot.readI32();
              struct.cids.add(_elem23);
            }
          }
          struct.setCidsIsSet(true);
        }
      }
    }

  }

  public static class addAdGroupAndPolicy_result implements org.apache.thrift.TBase<addAdGroupAndPolicy_result, addAdGroupAndPolicy_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAdGroupAndPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAdGroupAndPolicy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAdGroupAndPolicy_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAdGroupAndPolicy_result.class, metaDataMap);
    }

    public addAdGroupAndPolicy_result() {
    }

    public addAdGroupAndPolicy_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAdGroupAndPolicy_result(addAdGroupAndPolicy_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addAdGroupAndPolicy_result deepCopy() {
      return new addAdGroupAndPolicy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addAdGroupAndPolicy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAdGroupAndPolicy_result)
        return this.equals((addAdGroupAndPolicy_result)that);
      return false;
    }

    public boolean equals(addAdGroupAndPolicy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAdGroupAndPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAdGroupAndPolicy_result typedOther = (addAdGroupAndPolicy_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAdGroupAndPolicy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAdGroupAndPolicy_resultStandardSchemeFactory implements SchemeFactory {
      public addAdGroupAndPolicy_resultStandardScheme getScheme() {
        return new addAdGroupAndPolicy_resultStandardScheme();
      }
    }

    private static class addAdGroupAndPolicy_resultStandardScheme extends StandardScheme<addAdGroupAndPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAdGroupAndPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAdGroupAndPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAdGroupAndPolicy_resultTupleSchemeFactory implements SchemeFactory {
      public addAdGroupAndPolicy_resultTupleScheme getScheme() {
        return new addAdGroupAndPolicy_resultTupleScheme();
      }
    }

    private static class addAdGroupAndPolicy_resultTupleScheme extends TupleScheme<addAdGroupAndPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAdGroupAndPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAdGroupAndPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addAdGroupsAndPolicys_args implements org.apache.thrift.TBase<addAdGroupsAndPolicys_args, addAdGroupsAndPolicys_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAdGroupsAndPolicys_args");

    private static final org.apache.thrift.protocol.TField AD_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("adGroups", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAdGroupsAndPolicys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAdGroupsAndPolicys_argsTupleSchemeFactory());
    }

    public List<AdGroup> adGroups; // required
    public List<Integer> cids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_GROUPS((short)1, "adGroups"),
      CIDS((short)2, "cids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_GROUPS
            return AD_GROUPS;
          case 2: // CIDS
            return CIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("adGroups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class))));
      tmpMap.put(_Fields.CIDS, new org.apache.thrift.meta_data.FieldMetaData("cids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAdGroupsAndPolicys_args.class, metaDataMap);
    }

    public addAdGroupsAndPolicys_args() {
    }

    public addAdGroupsAndPolicys_args(
      List<AdGroup> adGroups,
      List<Integer> cids)
    {
      this();
      this.adGroups = adGroups;
      this.cids = cids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAdGroupsAndPolicys_args(addAdGroupsAndPolicys_args other) {
      if (other.isSetAdGroups()) {
        List<AdGroup> __this__adGroups = new ArrayList<AdGroup>();
        for (AdGroup other_element : other.adGroups) {
          __this__adGroups.add(new AdGroup(other_element));
        }
        this.adGroups = __this__adGroups;
      }
      if (other.isSetCids()) {
        List<Integer> __this__cids = new ArrayList<Integer>();
        for (Integer other_element : other.cids) {
          __this__cids.add(other_element);
        }
        this.cids = __this__cids;
      }
    }

    public addAdGroupsAndPolicys_args deepCopy() {
      return new addAdGroupsAndPolicys_args(this);
    }

    @Override
    public void clear() {
      this.adGroups = null;
      this.cids = null;
    }

    public int getAdGroupsSize() {
      return (this.adGroups == null) ? 0 : this.adGroups.size();
    }

    public java.util.Iterator<AdGroup> getAdGroupsIterator() {
      return (this.adGroups == null) ? null : this.adGroups.iterator();
    }

    public void addToAdGroups(AdGroup elem) {
      if (this.adGroups == null) {
        this.adGroups = new ArrayList<AdGroup>();
      }
      this.adGroups.add(elem);
    }

    public List<AdGroup> getAdGroups() {
      return this.adGroups;
    }

    public addAdGroupsAndPolicys_args setAdGroups(List<AdGroup> adGroups) {
      this.adGroups = adGroups;
      return this;
    }

    public void unsetAdGroups() {
      this.adGroups = null;
    }

    /** Returns true if field adGroups is set (has been assigned a value) and false otherwise */
    public boolean isSetAdGroups() {
      return this.adGroups != null;
    }

    public void setAdGroupsIsSet(boolean value) {
      if (!value) {
        this.adGroups = null;
      }
    }

    public int getCidsSize() {
      return (this.cids == null) ? 0 : this.cids.size();
    }

    public java.util.Iterator<Integer> getCidsIterator() {
      return (this.cids == null) ? null : this.cids.iterator();
    }

    public void addToCids(int elem) {
      if (this.cids == null) {
        this.cids = new ArrayList<Integer>();
      }
      this.cids.add(elem);
    }

    public List<Integer> getCids() {
      return this.cids;
    }

    public addAdGroupsAndPolicys_args setCids(List<Integer> cids) {
      this.cids = cids;
      return this;
    }

    public void unsetCids() {
      this.cids = null;
    }

    /** Returns true if field cids is set (has been assigned a value) and false otherwise */
    public boolean isSetCids() {
      return this.cids != null;
    }

    public void setCidsIsSet(boolean value) {
      if (!value) {
        this.cids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AD_GROUPS:
        if (value == null) {
          unsetAdGroups();
        } else {
          setAdGroups((List<AdGroup>)value);
        }
        break;

      case CIDS:
        if (value == null) {
          unsetCids();
        } else {
          setCids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_GROUPS:
        return getAdGroups();

      case CIDS:
        return getCids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AD_GROUPS:
        return isSetAdGroups();
      case CIDS:
        return isSetCids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAdGroupsAndPolicys_args)
        return this.equals((addAdGroupsAndPolicys_args)that);
      return false;
    }

    public boolean equals(addAdGroupsAndPolicys_args that) {
      if (that == null)
        return false;

      boolean this_present_adGroups = true && this.isSetAdGroups();
      boolean that_present_adGroups = true && that.isSetAdGroups();
      if (this_present_adGroups || that_present_adGroups) {
        if (!(this_present_adGroups && that_present_adGroups))
          return false;
        if (!this.adGroups.equals(that.adGroups))
          return false;
      }

      boolean this_present_cids = true && this.isSetCids();
      boolean that_present_cids = true && that.isSetCids();
      if (this_present_cids || that_present_cids) {
        if (!(this_present_cids && that_present_cids))
          return false;
        if (!this.cids.equals(that.cids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAdGroupsAndPolicys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAdGroupsAndPolicys_args typedOther = (addAdGroupsAndPolicys_args)other;

      lastComparison = Boolean.valueOf(isSetAdGroups()).compareTo(typedOther.isSetAdGroups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdGroups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adGroups, typedOther.adGroups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCids()).compareTo(typedOther.isSetCids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cids, typedOther.cids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAdGroupsAndPolicys_args(");
      boolean first = true;

      sb.append("adGroups:");
      if (this.adGroups == null) {
        sb.append("null");
      } else {
        sb.append(this.adGroups);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cids:");
      if (this.cids == null) {
        sb.append("null");
      } else {
        sb.append(this.cids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAdGroupsAndPolicys_argsStandardSchemeFactory implements SchemeFactory {
      public addAdGroupsAndPolicys_argsStandardScheme getScheme() {
        return new addAdGroupsAndPolicys_argsStandardScheme();
      }
    }

    private static class addAdGroupsAndPolicys_argsStandardScheme extends StandardScheme<addAdGroupsAndPolicys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAdGroupsAndPolicys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_GROUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.adGroups = new ArrayList<AdGroup>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    AdGroup _elem26; // required
                    _elem26 = new AdGroup();
                    _elem26.read(iprot);
                    struct.adGroups.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setAdGroupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                  struct.cids = new ArrayList<Integer>(_list27.size);
                  for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                  {
                    int _elem29; // required
                    _elem29 = iprot.readI32();
                    struct.cids.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setCidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAdGroupsAndPolicys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adGroups != null) {
          oprot.writeFieldBegin(AD_GROUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.adGroups.size()));
            for (AdGroup _iter30 : struct.adGroups)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.cids != null) {
          oprot.writeFieldBegin(CIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.cids.size()));
            for (int _iter31 : struct.cids)
            {
              oprot.writeI32(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAdGroupsAndPolicys_argsTupleSchemeFactory implements SchemeFactory {
      public addAdGroupsAndPolicys_argsTupleScheme getScheme() {
        return new addAdGroupsAndPolicys_argsTupleScheme();
      }
    }

    private static class addAdGroupsAndPolicys_argsTupleScheme extends TupleScheme<addAdGroupsAndPolicys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAdGroupsAndPolicys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdGroups()) {
          optionals.set(0);
        }
        if (struct.isSetCids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdGroups()) {
          {
            oprot.writeI32(struct.adGroups.size());
            for (AdGroup _iter32 : struct.adGroups)
            {
              _iter32.write(oprot);
            }
          }
        }
        if (struct.isSetCids()) {
          {
            oprot.writeI32(struct.cids.size());
            for (int _iter33 : struct.cids)
            {
              oprot.writeI32(_iter33);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAdGroupsAndPolicys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.adGroups = new ArrayList<AdGroup>(_list34.size);
            for (int _i35 = 0; _i35 < _list34.size; ++_i35)
            {
              AdGroup _elem36; // required
              _elem36 = new AdGroup();
              _elem36.read(iprot);
              struct.adGroups.add(_elem36);
            }
          }
          struct.setAdGroupsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.cids = new ArrayList<Integer>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              int _elem39; // required
              _elem39 = iprot.readI32();
              struct.cids.add(_elem39);
            }
          }
          struct.setCidsIsSet(true);
        }
      }
    }

  }

  public static class addAdGroupsAndPolicys_result implements org.apache.thrift.TBase<addAdGroupsAndPolicys_result, addAdGroupsAndPolicys_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAdGroupsAndPolicys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAdGroupsAndPolicys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAdGroupsAndPolicys_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAdGroupsAndPolicys_result.class, metaDataMap);
    }

    public addAdGroupsAndPolicys_result() {
    }

    public addAdGroupsAndPolicys_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAdGroupsAndPolicys_result(addAdGroupsAndPolicys_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addAdGroupsAndPolicys_result deepCopy() {
      return new addAdGroupsAndPolicys_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addAdGroupsAndPolicys_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAdGroupsAndPolicys_result)
        return this.equals((addAdGroupsAndPolicys_result)that);
      return false;
    }

    public boolean equals(addAdGroupsAndPolicys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAdGroupsAndPolicys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAdGroupsAndPolicys_result typedOther = (addAdGroupsAndPolicys_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAdGroupsAndPolicys_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAdGroupsAndPolicys_resultStandardSchemeFactory implements SchemeFactory {
      public addAdGroupsAndPolicys_resultStandardScheme getScheme() {
        return new addAdGroupsAndPolicys_resultStandardScheme();
      }
    }

    private static class addAdGroupsAndPolicys_resultStandardScheme extends StandardScheme<addAdGroupsAndPolicys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAdGroupsAndPolicys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAdGroupsAndPolicys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAdGroupsAndPolicys_resultTupleSchemeFactory implements SchemeFactory {
      public addAdGroupsAndPolicys_resultTupleScheme getScheme() {
        return new addAdGroupsAndPolicys_resultTupleScheme();
      }
    }

    private static class addAdGroupsAndPolicys_resultTupleScheme extends TupleScheme<addAdGroupsAndPolicys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAdGroupsAndPolicys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAdGroupsAndPolicys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delAdGroup_args implements org.apache.thrift.TBase<delAdGroup_args, delAdGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAdGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAdGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAdGroup_argsTupleSchemeFactory());
    }

    public int group_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAdGroup_args.class, metaDataMap);
    }

    public delAdGroup_args() {
    }

    public delAdGroup_args(
      int group_id)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAdGroup_args(delAdGroup_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.group_id = other.group_id;
    }

    public delAdGroup_args deepCopy() {
      return new delAdGroup_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public delAdGroup_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bit_vector.clear(__GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return __isset_bit_vector.get(__GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bit_vector.set(__GROUP_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAdGroup_args)
        return this.equals((delAdGroup_args)that);
      return false;
    }

    public boolean equals(delAdGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delAdGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delAdGroup_args typedOther = (delAdGroup_args)other;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(typedOther.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, typedOther.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAdGroup_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAdGroup_argsStandardSchemeFactory implements SchemeFactory {
      public delAdGroup_argsStandardScheme getScheme() {
        return new delAdGroup_argsStandardScheme();
      }
    }

    private static class delAdGroup_argsStandardScheme extends StandardScheme<delAdGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAdGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAdGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAdGroup_argsTupleSchemeFactory implements SchemeFactory {
      public delAdGroup_argsTupleScheme getScheme() {
        return new delAdGroup_argsTupleScheme();
      }
    }

    private static class delAdGroup_argsTupleScheme extends TupleScheme<delAdGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAdGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAdGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
      }
    }

  }

  public static class delAdGroup_result implements org.apache.thrift.TBase<delAdGroup_result, delAdGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAdGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAdGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAdGroup_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAdGroup_result.class, metaDataMap);
    }

    public delAdGroup_result() {
    }

    public delAdGroup_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAdGroup_result(delAdGroup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delAdGroup_result deepCopy() {
      return new delAdGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delAdGroup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAdGroup_result)
        return this.equals((delAdGroup_result)that);
      return false;
    }

    public boolean equals(delAdGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delAdGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delAdGroup_result typedOther = (delAdGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAdGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAdGroup_resultStandardSchemeFactory implements SchemeFactory {
      public delAdGroup_resultStandardScheme getScheme() {
        return new delAdGroup_resultStandardScheme();
      }
    }

    private static class delAdGroup_resultStandardScheme extends StandardScheme<delAdGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAdGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAdGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAdGroup_resultTupleSchemeFactory implements SchemeFactory {
      public delAdGroup_resultTupleScheme getScheme() {
        return new delAdGroup_resultTupleScheme();
      }
    }

    private static class delAdGroup_resultTupleScheme extends TupleScheme<delAdGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAdGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAdGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delAdGroups_args implements org.apache.thrift.TBase<delAdGroups_args, delAdGroups_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAdGroups_args");

    private static final org.apache.thrift.protocol.TField AD_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("adGroups", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAdGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAdGroups_argsTupleSchemeFactory());
    }

    public List<Integer> adGroups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_GROUPS((short)1, "adGroups");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_GROUPS
            return AD_GROUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("adGroups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAdGroups_args.class, metaDataMap);
    }

    public delAdGroups_args() {
    }

    public delAdGroups_args(
      List<Integer> adGroups)
    {
      this();
      this.adGroups = adGroups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAdGroups_args(delAdGroups_args other) {
      if (other.isSetAdGroups()) {
        List<Integer> __this__adGroups = new ArrayList<Integer>();
        for (Integer other_element : other.adGroups) {
          __this__adGroups.add(other_element);
        }
        this.adGroups = __this__adGroups;
      }
    }

    public delAdGroups_args deepCopy() {
      return new delAdGroups_args(this);
    }

    @Override
    public void clear() {
      this.adGroups = null;
    }

    public int getAdGroupsSize() {
      return (this.adGroups == null) ? 0 : this.adGroups.size();
    }

    public java.util.Iterator<Integer> getAdGroupsIterator() {
      return (this.adGroups == null) ? null : this.adGroups.iterator();
    }

    public void addToAdGroups(int elem) {
      if (this.adGroups == null) {
        this.adGroups = new ArrayList<Integer>();
      }
      this.adGroups.add(elem);
    }

    public List<Integer> getAdGroups() {
      return this.adGroups;
    }

    public delAdGroups_args setAdGroups(List<Integer> adGroups) {
      this.adGroups = adGroups;
      return this;
    }

    public void unsetAdGroups() {
      this.adGroups = null;
    }

    /** Returns true if field adGroups is set (has been assigned a value) and false otherwise */
    public boolean isSetAdGroups() {
      return this.adGroups != null;
    }

    public void setAdGroupsIsSet(boolean value) {
      if (!value) {
        this.adGroups = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AD_GROUPS:
        if (value == null) {
          unsetAdGroups();
        } else {
          setAdGroups((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_GROUPS:
        return getAdGroups();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AD_GROUPS:
        return isSetAdGroups();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAdGroups_args)
        return this.equals((delAdGroups_args)that);
      return false;
    }

    public boolean equals(delAdGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_adGroups = true && this.isSetAdGroups();
      boolean that_present_adGroups = true && that.isSetAdGroups();
      if (this_present_adGroups || that_present_adGroups) {
        if (!(this_present_adGroups && that_present_adGroups))
          return false;
        if (!this.adGroups.equals(that.adGroups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delAdGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delAdGroups_args typedOther = (delAdGroups_args)other;

      lastComparison = Boolean.valueOf(isSetAdGroups()).compareTo(typedOther.isSetAdGroups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdGroups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adGroups, typedOther.adGroups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAdGroups_args(");
      boolean first = true;

      sb.append("adGroups:");
      if (this.adGroups == null) {
        sb.append("null");
      } else {
        sb.append(this.adGroups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAdGroups_argsStandardSchemeFactory implements SchemeFactory {
      public delAdGroups_argsStandardScheme getScheme() {
        return new delAdGroups_argsStandardScheme();
      }
    }

    private static class delAdGroups_argsStandardScheme extends StandardScheme<delAdGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAdGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_GROUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.adGroups = new ArrayList<Integer>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    int _elem42; // required
                    _elem42 = iprot.readI32();
                    struct.adGroups.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setAdGroupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAdGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adGroups != null) {
          oprot.writeFieldBegin(AD_GROUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.adGroups.size()));
            for (int _iter43 : struct.adGroups)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAdGroups_argsTupleSchemeFactory implements SchemeFactory {
      public delAdGroups_argsTupleScheme getScheme() {
        return new delAdGroups_argsTupleScheme();
      }
    }

    private static class delAdGroups_argsTupleScheme extends TupleScheme<delAdGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAdGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdGroups()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdGroups()) {
          {
            oprot.writeI32(struct.adGroups.size());
            for (int _iter44 : struct.adGroups)
            {
              oprot.writeI32(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAdGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.adGroups = new ArrayList<Integer>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              int _elem47; // required
              _elem47 = iprot.readI32();
              struct.adGroups.add(_elem47);
            }
          }
          struct.setAdGroupsIsSet(true);
        }
      }
    }

  }

  public static class delAdGroups_result implements org.apache.thrift.TBase<delAdGroups_result, delAdGroups_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAdGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAdGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAdGroups_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAdGroups_result.class, metaDataMap);
    }

    public delAdGroups_result() {
    }

    public delAdGroups_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAdGroups_result(delAdGroups_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delAdGroups_result deepCopy() {
      return new delAdGroups_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delAdGroups_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAdGroups_result)
        return this.equals((delAdGroups_result)that);
      return false;
    }

    public boolean equals(delAdGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delAdGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delAdGroups_result typedOther = (delAdGroups_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAdGroups_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAdGroups_resultStandardSchemeFactory implements SchemeFactory {
      public delAdGroups_resultStandardScheme getScheme() {
        return new delAdGroups_resultStandardScheme();
      }
    }

    private static class delAdGroups_resultStandardScheme extends StandardScheme<delAdGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAdGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAdGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAdGroups_resultTupleSchemeFactory implements SchemeFactory {
      public delAdGroups_resultTupleScheme getScheme() {
        return new delAdGroups_resultTupleScheme();
      }
    }

    private static class delAdGroups_resultTupleScheme extends TupleScheme<delAdGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAdGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAdGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAdGroupById_args implements org.apache.thrift.TBase<findAdGroupById_args, findAdGroupById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdGroupById_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdGroupById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdGroupById_argsTupleSchemeFactory());
    }

    public int group_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdGroupById_args.class, metaDataMap);
    }

    public findAdGroupById_args() {
    }

    public findAdGroupById_args(
      int group_id)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdGroupById_args(findAdGroupById_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.group_id = other.group_id;
    }

    public findAdGroupById_args deepCopy() {
      return new findAdGroupById_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public findAdGroupById_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bit_vector.clear(__GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return __isset_bit_vector.get(__GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bit_vector.set(__GROUP_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdGroupById_args)
        return this.equals((findAdGroupById_args)that);
      return false;
    }

    public boolean equals(findAdGroupById_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdGroupById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdGroupById_args typedOther = (findAdGroupById_args)other;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(typedOther.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, typedOther.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdGroupById_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdGroupById_argsStandardSchemeFactory implements SchemeFactory {
      public findAdGroupById_argsStandardScheme getScheme() {
        return new findAdGroupById_argsStandardScheme();
      }
    }

    private static class findAdGroupById_argsStandardScheme extends StandardScheme<findAdGroupById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdGroupById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdGroupById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdGroupById_argsTupleSchemeFactory implements SchemeFactory {
      public findAdGroupById_argsTupleScheme getScheme() {
        return new findAdGroupById_argsTupleScheme();
      }
    }

    private static class findAdGroupById_argsTupleScheme extends TupleScheme<findAdGroupById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdGroupById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdGroupById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
      }
    }

  }

  public static class findAdGroupById_result implements org.apache.thrift.TBase<findAdGroupById_result, findAdGroupById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdGroupById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdGroupById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdGroupById_resultTupleSchemeFactory());
    }

    public AdGroup success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdGroupById_result.class, metaDataMap);
    }

    public findAdGroupById_result() {
    }

    public findAdGroupById_result(
      AdGroup success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdGroupById_result(findAdGroupById_result other) {
      if (other.isSetSuccess()) {
        this.success = new AdGroup(other.success);
      }
    }

    public findAdGroupById_result deepCopy() {
      return new findAdGroupById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AdGroup getSuccess() {
      return this.success;
    }

    public findAdGroupById_result setSuccess(AdGroup success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AdGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdGroupById_result)
        return this.equals((findAdGroupById_result)that);
      return false;
    }

    public boolean equals(findAdGroupById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdGroupById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdGroupById_result typedOther = (findAdGroupById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdGroupById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdGroupById_resultStandardSchemeFactory implements SchemeFactory {
      public findAdGroupById_resultStandardScheme getScheme() {
        return new findAdGroupById_resultStandardScheme();
      }
    }

    private static class findAdGroupById_resultStandardScheme extends StandardScheme<findAdGroupById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdGroupById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AdGroup();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdGroupById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdGroupById_resultTupleSchemeFactory implements SchemeFactory {
      public findAdGroupById_resultTupleScheme getScheme() {
        return new findAdGroupById_resultTupleScheme();
      }
    }

    private static class findAdGroupById_resultTupleScheme extends TupleScheme<findAdGroupById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdGroupById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdGroupById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AdGroup();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchFindAdGroupById_args implements org.apache.thrift.TBase<batchFindAdGroupById_args, batchFindAdGroupById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchFindAdGroupById_args");

    private static final org.apache.thrift.protocol.TField GROUP_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("group_ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchFindAdGroupById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchFindAdGroupById_argsTupleSchemeFactory());
    }

    public List<Integer> group_ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_IDS((short)1, "group_ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_IDS
            return GROUP_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_IDS, new org.apache.thrift.meta_data.FieldMetaData("group_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchFindAdGroupById_args.class, metaDataMap);
    }

    public batchFindAdGroupById_args() {
    }

    public batchFindAdGroupById_args(
      List<Integer> group_ids)
    {
      this();
      this.group_ids = group_ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchFindAdGroupById_args(batchFindAdGroupById_args other) {
      if (other.isSetGroup_ids()) {
        List<Integer> __this__group_ids = new ArrayList<Integer>();
        for (Integer other_element : other.group_ids) {
          __this__group_ids.add(other_element);
        }
        this.group_ids = __this__group_ids;
      }
    }

    public batchFindAdGroupById_args deepCopy() {
      return new batchFindAdGroupById_args(this);
    }

    @Override
    public void clear() {
      this.group_ids = null;
    }

    public int getGroup_idsSize() {
      return (this.group_ids == null) ? 0 : this.group_ids.size();
    }

    public java.util.Iterator<Integer> getGroup_idsIterator() {
      return (this.group_ids == null) ? null : this.group_ids.iterator();
    }

    public void addToGroup_ids(int elem) {
      if (this.group_ids == null) {
        this.group_ids = new ArrayList<Integer>();
      }
      this.group_ids.add(elem);
    }

    public List<Integer> getGroup_ids() {
      return this.group_ids;
    }

    public batchFindAdGroupById_args setGroup_ids(List<Integer> group_ids) {
      this.group_ids = group_ids;
      return this;
    }

    public void unsetGroup_ids() {
      this.group_ids = null;
    }

    /** Returns true if field group_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_ids() {
      return this.group_ids != null;
    }

    public void setGroup_idsIsSet(boolean value) {
      if (!value) {
        this.group_ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_IDS:
        if (value == null) {
          unsetGroup_ids();
        } else {
          setGroup_ids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_IDS:
        return getGroup_ids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_IDS:
        return isSetGroup_ids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchFindAdGroupById_args)
        return this.equals((batchFindAdGroupById_args)that);
      return false;
    }

    public boolean equals(batchFindAdGroupById_args that) {
      if (that == null)
        return false;

      boolean this_present_group_ids = true && this.isSetGroup_ids();
      boolean that_present_group_ids = true && that.isSetGroup_ids();
      if (this_present_group_ids || that_present_group_ids) {
        if (!(this_present_group_ids && that_present_group_ids))
          return false;
        if (!this.group_ids.equals(that.group_ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batchFindAdGroupById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batchFindAdGroupById_args typedOther = (batchFindAdGroupById_args)other;

      lastComparison = Boolean.valueOf(isSetGroup_ids()).compareTo(typedOther.isSetGroup_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_ids, typedOther.group_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchFindAdGroupById_args(");
      boolean first = true;

      sb.append("group_ids:");
      if (this.group_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.group_ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchFindAdGroupById_argsStandardSchemeFactory implements SchemeFactory {
      public batchFindAdGroupById_argsStandardScheme getScheme() {
        return new batchFindAdGroupById_argsStandardScheme();
      }
    }

    private static class batchFindAdGroupById_argsStandardScheme extends StandardScheme<batchFindAdGroupById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchFindAdGroupById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.group_ids = new ArrayList<Integer>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    int _elem50; // required
                    _elem50 = iprot.readI32();
                    struct.group_ids.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setGroup_idsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchFindAdGroupById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.group_ids != null) {
          oprot.writeFieldBegin(GROUP_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.group_ids.size()));
            for (int _iter51 : struct.group_ids)
            {
              oprot.writeI32(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchFindAdGroupById_argsTupleSchemeFactory implements SchemeFactory {
      public batchFindAdGroupById_argsTupleScheme getScheme() {
        return new batchFindAdGroupById_argsTupleScheme();
      }
    }

    private static class batchFindAdGroupById_argsTupleScheme extends TupleScheme<batchFindAdGroupById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchFindAdGroupById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_ids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroup_ids()) {
          {
            oprot.writeI32(struct.group_ids.size());
            for (int _iter52 : struct.group_ids)
            {
              oprot.writeI32(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchFindAdGroupById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.group_ids = new ArrayList<Integer>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              int _elem55; // required
              _elem55 = iprot.readI32();
              struct.group_ids.add(_elem55);
            }
          }
          struct.setGroup_idsIsSet(true);
        }
      }
    }

  }

  public static class batchFindAdGroupById_result implements org.apache.thrift.TBase<batchFindAdGroupById_result, batchFindAdGroupById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchFindAdGroupById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchFindAdGroupById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchFindAdGroupById_resultTupleSchemeFactory());
    }

    public List<AdGroup> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchFindAdGroupById_result.class, metaDataMap);
    }

    public batchFindAdGroupById_result() {
    }

    public batchFindAdGroupById_result(
      List<AdGroup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchFindAdGroupById_result(batchFindAdGroupById_result other) {
      if (other.isSetSuccess()) {
        List<AdGroup> __this__success = new ArrayList<AdGroup>();
        for (AdGroup other_element : other.success) {
          __this__success.add(new AdGroup(other_element));
        }
        this.success = __this__success;
      }
    }

    public batchFindAdGroupById_result deepCopy() {
      return new batchFindAdGroupById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroup>();
      }
      this.success.add(elem);
    }

    public List<AdGroup> getSuccess() {
      return this.success;
    }

    public batchFindAdGroupById_result setSuccess(List<AdGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchFindAdGroupById_result)
        return this.equals((batchFindAdGroupById_result)that);
      return false;
    }

    public boolean equals(batchFindAdGroupById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batchFindAdGroupById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batchFindAdGroupById_result typedOther = (batchFindAdGroupById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchFindAdGroupById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchFindAdGroupById_resultStandardSchemeFactory implements SchemeFactory {
      public batchFindAdGroupById_resultStandardScheme getScheme() {
        return new batchFindAdGroupById_resultStandardScheme();
      }
    }

    private static class batchFindAdGroupById_resultStandardScheme extends StandardScheme<batchFindAdGroupById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchFindAdGroupById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroup>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    AdGroup _elem58; // required
                    _elem58 = new AdGroup();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchFindAdGroupById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroup _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchFindAdGroupById_resultTupleSchemeFactory implements SchemeFactory {
      public batchFindAdGroupById_resultTupleScheme getScheme() {
        return new batchFindAdGroupById_resultTupleScheme();
      }
    }

    private static class batchFindAdGroupById_resultTupleScheme extends TupleScheme<batchFindAdGroupById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchFindAdGroupById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroup _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchFindAdGroupById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroup>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              AdGroup _elem63; // required
              _elem63 = new AdGroup();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAdGroupByInt_args implements org.apache.thrift.TBase<findAdGroupByInt_args, findAdGroupByInt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdGroupByInt_args");

    private static final org.apache.thrift.protocol.TField INT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("int_params", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdGroupByInt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdGroupByInt_argsTupleSchemeFactory());
    }

    public Map<String,Integer> int_params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INT_PARAMS((short)1, "int_params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INT_PARAMS
            return INT_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("int_params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdGroupByInt_args.class, metaDataMap);
    }

    public findAdGroupByInt_args() {
    }

    public findAdGroupByInt_args(
      Map<String,Integer> int_params)
    {
      this();
      this.int_params = int_params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdGroupByInt_args(findAdGroupByInt_args other) {
      if (other.isSetInt_params()) {
        Map<String,Integer> __this__int_params = new HashMap<String,Integer>();
        for (Map.Entry<String, Integer> other_element : other.int_params.entrySet()) {

          String other_element_key = other_element.getKey();
          Integer other_element_value = other_element.getValue();

          String __this__int_params_copy_key = other_element_key;

          Integer __this__int_params_copy_value = other_element_value;

          __this__int_params.put(__this__int_params_copy_key, __this__int_params_copy_value);
        }
        this.int_params = __this__int_params;
      }
    }

    public findAdGroupByInt_args deepCopy() {
      return new findAdGroupByInt_args(this);
    }

    @Override
    public void clear() {
      this.int_params = null;
    }

    public int getInt_paramsSize() {
      return (this.int_params == null) ? 0 : this.int_params.size();
    }

    public void putToInt_params(String key, int val) {
      if (this.int_params == null) {
        this.int_params = new HashMap<String,Integer>();
      }
      this.int_params.put(key, val);
    }

    public Map<String,Integer> getInt_params() {
      return this.int_params;
    }

    public findAdGroupByInt_args setInt_params(Map<String,Integer> int_params) {
      this.int_params = int_params;
      return this;
    }

    public void unsetInt_params() {
      this.int_params = null;
    }

    /** Returns true if field int_params is set (has been assigned a value) and false otherwise */
    public boolean isSetInt_params() {
      return this.int_params != null;
    }

    public void setInt_paramsIsSet(boolean value) {
      if (!value) {
        this.int_params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INT_PARAMS:
        if (value == null) {
          unsetInt_params();
        } else {
          setInt_params((Map<String,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INT_PARAMS:
        return getInt_params();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INT_PARAMS:
        return isSetInt_params();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdGroupByInt_args)
        return this.equals((findAdGroupByInt_args)that);
      return false;
    }

    public boolean equals(findAdGroupByInt_args that) {
      if (that == null)
        return false;

      boolean this_present_int_params = true && this.isSetInt_params();
      boolean that_present_int_params = true && that.isSetInt_params();
      if (this_present_int_params || that_present_int_params) {
        if (!(this_present_int_params && that_present_int_params))
          return false;
        if (!this.int_params.equals(that.int_params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdGroupByInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdGroupByInt_args typedOther = (findAdGroupByInt_args)other;

      lastComparison = Boolean.valueOf(isSetInt_params()).compareTo(typedOther.isSetInt_params());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInt_params()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_params, typedOther.int_params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdGroupByInt_args(");
      boolean first = true;

      sb.append("int_params:");
      if (this.int_params == null) {
        sb.append("null");
      } else {
        sb.append(this.int_params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdGroupByInt_argsStandardSchemeFactory implements SchemeFactory {
      public findAdGroupByInt_argsStandardScheme getScheme() {
        return new findAdGroupByInt_argsStandardScheme();
      }
    }

    private static class findAdGroupByInt_argsStandardScheme extends StandardScheme<findAdGroupByInt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdGroupByInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INT_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                  struct.int_params = new HashMap<String,Integer>(2*_map64.size);
                  for (int _i65 = 0; _i65 < _map64.size; ++_i65)
                  {
                    String _key66; // required
                    int _val67; // required
                    _key66 = iprot.readString();
                    _val67 = iprot.readI32();
                    struct.int_params.put(_key66, _val67);
                  }
                  iprot.readMapEnd();
                }
                struct.setInt_paramsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdGroupByInt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.int_params != null) {
          oprot.writeFieldBegin(INT_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.int_params.size()));
            for (Map.Entry<String, Integer> _iter68 : struct.int_params.entrySet())
            {
              oprot.writeString(_iter68.getKey());
              oprot.writeI32(_iter68.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdGroupByInt_argsTupleSchemeFactory implements SchemeFactory {
      public findAdGroupByInt_argsTupleScheme getScheme() {
        return new findAdGroupByInt_argsTupleScheme();
      }
    }

    private static class findAdGroupByInt_argsTupleScheme extends TupleScheme<findAdGroupByInt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdGroupByInt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInt_params()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInt_params()) {
          {
            oprot.writeI32(struct.int_params.size());
            for (Map.Entry<String, Integer> _iter69 : struct.int_params.entrySet())
            {
              oprot.writeString(_iter69.getKey());
              oprot.writeI32(_iter69.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdGroupByInt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.int_params = new HashMap<String,Integer>(2*_map70.size);
            for (int _i71 = 0; _i71 < _map70.size; ++_i71)
            {
              String _key72; // required
              int _val73; // required
              _key72 = iprot.readString();
              _val73 = iprot.readI32();
              struct.int_params.put(_key72, _val73);
            }
          }
          struct.setInt_paramsIsSet(true);
        }
      }
    }

  }

  public static class findAdGroupByInt_result implements org.apache.thrift.TBase<findAdGroupByInt_result, findAdGroupByInt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAdGroupByInt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAdGroupByInt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAdGroupByInt_resultTupleSchemeFactory());
    }

    public List<AdGroup> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAdGroupByInt_result.class, metaDataMap);
    }

    public findAdGroupByInt_result() {
    }

    public findAdGroupByInt_result(
      List<AdGroup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAdGroupByInt_result(findAdGroupByInt_result other) {
      if (other.isSetSuccess()) {
        List<AdGroup> __this__success = new ArrayList<AdGroup>();
        for (AdGroup other_element : other.success) {
          __this__success.add(new AdGroup(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAdGroupByInt_result deepCopy() {
      return new findAdGroupByInt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroup>();
      }
      this.success.add(elem);
    }

    public List<AdGroup> getSuccess() {
      return this.success;
    }

    public findAdGroupByInt_result setSuccess(List<AdGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAdGroupByInt_result)
        return this.equals((findAdGroupByInt_result)that);
      return false;
    }

    public boolean equals(findAdGroupByInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAdGroupByInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAdGroupByInt_result typedOther = (findAdGroupByInt_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAdGroupByInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAdGroupByInt_resultStandardSchemeFactory implements SchemeFactory {
      public findAdGroupByInt_resultStandardScheme getScheme() {
        return new findAdGroupByInt_resultStandardScheme();
      }
    }

    private static class findAdGroupByInt_resultStandardScheme extends StandardScheme<findAdGroupByInt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAdGroupByInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroup>(_list74.size);
                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                  {
                    AdGroup _elem76; // required
                    _elem76 = new AdGroup();
                    _elem76.read(iprot);
                    struct.success.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAdGroupByInt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroup _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAdGroupByInt_resultTupleSchemeFactory implements SchemeFactory {
      public findAdGroupByInt_resultTupleScheme getScheme() {
        return new findAdGroupByInt_resultTupleScheme();
      }
    }

    private static class findAdGroupByInt_resultTupleScheme extends TupleScheme<findAdGroupByInt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAdGroupByInt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroup _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAdGroupByInt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroup>(_list79.size);
            for (int _i80 = 0; _i80 < _list79.size; ++_i80)
            {
              AdGroup _elem81; // required
              _elem81 = new AdGroup();
              _elem81.read(iprot);
              struct.success.add(_elem81);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStatusByGid_args implements org.apache.thrift.TBase<updateStatusByGid_args, updateStatusByGid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusByGid_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusByGid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusByGid_argsTupleSchemeFactory());
    }

    public int group_id; // required
    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public com.adp.java.PlanStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id"),
      /**
       * 
       * @see com.adp.java.PlanStatus
       */
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.PlanStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusByGid_args.class, metaDataMap);
    }

    public updateStatusByGid_args() {
    }

    public updateStatusByGid_args(
      int group_id,
      com.adp.java.PlanStatus status)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusByGid_args(updateStatusByGid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.group_id = other.group_id;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updateStatusByGid_args deepCopy() {
      return new updateStatusByGid_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
      this.status = null;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public updateStatusByGid_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bit_vector.clear(__GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return __isset_bit_vector.get(__GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bit_vector.set(__GROUP_ID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public com.adp.java.PlanStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public updateStatusByGid_args setStatus(com.adp.java.PlanStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((com.adp.java.PlanStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusByGid_args)
        return this.equals((updateStatusByGid_args)that);
      return false;
    }

    public boolean equals(updateStatusByGid_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStatusByGid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStatusByGid_args typedOther = (updateStatusByGid_args)other;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(typedOther.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, typedOther.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusByGid_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusByGid_argsStandardSchemeFactory implements SchemeFactory {
      public updateStatusByGid_argsStandardScheme getScheme() {
        return new updateStatusByGid_argsStandardScheme();
      }
    }

    private static class updateStatusByGid_argsStandardScheme extends StandardScheme<updateStatusByGid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusByGid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.adp.java.PlanStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusByGid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusByGid_argsTupleSchemeFactory implements SchemeFactory {
      public updateStatusByGid_argsTupleScheme getScheme() {
        return new updateStatusByGid_argsTupleScheme();
      }
    }

    private static class updateStatusByGid_argsTupleScheme extends TupleScheme<updateStatusByGid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = com.adp.java.PlanStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateStatusByGid_result implements org.apache.thrift.TBase<updateStatusByGid_result, updateStatusByGid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusByGid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusByGid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusByGid_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusByGid_result.class, metaDataMap);
    }

    public updateStatusByGid_result() {
    }

    public updateStatusByGid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusByGid_result(updateStatusByGid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateStatusByGid_result deepCopy() {
      return new updateStatusByGid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStatusByGid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusByGid_result)
        return this.equals((updateStatusByGid_result)that);
      return false;
    }

    public boolean equals(updateStatusByGid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStatusByGid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStatusByGid_result typedOther = (updateStatusByGid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusByGid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusByGid_resultStandardSchemeFactory implements SchemeFactory {
      public updateStatusByGid_resultStandardScheme getScheme() {
        return new updateStatusByGid_resultStandardScheme();
      }
    }

    private static class updateStatusByGid_resultStandardScheme extends StandardScheme<updateStatusByGid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusByGid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusByGid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusByGid_resultTupleSchemeFactory implements SchemeFactory {
      public updateStatusByGid_resultTupleScheme getScheme() {
        return new updateStatusByGid_resultTupleScheme();
      }
    }

    private static class updateStatusByGid_resultTupleScheme extends TupleScheme<updateStatusByGid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStatusByPid_args implements org.apache.thrift.TBase<updateStatusByPid_args, updateStatusByPid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusByPid_args");

    private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusByPid_argsTupleSchemeFactory());
    }

    public int plan_id; // required
    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public com.adp.java.PlanStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAN_ID((short)1, "plan_id"),
      /**
       * 
       * @see com.adp.java.PlanStatus
       */
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAN_ID
            return PLAN_ID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PLAN_ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("plan_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.PlanStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusByPid_args.class, metaDataMap);
    }

    public updateStatusByPid_args() {
    }

    public updateStatusByPid_args(
      int plan_id,
      com.adp.java.PlanStatus status)
    {
      this();
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusByPid_args(updateStatusByPid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.plan_id = other.plan_id;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updateStatusByPid_args deepCopy() {
      return new updateStatusByPid_args(this);
    }

    @Override
    public void clear() {
      setPlan_idIsSet(false);
      this.plan_id = 0;
      this.status = null;
    }

    public int getPlan_id() {
      return this.plan_id;
    }

    public updateStatusByPid_args setPlan_id(int plan_id) {
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
      return this;
    }

    public void unsetPlan_id() {
      __isset_bit_vector.clear(__PLAN_ID_ISSET_ID);
    }

    /** Returns true if field plan_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPlan_id() {
      return __isset_bit_vector.get(__PLAN_ID_ISSET_ID);
    }

    public void setPlan_idIsSet(boolean value) {
      __isset_bit_vector.set(__PLAN_ID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public com.adp.java.PlanStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public updateStatusByPid_args setStatus(com.adp.java.PlanStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLAN_ID:
        if (value == null) {
          unsetPlan_id();
        } else {
          setPlan_id((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((com.adp.java.PlanStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAN_ID:
        return Integer.valueOf(getPlan_id());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLAN_ID:
        return isSetPlan_id();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusByPid_args)
        return this.equals((updateStatusByPid_args)that);
      return false;
    }

    public boolean equals(updateStatusByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_plan_id = true;
      boolean that_present_plan_id = true;
      if (this_present_plan_id || that_present_plan_id) {
        if (!(this_present_plan_id && that_present_plan_id))
          return false;
        if (this.plan_id != that.plan_id)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStatusByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStatusByPid_args typedOther = (updateStatusByPid_args)other;

      lastComparison = Boolean.valueOf(isSetPlan_id()).compareTo(typedOther.isSetPlan_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlan_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_id, typedOther.plan_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusByPid_args(");
      boolean first = true;

      sb.append("plan_id:");
      sb.append(this.plan_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusByPid_argsStandardSchemeFactory implements SchemeFactory {
      public updateStatusByPid_argsStandardScheme getScheme() {
        return new updateStatusByPid_argsStandardScheme();
      }
    }

    private static class updateStatusByPid_argsStandardScheme extends StandardScheme<updateStatusByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.plan_id = iprot.readI32();
                struct.setPlan_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.adp.java.PlanStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
        oprot.writeI32(struct.plan_id);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusByPid_argsTupleSchemeFactory implements SchemeFactory {
      public updateStatusByPid_argsTupleScheme getScheme() {
        return new updateStatusByPid_argsTupleScheme();
      }
    }

    private static class updateStatusByPid_argsTupleScheme extends TupleScheme<updateStatusByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlan_id()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlan_id()) {
          oprot.writeI32(struct.plan_id);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.plan_id = iprot.readI32();
          struct.setPlan_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = com.adp.java.PlanStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateStatusByPid_result implements org.apache.thrift.TBase<updateStatusByPid_result, updateStatusByPid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusByPid_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusByPid_result.class, metaDataMap);
    }

    public updateStatusByPid_result() {
    }

    public updateStatusByPid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusByPid_result(updateStatusByPid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateStatusByPid_result deepCopy() {
      return new updateStatusByPid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStatusByPid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusByPid_result)
        return this.equals((updateStatusByPid_result)that);
      return false;
    }

    public boolean equals(updateStatusByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStatusByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStatusByPid_result typedOther = (updateStatusByPid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusByPid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusByPid_resultStandardSchemeFactory implements SchemeFactory {
      public updateStatusByPid_resultStandardScheme getScheme() {
        return new updateStatusByPid_resultStandardScheme();
      }
    }

    private static class updateStatusByPid_resultStandardScheme extends StandardScheme<updateStatusByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusByPid_resultTupleSchemeFactory implements SchemeFactory {
      public updateStatusByPid_resultTupleScheme getScheme() {
        return new updateStatusByPid_resultTupleScheme();
      }
    }

    private static class updateStatusByPid_resultTupleScheme extends TupleScheme<updateStatusByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStatusByUid_args implements org.apache.thrift.TBase<updateStatusByUid_args, updateStatusByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusByUid_argsTupleSchemeFactory());
    }

    public int uid; // required
    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public com.adp.java.PlanStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      /**
       * 
       * @see com.adp.java.PlanStatus
       */
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.PlanStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusByUid_args.class, metaDataMap);
    }

    public updateStatusByUid_args() {
    }

    public updateStatusByUid_args(
      int uid,
      com.adp.java.PlanStatus status)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusByUid_args(updateStatusByUid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.uid = other.uid;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updateStatusByUid_args deepCopy() {
      return new updateStatusByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.status = null;
    }

    public int getUid() {
      return this.uid;
    }

    public updateStatusByUid_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bit_vector.clear(__UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return __isset_bit_vector.get(__UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bit_vector.set(__UID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public com.adp.java.PlanStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see com.adp.java.PlanStatus
     */
    public updateStatusByUid_args setStatus(com.adp.java.PlanStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((com.adp.java.PlanStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusByUid_args)
        return this.equals((updateStatusByUid_args)that);
      return false;
    }

    public boolean equals(updateStatusByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStatusByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStatusByUid_args typedOther = (updateStatusByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusByUid_argsStandardSchemeFactory implements SchemeFactory {
      public updateStatusByUid_argsStandardScheme getScheme() {
        return new updateStatusByUid_argsStandardScheme();
      }
    }

    private static class updateStatusByUid_argsStandardScheme extends StandardScheme<updateStatusByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.adp.java.PlanStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusByUid_argsTupleSchemeFactory implements SchemeFactory {
      public updateStatusByUid_argsTupleScheme getScheme() {
        return new updateStatusByUid_argsTupleScheme();
      }
    }

    private static class updateStatusByUid_argsTupleScheme extends TupleScheme<updateStatusByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = com.adp.java.PlanStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateStatusByUid_result implements org.apache.thrift.TBase<updateStatusByUid_result, updateStatusByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusByUid_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusByUid_result.class, metaDataMap);
    }

    public updateStatusByUid_result() {
    }

    public updateStatusByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusByUid_result(updateStatusByUid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateStatusByUid_result deepCopy() {
      return new updateStatusByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStatusByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusByUid_result)
        return this.equals((updateStatusByUid_result)that);
      return false;
    }

    public boolean equals(updateStatusByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStatusByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStatusByUid_result typedOther = (updateStatusByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusByUid_resultStandardSchemeFactory implements SchemeFactory {
      public updateStatusByUid_resultStandardScheme getScheme() {
        return new updateStatusByUid_resultStandardScheme();
      }
    }

    private static class updateStatusByUid_resultStandardScheme extends StandardScheme<updateStatusByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusByUid_resultTupleSchemeFactory implements SchemeFactory {
      public updateStatusByUid_resultTupleScheme getScheme() {
        return new updateStatusByUid_resultTupleScheme();
      }
    }

    private static class updateStatusByUid_resultTupleScheme extends TupleScheme<updateStatusByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delAdGroupByUid_args implements org.apache.thrift.TBase<delAdGroupByUid_args, delAdGroupByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAdGroupByUid_args");

    private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAdGroupByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAdGroupByUid_argsTupleSchemeFactory());
    }

    public int plan_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAN_ID((short)1, "plan_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAN_ID
            return PLAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PLAN_ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("plan_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAdGroupByUid_args.class, metaDataMap);
    }

    public delAdGroupByUid_args() {
    }

    public delAdGroupByUid_args(
      int plan_id)
    {
      this();
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAdGroupByUid_args(delAdGroupByUid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.plan_id = other.plan_id;
    }

    public delAdGroupByUid_args deepCopy() {
      return new delAdGroupByUid_args(this);
    }

    @Override
    public void clear() {
      setPlan_idIsSet(false);
      this.plan_id = 0;
    }

    public int getPlan_id() {
      return this.plan_id;
    }

    public delAdGroupByUid_args setPlan_id(int plan_id) {
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
      return this;
    }

    public void unsetPlan_id() {
      __isset_bit_vector.clear(__PLAN_ID_ISSET_ID);
    }

    /** Returns true if field plan_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPlan_id() {
      return __isset_bit_vector.get(__PLAN_ID_ISSET_ID);
    }

    public void setPlan_idIsSet(boolean value) {
      __isset_bit_vector.set(__PLAN_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLAN_ID:
        if (value == null) {
          unsetPlan_id();
        } else {
          setPlan_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAN_ID:
        return Integer.valueOf(getPlan_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLAN_ID:
        return isSetPlan_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAdGroupByUid_args)
        return this.equals((delAdGroupByUid_args)that);
      return false;
    }

    public boolean equals(delAdGroupByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_plan_id = true;
      boolean that_present_plan_id = true;
      if (this_present_plan_id || that_present_plan_id) {
        if (!(this_present_plan_id && that_present_plan_id))
          return false;
        if (this.plan_id != that.plan_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delAdGroupByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delAdGroupByUid_args typedOther = (delAdGroupByUid_args)other;

      lastComparison = Boolean.valueOf(isSetPlan_id()).compareTo(typedOther.isSetPlan_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlan_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_id, typedOther.plan_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAdGroupByUid_args(");
      boolean first = true;

      sb.append("plan_id:");
      sb.append(this.plan_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAdGroupByUid_argsStandardSchemeFactory implements SchemeFactory {
      public delAdGroupByUid_argsStandardScheme getScheme() {
        return new delAdGroupByUid_argsStandardScheme();
      }
    }

    private static class delAdGroupByUid_argsStandardScheme extends StandardScheme<delAdGroupByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAdGroupByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.plan_id = iprot.readI32();
                struct.setPlan_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAdGroupByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
        oprot.writeI32(struct.plan_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAdGroupByUid_argsTupleSchemeFactory implements SchemeFactory {
      public delAdGroupByUid_argsTupleScheme getScheme() {
        return new delAdGroupByUid_argsTupleScheme();
      }
    }

    private static class delAdGroupByUid_argsTupleScheme extends TupleScheme<delAdGroupByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAdGroupByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlan_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlan_id()) {
          oprot.writeI32(struct.plan_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAdGroupByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.plan_id = iprot.readI32();
          struct.setPlan_idIsSet(true);
        }
      }
    }

  }

  public static class delAdGroupByUid_result implements org.apache.thrift.TBase<delAdGroupByUid_result, delAdGroupByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delAdGroupByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delAdGroupByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delAdGroupByUid_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delAdGroupByUid_result.class, metaDataMap);
    }

    public delAdGroupByUid_result() {
    }

    public delAdGroupByUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delAdGroupByUid_result(delAdGroupByUid_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delAdGroupByUid_result deepCopy() {
      return new delAdGroupByUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delAdGroupByUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delAdGroupByUid_result)
        return this.equals((delAdGroupByUid_result)that);
      return false;
    }

    public boolean equals(delAdGroupByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delAdGroupByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delAdGroupByUid_result typedOther = (delAdGroupByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delAdGroupByUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delAdGroupByUid_resultStandardSchemeFactory implements SchemeFactory {
      public delAdGroupByUid_resultStandardScheme getScheme() {
        return new delAdGroupByUid_resultStandardScheme();
      }
    }

    private static class delAdGroupByUid_resultStandardScheme extends StandardScheme<delAdGroupByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delAdGroupByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delAdGroupByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delAdGroupByUid_resultTupleSchemeFactory implements SchemeFactory {
      public delAdGroupByUid_resultTupleScheme getScheme() {
        return new delAdGroupByUid_resultTupleScheme();
      }
    }

    private static class delAdGroupByUid_resultTupleScheme extends TupleScheme<delAdGroupByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delAdGroupByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delAdGroupByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupsByUid_args implements org.apache.thrift.TBase<getAdGroupsByUid_args, getAdGroupsByUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupsByUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupsByUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupsByUid_argsTupleSchemeFactory());
    }

    public int uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupsByUid_args.class, metaDataMap);
    }

    public getAdGroupsByUid_args() {
    }

    public getAdGroupsByUid_args(
      int uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupsByUid_args(getAdGroupsByUid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.uid = other.uid;
    }

    public getAdGroupsByUid_args deepCopy() {
      return new getAdGroupsByUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public int getUid() {
      return this.uid;
    }

    public getAdGroupsByUid_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bit_vector.clear(__UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return __isset_bit_vector.get(__UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bit_vector.set(__UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupsByUid_args)
        return this.equals((getAdGroupsByUid_args)that);
      return false;
    }

    public boolean equals(getAdGroupsByUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupsByUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupsByUid_args typedOther = (getAdGroupsByUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupsByUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupsByUid_argsStandardSchemeFactory implements SchemeFactory {
      public getAdGroupsByUid_argsStandardScheme getScheme() {
        return new getAdGroupsByUid_argsStandardScheme();
      }
    }

    private static class getAdGroupsByUid_argsStandardScheme extends StandardScheme<getAdGroupsByUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupsByUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupsByUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupsByUid_argsTupleSchemeFactory implements SchemeFactory {
      public getAdGroupsByUid_argsTupleScheme getScheme() {
        return new getAdGroupsByUid_argsTupleScheme();
      }
    }

    private static class getAdGroupsByUid_argsTupleScheme extends TupleScheme<getAdGroupsByUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupsByUid_result implements org.apache.thrift.TBase<getAdGroupsByUid_result, getAdGroupsByUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupsByUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupsByUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupsByUid_resultTupleSchemeFactory());
    }

    public List<AdGroup> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupsByUid_result.class, metaDataMap);
    }

    public getAdGroupsByUid_result() {
    }

    public getAdGroupsByUid_result(
      List<AdGroup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupsByUid_result(getAdGroupsByUid_result other) {
      if (other.isSetSuccess()) {
        List<AdGroup> __this__success = new ArrayList<AdGroup>();
        for (AdGroup other_element : other.success) {
          __this__success.add(new AdGroup(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAdGroupsByUid_result deepCopy() {
      return new getAdGroupsByUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroup>();
      }
      this.success.add(elem);
    }

    public List<AdGroup> getSuccess() {
      return this.success;
    }

    public getAdGroupsByUid_result setSuccess(List<AdGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupsByUid_result)
        return this.equals((getAdGroupsByUid_result)that);
      return false;
    }

    public boolean equals(getAdGroupsByUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupsByUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupsByUid_result typedOther = (getAdGroupsByUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupsByUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupsByUid_resultStandardSchemeFactory implements SchemeFactory {
      public getAdGroupsByUid_resultStandardScheme getScheme() {
        return new getAdGroupsByUid_resultStandardScheme();
      }
    }

    private static class getAdGroupsByUid_resultStandardScheme extends StandardScheme<getAdGroupsByUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupsByUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroup>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    AdGroup _elem84; // required
                    _elem84 = new AdGroup();
                    _elem84.read(iprot);
                    struct.success.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupsByUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroup _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupsByUid_resultTupleSchemeFactory implements SchemeFactory {
      public getAdGroupsByUid_resultTupleScheme getScheme() {
        return new getAdGroupsByUid_resultTupleScheme();
      }
    }

    private static class getAdGroupsByUid_resultTupleScheme extends TupleScheme<getAdGroupsByUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroup _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroup>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              AdGroup _elem89; // required
              _elem89 = new AdGroup();
              _elem89.read(iprot);
              struct.success.add(_elem89);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupByPid_args implements org.apache.thrift.TBase<getAdGroupByPid_args, getAdGroupByPid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupByPid_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupByPid_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupByPid_args.class, metaDataMap);
    }

    public getAdGroupByPid_args() {
    }

    public getAdGroupByPid_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupByPid_args(getAdGroupByPid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.pid = other.pid;
    }

    public getAdGroupByPid_args deepCopy() {
      return new getAdGroupByPid_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getAdGroupByPid_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bit_vector.clear(__PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return __isset_bit_vector.get(__PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bit_vector.set(__PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupByPid_args)
        return this.equals((getAdGroupByPid_args)that);
      return false;
    }

    public boolean equals(getAdGroupByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupByPid_args typedOther = (getAdGroupByPid_args)other;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, typedOther.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupByPid_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupByPid_argsStandardSchemeFactory implements SchemeFactory {
      public getAdGroupByPid_argsStandardScheme getScheme() {
        return new getAdGroupByPid_argsStandardScheme();
      }
    }

    private static class getAdGroupByPid_argsStandardScheme extends StandardScheme<getAdGroupByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupByPid_argsTupleSchemeFactory implements SchemeFactory {
      public getAdGroupByPid_argsTupleScheme getScheme() {
        return new getAdGroupByPid_argsTupleScheme();
      }
    }

    private static class getAdGroupByPid_argsTupleScheme extends TupleScheme<getAdGroupByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupByPid_result implements org.apache.thrift.TBase<getAdGroupByPid_result, getAdGroupByPid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupByPid_resultTupleSchemeFactory());
    }

    public List<AdGroup> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupByPid_result.class, metaDataMap);
    }

    public getAdGroupByPid_result() {
    }

    public getAdGroupByPid_result(
      List<AdGroup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupByPid_result(getAdGroupByPid_result other) {
      if (other.isSetSuccess()) {
        List<AdGroup> __this__success = new ArrayList<AdGroup>();
        for (AdGroup other_element : other.success) {
          __this__success.add(new AdGroup(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAdGroupByPid_result deepCopy() {
      return new getAdGroupByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroup>();
      }
      this.success.add(elem);
    }

    public List<AdGroup> getSuccess() {
      return this.success;
    }

    public getAdGroupByPid_result setSuccess(List<AdGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupByPid_result)
        return this.equals((getAdGroupByPid_result)that);
      return false;
    }

    public boolean equals(getAdGroupByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupByPid_result typedOther = (getAdGroupByPid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupByPid_resultStandardSchemeFactory implements SchemeFactory {
      public getAdGroupByPid_resultStandardScheme getScheme() {
        return new getAdGroupByPid_resultStandardScheme();
      }
    }

    private static class getAdGroupByPid_resultStandardScheme extends StandardScheme<getAdGroupByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroup>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    AdGroup _elem92; // required
                    _elem92 = new AdGroup();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroup _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupByPid_resultTupleSchemeFactory implements SchemeFactory {
      public getAdGroupByPid_resultTupleScheme getScheme() {
        return new getAdGroupByPid_resultTupleScheme();
      }
    }

    private static class getAdGroupByPid_resultTupleScheme extends TupleScheme<getAdGroupByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroup _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroup>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              AdGroup _elem97; // required
              _elem97 = new AdGroup();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupsByPidUid_args implements org.apache.thrift.TBase<getAdGroupsByPidUid_args, getAdGroupsByPidUid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupsByPidUid_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupsByPidUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupsByPidUid_argsTupleSchemeFactory());
    }

    public int uid; // required
    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PID((short)2, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __PID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupsByPidUid_args.class, metaDataMap);
    }

    public getAdGroupsByPidUid_args() {
    }

    public getAdGroupsByPidUid_args(
      int uid,
      int pid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupsByPidUid_args(getAdGroupsByPidUid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.uid = other.uid;
      this.pid = other.pid;
    }

    public getAdGroupsByPidUid_args deepCopy() {
      return new getAdGroupsByPidUid_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getUid() {
      return this.uid;
    }

    public getAdGroupsByPidUid_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bit_vector.clear(__UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return __isset_bit_vector.get(__UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bit_vector.set(__UID_ISSET_ID, value);
    }

    public int getPid() {
      return this.pid;
    }

    public getAdGroupsByPidUid_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bit_vector.clear(__PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return __isset_bit_vector.get(__PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bit_vector.set(__PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupsByPidUid_args)
        return this.equals((getAdGroupsByPidUid_args)that);
      return false;
    }

    public boolean equals(getAdGroupsByPidUid_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupsByPidUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupsByPidUid_args typedOther = (getAdGroupsByPidUid_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, typedOther.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupsByPidUid_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupsByPidUid_argsStandardSchemeFactory implements SchemeFactory {
      public getAdGroupsByPidUid_argsStandardScheme getScheme() {
        return new getAdGroupsByPidUid_argsStandardScheme();
      }
    }

    private static class getAdGroupsByPidUid_argsStandardScheme extends StandardScheme<getAdGroupsByPidUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupsByPidUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupsByPidUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupsByPidUid_argsTupleSchemeFactory implements SchemeFactory {
      public getAdGroupsByPidUid_argsTupleScheme getScheme() {
        return new getAdGroupsByPidUid_argsTupleScheme();
      }
    }

    private static class getAdGroupsByPidUid_argsTupleScheme extends TupleScheme<getAdGroupsByPidUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPidUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetPid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPidUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupsByPidUid_result implements org.apache.thrift.TBase<getAdGroupsByPidUid_result, getAdGroupsByPidUid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupsByPidUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupsByPidUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupsByPidUid_resultTupleSchemeFactory());
    }

    public List<AdGroup> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupsByPidUid_result.class, metaDataMap);
    }

    public getAdGroupsByPidUid_result() {
    }

    public getAdGroupsByPidUid_result(
      List<AdGroup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupsByPidUid_result(getAdGroupsByPidUid_result other) {
      if (other.isSetSuccess()) {
        List<AdGroup> __this__success = new ArrayList<AdGroup>();
        for (AdGroup other_element : other.success) {
          __this__success.add(new AdGroup(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAdGroupsByPidUid_result deepCopy() {
      return new getAdGroupsByPidUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroup>();
      }
      this.success.add(elem);
    }

    public List<AdGroup> getSuccess() {
      return this.success;
    }

    public getAdGroupsByPidUid_result setSuccess(List<AdGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupsByPidUid_result)
        return this.equals((getAdGroupsByPidUid_result)that);
      return false;
    }

    public boolean equals(getAdGroupsByPidUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupsByPidUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupsByPidUid_result typedOther = (getAdGroupsByPidUid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupsByPidUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupsByPidUid_resultStandardSchemeFactory implements SchemeFactory {
      public getAdGroupsByPidUid_resultStandardScheme getScheme() {
        return new getAdGroupsByPidUid_resultStandardScheme();
      }
    }

    private static class getAdGroupsByPidUid_resultStandardScheme extends StandardScheme<getAdGroupsByPidUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupsByPidUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroup>(_list98.size);
                  for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                  {
                    AdGroup _elem100; // required
                    _elem100 = new AdGroup();
                    _elem100.read(iprot);
                    struct.success.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupsByPidUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroup _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupsByPidUid_resultTupleSchemeFactory implements SchemeFactory {
      public getAdGroupsByPidUid_resultTupleScheme getScheme() {
        return new getAdGroupsByPidUid_resultTupleScheme();
      }
    }

    private static class getAdGroupsByPidUid_resultTupleScheme extends TupleScheme<getAdGroupsByPidUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPidUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroup _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPidUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroup>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              AdGroup _elem105; // required
              _elem105 = new AdGroup();
              _elem105.read(iprot);
              struct.success.add(_elem105);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertPolicy_args implements org.apache.thrift.TBase<insertPolicy_args, insertPolicy_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertPolicy_args");

    private static final org.apache.thrift.protocol.TField POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("policy", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertPolicy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertPolicy_argsTupleSchemeFactory());
    }

    public AdGroupPolicy policy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POLICY((short)1, "policy");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POLICY
            return POLICY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POLICY, new org.apache.thrift.meta_data.FieldMetaData("policy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroupPolicy.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertPolicy_args.class, metaDataMap);
    }

    public insertPolicy_args() {
    }

    public insertPolicy_args(
      AdGroupPolicy policy)
    {
      this();
      this.policy = policy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertPolicy_args(insertPolicy_args other) {
      if (other.isSetPolicy()) {
        this.policy = new AdGroupPolicy(other.policy);
      }
    }

    public insertPolicy_args deepCopy() {
      return new insertPolicy_args(this);
    }

    @Override
    public void clear() {
      this.policy = null;
    }

    public AdGroupPolicy getPolicy() {
      return this.policy;
    }

    public insertPolicy_args setPolicy(AdGroupPolicy policy) {
      this.policy = policy;
      return this;
    }

    public void unsetPolicy() {
      this.policy = null;
    }

    /** Returns true if field policy is set (has been assigned a value) and false otherwise */
    public boolean isSetPolicy() {
      return this.policy != null;
    }

    public void setPolicyIsSet(boolean value) {
      if (!value) {
        this.policy = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case POLICY:
        if (value == null) {
          unsetPolicy();
        } else {
          setPolicy((AdGroupPolicy)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case POLICY:
        return getPolicy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case POLICY:
        return isSetPolicy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertPolicy_args)
        return this.equals((insertPolicy_args)that);
      return false;
    }

    public boolean equals(insertPolicy_args that) {
      if (that == null)
        return false;

      boolean this_present_policy = true && this.isSetPolicy();
      boolean that_present_policy = true && that.isSetPolicy();
      if (this_present_policy || that_present_policy) {
        if (!(this_present_policy && that_present_policy))
          return false;
        if (!this.policy.equals(that.policy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertPolicy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertPolicy_args typedOther = (insertPolicy_args)other;

      lastComparison = Boolean.valueOf(isSetPolicy()).compareTo(typedOther.isSetPolicy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPolicy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policy, typedOther.policy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertPolicy_args(");
      boolean first = true;

      sb.append("policy:");
      if (this.policy == null) {
        sb.append("null");
      } else {
        sb.append(this.policy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertPolicy_argsStandardSchemeFactory implements SchemeFactory {
      public insertPolicy_argsStandardScheme getScheme() {
        return new insertPolicy_argsStandardScheme();
      }
    }

    private static class insertPolicy_argsStandardScheme extends StandardScheme<insertPolicy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertPolicy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POLICY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.policy = new AdGroupPolicy();
                struct.policy.read(iprot);
                struct.setPolicyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertPolicy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.policy != null) {
          oprot.writeFieldBegin(POLICY_FIELD_DESC);
          struct.policy.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertPolicy_argsTupleSchemeFactory implements SchemeFactory {
      public insertPolicy_argsTupleScheme getScheme() {
        return new insertPolicy_argsTupleScheme();
      }
    }

    private static class insertPolicy_argsTupleScheme extends TupleScheme<insertPolicy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPolicy()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPolicy()) {
          struct.policy.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertPolicy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.policy = new AdGroupPolicy();
          struct.policy.read(iprot);
          struct.setPolicyIsSet(true);
        }
      }
    }

  }

  public static class insertPolicy_result implements org.apache.thrift.TBase<insertPolicy_result, insertPolicy_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertPolicy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertPolicy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertPolicy_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertPolicy_result.class, metaDataMap);
    }

    public insertPolicy_result() {
    }

    public insertPolicy_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertPolicy_result(insertPolicy_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public insertPolicy_result deepCopy() {
      return new insertPolicy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertPolicy_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertPolicy_result)
        return this.equals((insertPolicy_result)that);
      return false;
    }

    public boolean equals(insertPolicy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertPolicy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertPolicy_result typedOther = (insertPolicy_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertPolicy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertPolicy_resultStandardSchemeFactory implements SchemeFactory {
      public insertPolicy_resultStandardScheme getScheme() {
        return new insertPolicy_resultStandardScheme();
      }
    }

    private static class insertPolicy_resultStandardScheme extends StandardScheme<insertPolicy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertPolicy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertPolicy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertPolicy_resultTupleSchemeFactory implements SchemeFactory {
      public insertPolicy_resultTupleScheme getScheme() {
        return new insertPolicy_resultTupleScheme();
      }
    }

    private static class insertPolicy_resultTupleScheme extends TupleScheme<insertPolicy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertPolicy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertHost_args implements org.apache.thrift.TBase<insertHost_args, insertHost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertHost_args");

    private static final org.apache.thrift.protocol.TField HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertHost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertHost_argsTupleSchemeFactory());
    }

    public List<AdGroupHost> hosts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOSTS((short)1, "hosts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOSTS
            return HOSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOSTS, new org.apache.thrift.meta_data.FieldMetaData("hosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroupHost.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertHost_args.class, metaDataMap);
    }

    public insertHost_args() {
    }

    public insertHost_args(
      List<AdGroupHost> hosts)
    {
      this();
      this.hosts = hosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertHost_args(insertHost_args other) {
      if (other.isSetHosts()) {
        List<AdGroupHost> __this__hosts = new ArrayList<AdGroupHost>();
        for (AdGroupHost other_element : other.hosts) {
          __this__hosts.add(new AdGroupHost(other_element));
        }
        this.hosts = __this__hosts;
      }
    }

    public insertHost_args deepCopy() {
      return new insertHost_args(this);
    }

    @Override
    public void clear() {
      this.hosts = null;
    }

    public int getHostsSize() {
      return (this.hosts == null) ? 0 : this.hosts.size();
    }

    public java.util.Iterator<AdGroupHost> getHostsIterator() {
      return (this.hosts == null) ? null : this.hosts.iterator();
    }

    public void addToHosts(AdGroupHost elem) {
      if (this.hosts == null) {
        this.hosts = new ArrayList<AdGroupHost>();
      }
      this.hosts.add(elem);
    }

    public List<AdGroupHost> getHosts() {
      return this.hosts;
    }

    public insertHost_args setHosts(List<AdGroupHost> hosts) {
      this.hosts = hosts;
      return this;
    }

    public void unsetHosts() {
      this.hosts = null;
    }

    /** Returns true if field hosts is set (has been assigned a value) and false otherwise */
    public boolean isSetHosts() {
      return this.hosts != null;
    }

    public void setHostsIsSet(boolean value) {
      if (!value) {
        this.hosts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOSTS:
        if (value == null) {
          unsetHosts();
        } else {
          setHosts((List<AdGroupHost>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOSTS:
        return getHosts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOSTS:
        return isSetHosts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertHost_args)
        return this.equals((insertHost_args)that);
      return false;
    }

    public boolean equals(insertHost_args that) {
      if (that == null)
        return false;

      boolean this_present_hosts = true && this.isSetHosts();
      boolean that_present_hosts = true && that.isSetHosts();
      if (this_present_hosts || that_present_hosts) {
        if (!(this_present_hosts && that_present_hosts))
          return false;
        if (!this.hosts.equals(that.hosts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertHost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertHost_args typedOther = (insertHost_args)other;

      lastComparison = Boolean.valueOf(isSetHosts()).compareTo(typedOther.isSetHosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHosts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts, typedOther.hosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertHost_args(");
      boolean first = true;

      sb.append("hosts:");
      if (this.hosts == null) {
        sb.append("null");
      } else {
        sb.append(this.hosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertHost_argsStandardSchemeFactory implements SchemeFactory {
      public insertHost_argsStandardScheme getScheme() {
        return new insertHost_argsStandardScheme();
      }
    }

    private static class insertHost_argsStandardScheme extends StandardScheme<insertHost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertHost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOSTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.hosts = new ArrayList<AdGroupHost>(_list106.size);
                  for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                  {
                    AdGroupHost _elem108; // required
                    _elem108 = new AdGroupHost();
                    _elem108.read(iprot);
                    struct.hosts.add(_elem108);
                  }
                  iprot.readListEnd();
                }
                struct.setHostsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertHost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hosts != null) {
          oprot.writeFieldBegin(HOSTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hosts.size()));
            for (AdGroupHost _iter109 : struct.hosts)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertHost_argsTupleSchemeFactory implements SchemeFactory {
      public insertHost_argsTupleScheme getScheme() {
        return new insertHost_argsTupleScheme();
      }
    }

    private static class insertHost_argsTupleScheme extends TupleScheme<insertHost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHosts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHosts()) {
          {
            oprot.writeI32(struct.hosts.size());
            for (AdGroupHost _iter110 : struct.hosts)
            {
              _iter110.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.hosts = new ArrayList<AdGroupHost>(_list111.size);
            for (int _i112 = 0; _i112 < _list111.size; ++_i112)
            {
              AdGroupHost _elem113; // required
              _elem113 = new AdGroupHost();
              _elem113.read(iprot);
              struct.hosts.add(_elem113);
            }
          }
          struct.setHostsIsSet(true);
        }
      }
    }

  }

  public static class insertHost_result implements org.apache.thrift.TBase<insertHost_result, insertHost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertHost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertHost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertHost_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertHost_result.class, metaDataMap);
    }

    public insertHost_result() {
    }

    public insertHost_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertHost_result(insertHost_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public insertHost_result deepCopy() {
      return new insertHost_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertHost_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertHost_result)
        return this.equals((insertHost_result)that);
      return false;
    }

    public boolean equals(insertHost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertHost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertHost_result typedOther = (insertHost_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertHost_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertHost_resultStandardSchemeFactory implements SchemeFactory {
      public insertHost_resultStandardScheme getScheme() {
        return new insertHost_resultStandardScheme();
      }
    }

    private static class insertHost_resultStandardScheme extends StandardScheme<insertHost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertHost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertHost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertHost_resultTupleSchemeFactory implements SchemeFactory {
      public insertHost_resultTupleScheme getScheme() {
        return new insertHost_resultTupleScheme();
      }
    }

    private static class insertHost_resultTupleScheme extends TupleScheme<insertHost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateAdGroup_args implements org.apache.thrift.TBase<updateAdGroup_args, updateAdGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdGroup_args");

    private static final org.apache.thrift.protocol.TField AD_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("adGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAdGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAdGroup_argsTupleSchemeFactory());
    }

    public AdGroup adGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_GROUP((short)1, "adGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_GROUP
            return AD_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_GROUP, new org.apache.thrift.meta_data.FieldMetaData("adGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdGroup_args.class, metaDataMap);
    }

    public updateAdGroup_args() {
    }

    public updateAdGroup_args(
      AdGroup adGroup)
    {
      this();
      this.adGroup = adGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdGroup_args(updateAdGroup_args other) {
      if (other.isSetAdGroup()) {
        this.adGroup = new AdGroup(other.adGroup);
      }
    }

    public updateAdGroup_args deepCopy() {
      return new updateAdGroup_args(this);
    }

    @Override
    public void clear() {
      this.adGroup = null;
    }

    public AdGroup getAdGroup() {
      return this.adGroup;
    }

    public updateAdGroup_args setAdGroup(AdGroup adGroup) {
      this.adGroup = adGroup;
      return this;
    }

    public void unsetAdGroup() {
      this.adGroup = null;
    }

    /** Returns true if field adGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetAdGroup() {
      return this.adGroup != null;
    }

    public void setAdGroupIsSet(boolean value) {
      if (!value) {
        this.adGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AD_GROUP:
        if (value == null) {
          unsetAdGroup();
        } else {
          setAdGroup((AdGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_GROUP:
        return getAdGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AD_GROUP:
        return isSetAdGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdGroup_args)
        return this.equals((updateAdGroup_args)that);
      return false;
    }

    public boolean equals(updateAdGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_adGroup = true && this.isSetAdGroup();
      boolean that_present_adGroup = true && that.isSetAdGroup();
      if (this_present_adGroup || that_present_adGroup) {
        if (!(this_present_adGroup && that_present_adGroup))
          return false;
        if (!this.adGroup.equals(that.adGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAdGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAdGroup_args typedOther = (updateAdGroup_args)other;

      lastComparison = Boolean.valueOf(isSetAdGroup()).compareTo(typedOther.isSetAdGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adGroup, typedOther.adGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAdGroup_args(");
      boolean first = true;

      sb.append("adGroup:");
      if (this.adGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.adGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdGroup_argsStandardSchemeFactory implements SchemeFactory {
      public updateAdGroup_argsStandardScheme getScheme() {
        return new updateAdGroup_argsStandardScheme();
      }
    }

    private static class updateAdGroup_argsStandardScheme extends StandardScheme<updateAdGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.adGroup = new AdGroup();
                struct.adGroup.read(iprot);
                struct.setAdGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adGroup != null) {
          oprot.writeFieldBegin(AD_GROUP_FIELD_DESC);
          struct.adGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdGroup_argsTupleSchemeFactory implements SchemeFactory {
      public updateAdGroup_argsTupleScheme getScheme() {
        return new updateAdGroup_argsTupleScheme();
      }
    }

    private static class updateAdGroup_argsTupleScheme extends TupleScheme<updateAdGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdGroup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAdGroup()) {
          struct.adGroup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.adGroup = new AdGroup();
          struct.adGroup.read(iprot);
          struct.setAdGroupIsSet(true);
        }
      }
    }

  }

  public static class updateAdGroup_result implements org.apache.thrift.TBase<updateAdGroup_result, updateAdGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAdGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAdGroup_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdGroup_result.class, metaDataMap);
    }

    public updateAdGroup_result() {
    }

    public updateAdGroup_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdGroup_result(updateAdGroup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateAdGroup_result deepCopy() {
      return new updateAdGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateAdGroup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdGroup_result)
        return this.equals((updateAdGroup_result)that);
      return false;
    }

    public boolean equals(updateAdGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAdGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAdGroup_result typedOther = (updateAdGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAdGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdGroup_resultStandardSchemeFactory implements SchemeFactory {
      public updateAdGroup_resultStandardScheme getScheme() {
        return new updateAdGroup_resultStandardScheme();
      }
    }

    private static class updateAdGroup_resultStandardScheme extends StandardScheme<updateAdGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdGroup_resultTupleSchemeFactory implements SchemeFactory {
      public updateAdGroup_resultTupleScheme getScheme() {
        return new updateAdGroup_resultTupleScheme();
      }
    }

    private static class updateAdGroup_resultTupleScheme extends TupleScheme<updateAdGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPolicyIdByGid_args implements org.apache.thrift.TBase<getPolicyIdByGid_args, getPolicyIdByGid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPolicyIdByGid_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPolicyIdByGid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPolicyIdByGid_argsTupleSchemeFactory());
    }

    public int group_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPolicyIdByGid_args.class, metaDataMap);
    }

    public getPolicyIdByGid_args() {
    }

    public getPolicyIdByGid_args(
      int group_id)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPolicyIdByGid_args(getPolicyIdByGid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.group_id = other.group_id;
    }

    public getPolicyIdByGid_args deepCopy() {
      return new getPolicyIdByGid_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public getPolicyIdByGid_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bit_vector.clear(__GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return __isset_bit_vector.get(__GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bit_vector.set(__GROUP_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPolicyIdByGid_args)
        return this.equals((getPolicyIdByGid_args)that);
      return false;
    }

    public boolean equals(getPolicyIdByGid_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPolicyIdByGid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPolicyIdByGid_args typedOther = (getPolicyIdByGid_args)other;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(typedOther.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, typedOther.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPolicyIdByGid_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPolicyIdByGid_argsStandardSchemeFactory implements SchemeFactory {
      public getPolicyIdByGid_argsStandardScheme getScheme() {
        return new getPolicyIdByGid_argsStandardScheme();
      }
    }

    private static class getPolicyIdByGid_argsStandardScheme extends StandardScheme<getPolicyIdByGid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPolicyIdByGid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPolicyIdByGid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPolicyIdByGid_argsTupleSchemeFactory implements SchemeFactory {
      public getPolicyIdByGid_argsTupleScheme getScheme() {
        return new getPolicyIdByGid_argsTupleScheme();
      }
    }

    private static class getPolicyIdByGid_argsTupleScheme extends TupleScheme<getPolicyIdByGid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPolicyIdByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPolicyIdByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
      }
    }

  }

  public static class getPolicyIdByGid_result implements org.apache.thrift.TBase<getPolicyIdByGid_result, getPolicyIdByGid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPolicyIdByGid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPolicyIdByGid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPolicyIdByGid_resultTupleSchemeFactory());
    }

    public List<AdGroupPolicy> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroupPolicy.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPolicyIdByGid_result.class, metaDataMap);
    }

    public getPolicyIdByGid_result() {
    }

    public getPolicyIdByGid_result(
      List<AdGroupPolicy> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPolicyIdByGid_result(getPolicyIdByGid_result other) {
      if (other.isSetSuccess()) {
        List<AdGroupPolicy> __this__success = new ArrayList<AdGroupPolicy>();
        for (AdGroupPolicy other_element : other.success) {
          __this__success.add(new AdGroupPolicy(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPolicyIdByGid_result deepCopy() {
      return new getPolicyIdByGid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroupPolicy> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroupPolicy elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroupPolicy>();
      }
      this.success.add(elem);
    }

    public List<AdGroupPolicy> getSuccess() {
      return this.success;
    }

    public getPolicyIdByGid_result setSuccess(List<AdGroupPolicy> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroupPolicy>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPolicyIdByGid_result)
        return this.equals((getPolicyIdByGid_result)that);
      return false;
    }

    public boolean equals(getPolicyIdByGid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPolicyIdByGid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPolicyIdByGid_result typedOther = (getPolicyIdByGid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPolicyIdByGid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPolicyIdByGid_resultStandardSchemeFactory implements SchemeFactory {
      public getPolicyIdByGid_resultStandardScheme getScheme() {
        return new getPolicyIdByGid_resultStandardScheme();
      }
    }

    private static class getPolicyIdByGid_resultStandardScheme extends StandardScheme<getPolicyIdByGid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPolicyIdByGid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroupPolicy>(_list114.size);
                  for (int _i115 = 0; _i115 < _list114.size; ++_i115)
                  {
                    AdGroupPolicy _elem116; // required
                    _elem116 = new AdGroupPolicy();
                    _elem116.read(iprot);
                    struct.success.add(_elem116);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPolicyIdByGid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroupPolicy _iter117 : struct.success)
            {
              _iter117.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPolicyIdByGid_resultTupleSchemeFactory implements SchemeFactory {
      public getPolicyIdByGid_resultTupleScheme getScheme() {
        return new getPolicyIdByGid_resultTupleScheme();
      }
    }

    private static class getPolicyIdByGid_resultTupleScheme extends TupleScheme<getPolicyIdByGid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPolicyIdByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroupPolicy _iter118 : struct.success)
            {
              _iter118.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPolicyIdByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroupPolicy>(_list119.size);
            for (int _i120 = 0; _i120 < _list119.size; ++_i120)
            {
              AdGroupPolicy _elem121; // required
              _elem121 = new AdGroupPolicy();
              _elem121.read(iprot);
              struct.success.add(_elem121);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHostsByGid_args implements org.apache.thrift.TBase<getHostsByGid_args, getHostsByGid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostsByGid_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHostsByGid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHostsByGid_argsTupleSchemeFactory());
    }

    public int group_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostsByGid_args.class, metaDataMap);
    }

    public getHostsByGid_args() {
    }

    public getHostsByGid_args(
      int group_id)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostsByGid_args(getHostsByGid_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.group_id = other.group_id;
    }

    public getHostsByGid_args deepCopy() {
      return new getHostsByGid_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public getHostsByGid_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bit_vector.clear(__GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return __isset_bit_vector.get(__GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bit_vector.set(__GROUP_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostsByGid_args)
        return this.equals((getHostsByGid_args)that);
      return false;
    }

    public boolean equals(getHostsByGid_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostsByGid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostsByGid_args typedOther = (getHostsByGid_args)other;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(typedOther.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, typedOther.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostsByGid_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHostsByGid_argsStandardSchemeFactory implements SchemeFactory {
      public getHostsByGid_argsStandardScheme getScheme() {
        return new getHostsByGid_argsStandardScheme();
      }
    }

    private static class getHostsByGid_argsStandardScheme extends StandardScheme<getHostsByGid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHostsByGid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHostsByGid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHostsByGid_argsTupleSchemeFactory implements SchemeFactory {
      public getHostsByGid_argsTupleScheme getScheme() {
        return new getHostsByGid_argsTupleScheme();
      }
    }

    private static class getHostsByGid_argsTupleScheme extends TupleScheme<getHostsByGid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHostsByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHostsByGid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
      }
    }

  }

  public static class getHostsByGid_result implements org.apache.thrift.TBase<getHostsByGid_result, getHostsByGid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostsByGid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHostsByGid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHostsByGid_resultTupleSchemeFactory());
    }

    public List<AdGroupHost> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroupHost.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostsByGid_result.class, metaDataMap);
    }

    public getHostsByGid_result() {
    }

    public getHostsByGid_result(
      List<AdGroupHost> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostsByGid_result(getHostsByGid_result other) {
      if (other.isSetSuccess()) {
        List<AdGroupHost> __this__success = new ArrayList<AdGroupHost>();
        for (AdGroupHost other_element : other.success) {
          __this__success.add(new AdGroupHost(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHostsByGid_result deepCopy() {
      return new getHostsByGid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroupHost> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroupHost elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroupHost>();
      }
      this.success.add(elem);
    }

    public List<AdGroupHost> getSuccess() {
      return this.success;
    }

    public getHostsByGid_result setSuccess(List<AdGroupHost> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroupHost>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostsByGid_result)
        return this.equals((getHostsByGid_result)that);
      return false;
    }

    public boolean equals(getHostsByGid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostsByGid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostsByGid_result typedOther = (getHostsByGid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostsByGid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHostsByGid_resultStandardSchemeFactory implements SchemeFactory {
      public getHostsByGid_resultStandardScheme getScheme() {
        return new getHostsByGid_resultStandardScheme();
      }
    }

    private static class getHostsByGid_resultStandardScheme extends StandardScheme<getHostsByGid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHostsByGid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroupHost>(_list122.size);
                  for (int _i123 = 0; _i123 < _list122.size; ++_i123)
                  {
                    AdGroupHost _elem124; // required
                    _elem124 = new AdGroupHost();
                    _elem124.read(iprot);
                    struct.success.add(_elem124);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHostsByGid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroupHost _iter125 : struct.success)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHostsByGid_resultTupleSchemeFactory implements SchemeFactory {
      public getHostsByGid_resultTupleScheme getScheme() {
        return new getHostsByGid_resultTupleScheme();
      }
    }

    private static class getHostsByGid_resultTupleScheme extends TupleScheme<getHostsByGid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHostsByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroupHost _iter126 : struct.success)
            {
              _iter126.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHostsByGid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroupHost>(_list127.size);
            for (int _i128 = 0; _i128 < _list127.size; ++_i128)
            {
              AdGroupHost _elem129; // required
              _elem129 = new AdGroupHost();
              _elem129.read(iprot);
              struct.success.add(_elem129);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNumOfAdGroupPagesByPlanId_args implements org.apache.thrift.TBase<getNumOfAdGroupPagesByPlanId_args, getNumOfAdGroupPagesByPlanId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNumOfAdGroupPagesByPlanId_args");

    private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNumOfAdGroupPagesByPlanId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNumOfAdGroupPagesByPlanId_argsTupleSchemeFactory());
    }

    public int plan_id; // required
    public int page_size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAN_ID((short)1, "plan_id"),
      PAGE_SIZE((short)2, "page_size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAN_ID
            return PLAN_ID;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PLAN_ID_ISSET_ID = 0;
    private static final int __PAGE_SIZE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("plan_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNumOfAdGroupPagesByPlanId_args.class, metaDataMap);
    }

    public getNumOfAdGroupPagesByPlanId_args() {
    }

    public getNumOfAdGroupPagesByPlanId_args(
      int plan_id,
      int page_size)
    {
      this();
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
      this.page_size = page_size;
      setPage_sizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNumOfAdGroupPagesByPlanId_args(getNumOfAdGroupPagesByPlanId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.plan_id = other.plan_id;
      this.page_size = other.page_size;
    }

    public getNumOfAdGroupPagesByPlanId_args deepCopy() {
      return new getNumOfAdGroupPagesByPlanId_args(this);
    }

    @Override
    public void clear() {
      setPlan_idIsSet(false);
      this.plan_id = 0;
      setPage_sizeIsSet(false);
      this.page_size = 0;
    }

    public int getPlan_id() {
      return this.plan_id;
    }

    public getNumOfAdGroupPagesByPlanId_args setPlan_id(int plan_id) {
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
      return this;
    }

    public void unsetPlan_id() {
      __isset_bit_vector.clear(__PLAN_ID_ISSET_ID);
    }

    /** Returns true if field plan_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPlan_id() {
      return __isset_bit_vector.get(__PLAN_ID_ISSET_ID);
    }

    public void setPlan_idIsSet(boolean value) {
      __isset_bit_vector.set(__PLAN_ID_ISSET_ID, value);
    }

    public int getPage_size() {
      return this.page_size;
    }

    public getNumOfAdGroupPagesByPlanId_args setPage_size(int page_size) {
      this.page_size = page_size;
      setPage_sizeIsSet(true);
      return this;
    }

    public void unsetPage_size() {
      __isset_bit_vector.clear(__PAGE_SIZE_ISSET_ID);
    }

    /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_size() {
      return __isset_bit_vector.get(__PAGE_SIZE_ISSET_ID);
    }

    public void setPage_sizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLAN_ID:
        if (value == null) {
          unsetPlan_id();
        } else {
          setPlan_id((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPage_size();
        } else {
          setPage_size((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAN_ID:
        return Integer.valueOf(getPlan_id());

      case PAGE_SIZE:
        return Integer.valueOf(getPage_size());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLAN_ID:
        return isSetPlan_id();
      case PAGE_SIZE:
        return isSetPage_size();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNumOfAdGroupPagesByPlanId_args)
        return this.equals((getNumOfAdGroupPagesByPlanId_args)that);
      return false;
    }

    public boolean equals(getNumOfAdGroupPagesByPlanId_args that) {
      if (that == null)
        return false;

      boolean this_present_plan_id = true;
      boolean that_present_plan_id = true;
      if (this_present_plan_id || that_present_plan_id) {
        if (!(this_present_plan_id && that_present_plan_id))
          return false;
        if (this.plan_id != that.plan_id)
          return false;
      }

      boolean this_present_page_size = true;
      boolean that_present_page_size = true;
      if (this_present_page_size || that_present_page_size) {
        if (!(this_present_page_size && that_present_page_size))
          return false;
        if (this.page_size != that.page_size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNumOfAdGroupPagesByPlanId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNumOfAdGroupPagesByPlanId_args typedOther = (getNumOfAdGroupPagesByPlanId_args)other;

      lastComparison = Boolean.valueOf(isSetPlan_id()).compareTo(typedOther.isSetPlan_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlan_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_id, typedOther.plan_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage_size()).compareTo(typedOther.isSetPage_size());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_size()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, typedOther.page_size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNumOfAdGroupPagesByPlanId_args(");
      boolean first = true;

      sb.append("plan_id:");
      sb.append(this.plan_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_size:");
      sb.append(this.page_size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNumOfAdGroupPagesByPlanId_argsStandardSchemeFactory implements SchemeFactory {
      public getNumOfAdGroupPagesByPlanId_argsStandardScheme getScheme() {
        return new getNumOfAdGroupPagesByPlanId_argsStandardScheme();
      }
    }

    private static class getNumOfAdGroupPagesByPlanId_argsStandardScheme extends StandardScheme<getNumOfAdGroupPagesByPlanId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNumOfAdGroupPagesByPlanId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.plan_id = iprot.readI32();
                struct.setPlan_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_size = iprot.readI32();
                struct.setPage_sizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNumOfAdGroupPagesByPlanId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
        oprot.writeI32(struct.plan_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.page_size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNumOfAdGroupPagesByPlanId_argsTupleSchemeFactory implements SchemeFactory {
      public getNumOfAdGroupPagesByPlanId_argsTupleScheme getScheme() {
        return new getNumOfAdGroupPagesByPlanId_argsTupleScheme();
      }
    }

    private static class getNumOfAdGroupPagesByPlanId_argsTupleScheme extends TupleScheme<getNumOfAdGroupPagesByPlanId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNumOfAdGroupPagesByPlanId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlan_id()) {
          optionals.set(0);
        }
        if (struct.isSetPage_size()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlan_id()) {
          oprot.writeI32(struct.plan_id);
        }
        if (struct.isSetPage_size()) {
          oprot.writeI32(struct.page_size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNumOfAdGroupPagesByPlanId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.plan_id = iprot.readI32();
          struct.setPlan_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page_size = iprot.readI32();
          struct.setPage_sizeIsSet(true);
        }
      }
    }

  }

  public static class getNumOfAdGroupPagesByPlanId_result implements org.apache.thrift.TBase<getNumOfAdGroupPagesByPlanId_result, getNumOfAdGroupPagesByPlanId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNumOfAdGroupPagesByPlanId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNumOfAdGroupPagesByPlanId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNumOfAdGroupPagesByPlanId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNumOfAdGroupPagesByPlanId_result.class, metaDataMap);
    }

    public getNumOfAdGroupPagesByPlanId_result() {
    }

    public getNumOfAdGroupPagesByPlanId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNumOfAdGroupPagesByPlanId_result(getNumOfAdGroupPagesByPlanId_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public getNumOfAdGroupPagesByPlanId_result deepCopy() {
      return new getNumOfAdGroupPagesByPlanId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getNumOfAdGroupPagesByPlanId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNumOfAdGroupPagesByPlanId_result)
        return this.equals((getNumOfAdGroupPagesByPlanId_result)that);
      return false;
    }

    public boolean equals(getNumOfAdGroupPagesByPlanId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNumOfAdGroupPagesByPlanId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNumOfAdGroupPagesByPlanId_result typedOther = (getNumOfAdGroupPagesByPlanId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNumOfAdGroupPagesByPlanId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNumOfAdGroupPagesByPlanId_resultStandardSchemeFactory implements SchemeFactory {
      public getNumOfAdGroupPagesByPlanId_resultStandardScheme getScheme() {
        return new getNumOfAdGroupPagesByPlanId_resultStandardScheme();
      }
    }

    private static class getNumOfAdGroupPagesByPlanId_resultStandardScheme extends StandardScheme<getNumOfAdGroupPagesByPlanId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNumOfAdGroupPagesByPlanId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNumOfAdGroupPagesByPlanId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNumOfAdGroupPagesByPlanId_resultTupleSchemeFactory implements SchemeFactory {
      public getNumOfAdGroupPagesByPlanId_resultTupleScheme getScheme() {
        return new getNumOfAdGroupPagesByPlanId_resultTupleScheme();
      }
    }

    private static class getNumOfAdGroupPagesByPlanId_resultTupleScheme extends TupleScheme<getNumOfAdGroupPagesByPlanId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNumOfAdGroupPagesByPlanId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNumOfAdGroupPagesByPlanId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupsByPageIndex_args implements org.apache.thrift.TBase<getAdGroupsByPageIndex_args, getAdGroupsByPageIndex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupsByPageIndex_args");

    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("page_index", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupsByPageIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupsByPageIndex_argsTupleSchemeFactory());
    }

    public int page_index; // required
    public int page_size; // required
    public int plan_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_INDEX((short)1, "page_index"),
      PAGE_SIZE((short)2, "page_size"),
      PLAN_ID((short)3, "plan_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_INDEX
            return PAGE_INDEX;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          case 3: // PLAN_ID
            return PLAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_INDEX_ISSET_ID = 0;
    private static final int __PAGE_SIZE_ISSET_ID = 1;
    private static final int __PLAN_ID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("page_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("plan_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupsByPageIndex_args.class, metaDataMap);
    }

    public getAdGroupsByPageIndex_args() {
    }

    public getAdGroupsByPageIndex_args(
      int page_index,
      int page_size,
      int plan_id)
    {
      this();
      this.page_index = page_index;
      setPage_indexIsSet(true);
      this.page_size = page_size;
      setPage_sizeIsSet(true);
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupsByPageIndex_args(getAdGroupsByPageIndex_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.page_index = other.page_index;
      this.page_size = other.page_size;
      this.plan_id = other.plan_id;
    }

    public getAdGroupsByPageIndex_args deepCopy() {
      return new getAdGroupsByPageIndex_args(this);
    }

    @Override
    public void clear() {
      setPage_indexIsSet(false);
      this.page_index = 0;
      setPage_sizeIsSet(false);
      this.page_size = 0;
      setPlan_idIsSet(false);
      this.plan_id = 0;
    }

    public int getPage_index() {
      return this.page_index;
    }

    public getAdGroupsByPageIndex_args setPage_index(int page_index) {
      this.page_index = page_index;
      setPage_indexIsSet(true);
      return this;
    }

    public void unsetPage_index() {
      __isset_bit_vector.clear(__PAGE_INDEX_ISSET_ID);
    }

    /** Returns true if field page_index is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_index() {
      return __isset_bit_vector.get(__PAGE_INDEX_ISSET_ID);
    }

    public void setPage_indexIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_INDEX_ISSET_ID, value);
    }

    public int getPage_size() {
      return this.page_size;
    }

    public getAdGroupsByPageIndex_args setPage_size(int page_size) {
      this.page_size = page_size;
      setPage_sizeIsSet(true);
      return this;
    }

    public void unsetPage_size() {
      __isset_bit_vector.clear(__PAGE_SIZE_ISSET_ID);
    }

    /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_size() {
      return __isset_bit_vector.get(__PAGE_SIZE_ISSET_ID);
    }

    public void setPage_sizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_SIZE_ISSET_ID, value);
    }

    public int getPlan_id() {
      return this.plan_id;
    }

    public getAdGroupsByPageIndex_args setPlan_id(int plan_id) {
      this.plan_id = plan_id;
      setPlan_idIsSet(true);
      return this;
    }

    public void unsetPlan_id() {
      __isset_bit_vector.clear(__PLAN_ID_ISSET_ID);
    }

    /** Returns true if field plan_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPlan_id() {
      return __isset_bit_vector.get(__PLAN_ID_ISSET_ID);
    }

    public void setPlan_idIsSet(boolean value) {
      __isset_bit_vector.set(__PLAN_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_INDEX:
        if (value == null) {
          unsetPage_index();
        } else {
          setPage_index((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPage_size();
        } else {
          setPage_size((Integer)value);
        }
        break;

      case PLAN_ID:
        if (value == null) {
          unsetPlan_id();
        } else {
          setPlan_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_INDEX:
        return Integer.valueOf(getPage_index());

      case PAGE_SIZE:
        return Integer.valueOf(getPage_size());

      case PLAN_ID:
        return Integer.valueOf(getPlan_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_INDEX:
        return isSetPage_index();
      case PAGE_SIZE:
        return isSetPage_size();
      case PLAN_ID:
        return isSetPlan_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupsByPageIndex_args)
        return this.equals((getAdGroupsByPageIndex_args)that);
      return false;
    }

    public boolean equals(getAdGroupsByPageIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_page_index = true;
      boolean that_present_page_index = true;
      if (this_present_page_index || that_present_page_index) {
        if (!(this_present_page_index && that_present_page_index))
          return false;
        if (this.page_index != that.page_index)
          return false;
      }

      boolean this_present_page_size = true;
      boolean that_present_page_size = true;
      if (this_present_page_size || that_present_page_size) {
        if (!(this_present_page_size && that_present_page_size))
          return false;
        if (this.page_size != that.page_size)
          return false;
      }

      boolean this_present_plan_id = true;
      boolean that_present_plan_id = true;
      if (this_present_plan_id || that_present_plan_id) {
        if (!(this_present_plan_id && that_present_plan_id))
          return false;
        if (this.plan_id != that.plan_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupsByPageIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupsByPageIndex_args typedOther = (getAdGroupsByPageIndex_args)other;

      lastComparison = Boolean.valueOf(isSetPage_index()).compareTo(typedOther.isSetPage_index());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_index()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_index, typedOther.page_index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage_size()).compareTo(typedOther.isSetPage_size());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_size()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, typedOther.page_size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlan_id()).compareTo(typedOther.isSetPlan_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlan_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_id, typedOther.plan_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupsByPageIndex_args(");
      boolean first = true;

      sb.append("page_index:");
      sb.append(this.page_index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_size:");
      sb.append(this.page_size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("plan_id:");
      sb.append(this.plan_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupsByPageIndex_argsStandardSchemeFactory implements SchemeFactory {
      public getAdGroupsByPageIndex_argsStandardScheme getScheme() {
        return new getAdGroupsByPageIndex_argsStandardScheme();
      }
    }

    private static class getAdGroupsByPageIndex_argsStandardScheme extends StandardScheme<getAdGroupsByPageIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupsByPageIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_index = iprot.readI32();
                struct.setPage_indexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_size = iprot.readI32();
                struct.setPage_sizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.plan_id = iprot.readI32();
                struct.setPlan_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupsByPageIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.page_index);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.page_size);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
        oprot.writeI32(struct.plan_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupsByPageIndex_argsTupleSchemeFactory implements SchemeFactory {
      public getAdGroupsByPageIndex_argsTupleScheme getScheme() {
        return new getAdGroupsByPageIndex_argsTupleScheme();
      }
    }

    private static class getAdGroupsByPageIndex_argsTupleScheme extends TupleScheme<getAdGroupsByPageIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPageIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage_index()) {
          optionals.set(0);
        }
        if (struct.isSetPage_size()) {
          optionals.set(1);
        }
        if (struct.isSetPlan_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPage_index()) {
          oprot.writeI32(struct.page_index);
        }
        if (struct.isSetPage_size()) {
          oprot.writeI32(struct.page_size);
        }
        if (struct.isSetPlan_id()) {
          oprot.writeI32(struct.plan_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPageIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.page_index = iprot.readI32();
          struct.setPage_indexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page_size = iprot.readI32();
          struct.setPage_sizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.plan_id = iprot.readI32();
          struct.setPlan_idIsSet(true);
        }
      }
    }

  }

  public static class getAdGroupsByPageIndex_result implements org.apache.thrift.TBase<getAdGroupsByPageIndex_result, getAdGroupsByPageIndex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdGroupsByPageIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAdGroupsByPageIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAdGroupsByPageIndex_resultTupleSchemeFactory());
    }

    public List<AdGroup> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdGroup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdGroupsByPageIndex_result.class, metaDataMap);
    }

    public getAdGroupsByPageIndex_result() {
    }

    public getAdGroupsByPageIndex_result(
      List<AdGroup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdGroupsByPageIndex_result(getAdGroupsByPageIndex_result other) {
      if (other.isSetSuccess()) {
        List<AdGroup> __this__success = new ArrayList<AdGroup>();
        for (AdGroup other_element : other.success) {
          __this__success.add(new AdGroup(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAdGroupsByPageIndex_result deepCopy() {
      return new getAdGroupsByPageIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AdGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AdGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<AdGroup>();
      }
      this.success.add(elem);
    }

    public List<AdGroup> getSuccess() {
      return this.success;
    }

    public getAdGroupsByPageIndex_result setSuccess(List<AdGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AdGroup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdGroupsByPageIndex_result)
        return this.equals((getAdGroupsByPageIndex_result)that);
      return false;
    }

    public boolean equals(getAdGroupsByPageIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAdGroupsByPageIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAdGroupsByPageIndex_result typedOther = (getAdGroupsByPageIndex_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAdGroupsByPageIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdGroupsByPageIndex_resultStandardSchemeFactory implements SchemeFactory {
      public getAdGroupsByPageIndex_resultStandardScheme getScheme() {
        return new getAdGroupsByPageIndex_resultStandardScheme();
      }
    }

    private static class getAdGroupsByPageIndex_resultStandardScheme extends StandardScheme<getAdGroupsByPageIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdGroupsByPageIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.success = new ArrayList<AdGroup>(_list130.size);
                  for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                  {
                    AdGroup _elem132; // required
                    _elem132 = new AdGroup();
                    _elem132.read(iprot);
                    struct.success.add(_elem132);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdGroupsByPageIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AdGroup _iter133 : struct.success)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdGroupsByPageIndex_resultTupleSchemeFactory implements SchemeFactory {
      public getAdGroupsByPageIndex_resultTupleScheme getScheme() {
        return new getAdGroupsByPageIndex_resultTupleScheme();
      }
    }

    private static class getAdGroupsByPageIndex_resultTupleScheme extends TupleScheme<getAdGroupsByPageIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPageIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AdGroup _iter134 : struct.success)
            {
              _iter134.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdGroupsByPageIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AdGroup>(_list135.size);
            for (int _i136 = 0; _i136 < _list135.size; ++_i136)
            {
              AdGroup _elem137; // required
              _elem137 = new AdGroup();
              _elem137.read(iprot);
              struct.success.add(_elem137);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
