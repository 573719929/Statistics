/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.adp.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PolicyData implements org.apache.thrift.TBase<PolicyData, PolicyData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PolicyData");

  private static final org.apache.thrift.protocol.TField POLICY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("policy_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ADID_FIELD_DESC = new org.apache.thrift.protocol.TField("adid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bid_price", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DSP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dsp_name", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PolicyDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PolicyDataTupleSchemeFactory());
  }

  public int policy_id; // required
  public int adid; // required
  public double bid_price; // required
  public String dsp_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POLICY_ID((short)1, "policy_id"),
    ADID((short)2, "adid"),
    BID_PRICE((short)3, "bid_price"),
    DSP_NAME((short)4, "dsp_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POLICY_ID
          return POLICY_ID;
        case 2: // ADID
          return ADID;
        case 3: // BID_PRICE
          return BID_PRICE;
        case 4: // DSP_NAME
          return DSP_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POLICY_ID_ISSET_ID = 0;
  private static final int __ADID_ISSET_ID = 1;
  private static final int __BID_PRICE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POLICY_ID, new org.apache.thrift.meta_data.FieldMetaData("policy_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADID, new org.apache.thrift.meta_data.FieldMetaData("adid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bid_price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DSP_NAME, new org.apache.thrift.meta_data.FieldMetaData("dsp_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PolicyData.class, metaDataMap);
  }

  public PolicyData() {
  }

  public PolicyData(
    int policy_id,
    int adid,
    double bid_price,
    String dsp_name)
  {
    this();
    this.policy_id = policy_id;
    setPolicy_idIsSet(true);
    this.adid = adid;
    setAdidIsSet(true);
    this.bid_price = bid_price;
    setBid_priceIsSet(true);
    this.dsp_name = dsp_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PolicyData(PolicyData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.policy_id = other.policy_id;
    this.adid = other.adid;
    this.bid_price = other.bid_price;
    if (other.isSetDsp_name()) {
      this.dsp_name = other.dsp_name;
    }
  }

  public PolicyData deepCopy() {
    return new PolicyData(this);
  }

  @Override
  public void clear() {
    setPolicy_idIsSet(false);
    this.policy_id = 0;
    setAdidIsSet(false);
    this.adid = 0;
    setBid_priceIsSet(false);
    this.bid_price = 0.0;
    this.dsp_name = null;
  }

  public int getPolicy_id() {
    return this.policy_id;
  }

  public PolicyData setPolicy_id(int policy_id) {
    this.policy_id = policy_id;
    setPolicy_idIsSet(true);
    return this;
  }

  public void unsetPolicy_id() {
    __isset_bit_vector.clear(__POLICY_ID_ISSET_ID);
  }

  /** Returns true if field policy_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicy_id() {
    return __isset_bit_vector.get(__POLICY_ID_ISSET_ID);
  }

  public void setPolicy_idIsSet(boolean value) {
    __isset_bit_vector.set(__POLICY_ID_ISSET_ID, value);
  }

  public int getAdid() {
    return this.adid;
  }

  public PolicyData setAdid(int adid) {
    this.adid = adid;
    setAdidIsSet(true);
    return this;
  }

  public void unsetAdid() {
    __isset_bit_vector.clear(__ADID_ISSET_ID);
  }

  /** Returns true if field adid is set (has been assigned a value) and false otherwise */
  public boolean isSetAdid() {
    return __isset_bit_vector.get(__ADID_ISSET_ID);
  }

  public void setAdidIsSet(boolean value) {
    __isset_bit_vector.set(__ADID_ISSET_ID, value);
  }

  public double getBid_price() {
    return this.bid_price;
  }

  public PolicyData setBid_price(double bid_price) {
    this.bid_price = bid_price;
    setBid_priceIsSet(true);
    return this;
  }

  public void unsetBid_price() {
    __isset_bit_vector.clear(__BID_PRICE_ISSET_ID);
  }

  /** Returns true if field bid_price is set (has been assigned a value) and false otherwise */
  public boolean isSetBid_price() {
    return __isset_bit_vector.get(__BID_PRICE_ISSET_ID);
  }

  public void setBid_priceIsSet(boolean value) {
    __isset_bit_vector.set(__BID_PRICE_ISSET_ID, value);
  }

  public String getDsp_name() {
    return this.dsp_name;
  }

  public PolicyData setDsp_name(String dsp_name) {
    this.dsp_name = dsp_name;
    return this;
  }

  public void unsetDsp_name() {
    this.dsp_name = null;
  }

  /** Returns true if field dsp_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDsp_name() {
    return this.dsp_name != null;
  }

  public void setDsp_nameIsSet(boolean value) {
    if (!value) {
      this.dsp_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POLICY_ID:
      if (value == null) {
        unsetPolicy_id();
      } else {
        setPolicy_id((Integer)value);
      }
      break;

    case ADID:
      if (value == null) {
        unsetAdid();
      } else {
        setAdid((Integer)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBid_price();
      } else {
        setBid_price((Double)value);
      }
      break;

    case DSP_NAME:
      if (value == null) {
        unsetDsp_name();
      } else {
        setDsp_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POLICY_ID:
      return Integer.valueOf(getPolicy_id());

    case ADID:
      return Integer.valueOf(getAdid());

    case BID_PRICE:
      return Double.valueOf(getBid_price());

    case DSP_NAME:
      return getDsp_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POLICY_ID:
      return isSetPolicy_id();
    case ADID:
      return isSetAdid();
    case BID_PRICE:
      return isSetBid_price();
    case DSP_NAME:
      return isSetDsp_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PolicyData)
      return this.equals((PolicyData)that);
    return false;
  }

  public boolean equals(PolicyData that) {
    if (that == null)
      return false;

    boolean this_present_policy_id = true;
    boolean that_present_policy_id = true;
    if (this_present_policy_id || that_present_policy_id) {
      if (!(this_present_policy_id && that_present_policy_id))
        return false;
      if (this.policy_id != that.policy_id)
        return false;
    }

    boolean this_present_adid = true;
    boolean that_present_adid = true;
    if (this_present_adid || that_present_adid) {
      if (!(this_present_adid && that_present_adid))
        return false;
      if (this.adid != that.adid)
        return false;
    }

    boolean this_present_bid_price = true;
    boolean that_present_bid_price = true;
    if (this_present_bid_price || that_present_bid_price) {
      if (!(this_present_bid_price && that_present_bid_price))
        return false;
      if (this.bid_price != that.bid_price)
        return false;
    }

    boolean this_present_dsp_name = true && this.isSetDsp_name();
    boolean that_present_dsp_name = true && that.isSetDsp_name();
    if (this_present_dsp_name || that_present_dsp_name) {
      if (!(this_present_dsp_name && that_present_dsp_name))
        return false;
      if (!this.dsp_name.equals(that.dsp_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PolicyData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PolicyData typedOther = (PolicyData)other;

    lastComparison = Boolean.valueOf(isSetPolicy_id()).compareTo(typedOther.isSetPolicy_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicy_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policy_id, typedOther.policy_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdid()).compareTo(typedOther.isSetAdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adid, typedOther.adid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBid_price()).compareTo(typedOther.isSetBid_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid_price, typedOther.bid_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDsp_name()).compareTo(typedOther.isSetDsp_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDsp_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsp_name, typedOther.dsp_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PolicyData(");
    boolean first = true;

    sb.append("policy_id:");
    sb.append(this.policy_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adid:");
    sb.append(this.adid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bid_price:");
    sb.append(this.bid_price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dsp_name:");
    if (this.dsp_name == null) {
      sb.append("null");
    } else {
      sb.append(this.dsp_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PolicyDataStandardSchemeFactory implements SchemeFactory {
    public PolicyDataStandardScheme getScheme() {
      return new PolicyDataStandardScheme();
    }
  }

  private static class PolicyDataStandardScheme extends StandardScheme<PolicyData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PolicyData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POLICY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.policy_id = iprot.readI32();
              struct.setPolicy_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adid = iprot.readI32();
              struct.setAdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bid_price = iprot.readDouble();
              struct.setBid_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DSP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dsp_name = iprot.readString();
              struct.setDsp_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PolicyData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POLICY_ID_FIELD_DESC);
      oprot.writeI32(struct.policy_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADID_FIELD_DESC);
      oprot.writeI32(struct.adid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.bid_price);
      oprot.writeFieldEnd();
      if (struct.dsp_name != null) {
        oprot.writeFieldBegin(DSP_NAME_FIELD_DESC);
        oprot.writeString(struct.dsp_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PolicyDataTupleSchemeFactory implements SchemeFactory {
    public PolicyDataTupleScheme getScheme() {
      return new PolicyDataTupleScheme();
    }
  }

  private static class PolicyDataTupleScheme extends TupleScheme<PolicyData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PolicyData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPolicy_id()) {
        optionals.set(0);
      }
      if (struct.isSetAdid()) {
        optionals.set(1);
      }
      if (struct.isSetBid_price()) {
        optionals.set(2);
      }
      if (struct.isSetDsp_name()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPolicy_id()) {
        oprot.writeI32(struct.policy_id);
      }
      if (struct.isSetAdid()) {
        oprot.writeI32(struct.adid);
      }
      if (struct.isSetBid_price()) {
        oprot.writeDouble(struct.bid_price);
      }
      if (struct.isSetDsp_name()) {
        oprot.writeString(struct.dsp_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PolicyData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.policy_id = iprot.readI32();
        struct.setPolicy_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.adid = iprot.readI32();
        struct.setAdidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bid_price = iprot.readDouble();
        struct.setBid_priceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dsp_name = iprot.readString();
        struct.setDsp_nameIsSet(true);
      }
    }
  }

}

