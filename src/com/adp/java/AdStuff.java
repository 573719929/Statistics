/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.adp.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AdStuff implements org.apache.thrift.TBase<AdStuff, AdStuff._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdStuff");

  private static final org.apache.thrift.protocol.TField AD_STUFF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ad_stuff_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MEDIA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("media_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("media_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("image_url", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField THUMB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("thumb_url", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CROP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("crop_url", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LANDING_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("landing_page", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ctime", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField MTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mtime", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField HAS_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("has_text", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SHOW_JS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_js", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CLICK_JS_FIELD_DESC = new org.apache.thrift.protocol.TField("click_js", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField APPLY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("apply_date", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField COLUMN1_FIELD_DESC = new org.apache.thrift.protocol.TField("column1", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField COLUMN2_FIELD_DESC = new org.apache.thrift.protocol.TField("column2", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdStuffStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdStuffTupleSchemeFactory());
  }

  public int ad_stuff_id; // required
  public int uid; // required
  public int plan_id; // required
  public int group_id; // required
  /**
   * 
   * @see com.adp.java.AdStatus
   */
  public com.adp.java.AdStatus status; // required
  public String name; // required
  public String media_name; // required
  /**
   * 
   * @see com.adp.java.NetWorkType
   */
  public com.adp.java.NetWorkType media_type; // required
  /**
   * 
   * @see com.adp.java.StuffType
   */
  public com.adp.java.StuffType type; // required
  public int width; // required
  public int height; // required
  public String title; // required
  public String description; // required
  public String image_url; // required
  public String thumb_url; // required
  public String crop_url; // required
  public String landing_page; // required
  public int ctime; // required
  public int mtime; // required
  public int size; // required
  public int version; // required
  public int has_text; // required
  public String show_js; // required
  public String click_js; // required
  public int apply_date; // required
  public int column1; // required
  public String column2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_STUFF_ID((short)1, "ad_stuff_id"),
    UID((short)2, "uid"),
    PLAN_ID((short)3, "plan_id"),
    GROUP_ID((short)4, "group_id"),
    /**
     * 
     * @see com.adp.java.AdStatus
     */
    STATUS((short)5, "status"),
    NAME((short)6, "name"),
    MEDIA_NAME((short)7, "media_name"),
    /**
     * 
     * @see com.adp.java.NetWorkType
     */
    MEDIA_TYPE((short)8, "media_type"),
    /**
     * 
     * @see com.adp.java.StuffType
     */
    TYPE((short)9, "type"),
    WIDTH((short)10, "width"),
    HEIGHT((short)11, "height"),
    TITLE((short)12, "title"),
    DESCRIPTION((short)13, "description"),
    IMAGE_URL((short)14, "image_url"),
    THUMB_URL((short)15, "thumb_url"),
    CROP_URL((short)16, "crop_url"),
    LANDING_PAGE((short)17, "landing_page"),
    CTIME((short)18, "ctime"),
    MTIME((short)19, "mtime"),
    SIZE((short)20, "size"),
    VERSION((short)21, "version"),
    HAS_TEXT((short)22, "has_text"),
    SHOW_JS((short)23, "show_js"),
    CLICK_JS((short)24, "click_js"),
    APPLY_DATE((short)25, "apply_date"),
    COLUMN1((short)26, "column1"),
    COLUMN2((short)27, "column2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_STUFF_ID
          return AD_STUFF_ID;
        case 2: // UID
          return UID;
        case 3: // PLAN_ID
          return PLAN_ID;
        case 4: // GROUP_ID
          return GROUP_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // NAME
          return NAME;
        case 7: // MEDIA_NAME
          return MEDIA_NAME;
        case 8: // MEDIA_TYPE
          return MEDIA_TYPE;
        case 9: // TYPE
          return TYPE;
        case 10: // WIDTH
          return WIDTH;
        case 11: // HEIGHT
          return HEIGHT;
        case 12: // TITLE
          return TITLE;
        case 13: // DESCRIPTION
          return DESCRIPTION;
        case 14: // IMAGE_URL
          return IMAGE_URL;
        case 15: // THUMB_URL
          return THUMB_URL;
        case 16: // CROP_URL
          return CROP_URL;
        case 17: // LANDING_PAGE
          return LANDING_PAGE;
        case 18: // CTIME
          return CTIME;
        case 19: // MTIME
          return MTIME;
        case 20: // SIZE
          return SIZE;
        case 21: // VERSION
          return VERSION;
        case 22: // HAS_TEXT
          return HAS_TEXT;
        case 23: // SHOW_JS
          return SHOW_JS;
        case 24: // CLICK_JS
          return CLICK_JS;
        case 25: // APPLY_DATE
          return APPLY_DATE;
        case 26: // COLUMN1
          return COLUMN1;
        case 27: // COLUMN2
          return COLUMN2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AD_STUFF_ID_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __PLAN_ID_ISSET_ID = 2;
  private static final int __GROUP_ID_ISSET_ID = 3;
  private static final int __WIDTH_ISSET_ID = 4;
  private static final int __HEIGHT_ISSET_ID = 5;
  private static final int __CTIME_ISSET_ID = 6;
  private static final int __MTIME_ISSET_ID = 7;
  private static final int __SIZE_ISSET_ID = 8;
  private static final int __VERSION_ISSET_ID = 9;
  private static final int __HAS_TEXT_ISSET_ID = 10;
  private static final int __APPLY_DATE_ISSET_ID = 11;
  private static final int __COLUMN1_ISSET_ID = 12;
  private BitSet __isset_bit_vector = new BitSet(13);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_STUFF_ID, new org.apache.thrift.meta_data.FieldMetaData("ad_stuff_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("plan_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.AdStatus.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_NAME, new org.apache.thrift.meta_data.FieldMetaData("media_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("media_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.NetWorkType.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.adp.java.StuffType.class)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("image_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMB_URL, new org.apache.thrift.meta_data.FieldMetaData("thumb_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CROP_URL, new org.apache.thrift.meta_data.FieldMetaData("crop_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANDING_PAGE, new org.apache.thrift.meta_data.FieldMetaData("landing_page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CTIME, new org.apache.thrift.meta_data.FieldMetaData("ctime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MTIME, new org.apache.thrift.meta_data.FieldMetaData("mtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_TEXT, new org.apache.thrift.meta_data.FieldMetaData("has_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_JS, new org.apache.thrift.meta_data.FieldMetaData("show_js", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLICK_JS, new org.apache.thrift.meta_data.FieldMetaData("click_js", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_DATE, new org.apache.thrift.meta_data.FieldMetaData("apply_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN1, new org.apache.thrift.meta_data.FieldMetaData("column1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN2, new org.apache.thrift.meta_data.FieldMetaData("column2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdStuff.class, metaDataMap);
  }

  public AdStuff() {
  }

  public AdStuff(
    int ad_stuff_id,
    int uid,
    int plan_id,
    int group_id,
    com.adp.java.AdStatus status,
    String name,
    String media_name,
    com.adp.java.NetWorkType media_type,
    com.adp.java.StuffType type,
    int width,
    int height,
    String title,
    String description,
    String image_url,
    String thumb_url,
    String crop_url,
    String landing_page,
    int ctime,
    int mtime,
    int size,
    int version,
    int has_text,
    String show_js,
    String click_js,
    int apply_date,
    int column1,
    String column2)
  {
    this();
    this.ad_stuff_id = ad_stuff_id;
    setAd_stuff_idIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.plan_id = plan_id;
    setPlan_idIsSet(true);
    this.group_id = group_id;
    setGroup_idIsSet(true);
    this.status = status;
    this.name = name;
    this.media_name = media_name;
    this.media_type = media_type;
    this.type = type;
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.title = title;
    this.description = description;
    this.image_url = image_url;
    this.thumb_url = thumb_url;
    this.crop_url = crop_url;
    this.landing_page = landing_page;
    this.ctime = ctime;
    setCtimeIsSet(true);
    this.mtime = mtime;
    setMtimeIsSet(true);
    this.size = size;
    setSizeIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.has_text = has_text;
    setHas_textIsSet(true);
    this.show_js = show_js;
    this.click_js = click_js;
    this.apply_date = apply_date;
    setApply_dateIsSet(true);
    this.column1 = column1;
    setColumn1IsSet(true);
    this.column2 = column2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdStuff(AdStuff other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.ad_stuff_id = other.ad_stuff_id;
    this.uid = other.uid;
    this.plan_id = other.plan_id;
    this.group_id = other.group_id;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMedia_name()) {
      this.media_name = other.media_name;
    }
    if (other.isSetMedia_type()) {
      this.media_type = other.media_type;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.width = other.width;
    this.height = other.height;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetImage_url()) {
      this.image_url = other.image_url;
    }
    if (other.isSetThumb_url()) {
      this.thumb_url = other.thumb_url;
    }
    if (other.isSetCrop_url()) {
      this.crop_url = other.crop_url;
    }
    if (other.isSetLanding_page()) {
      this.landing_page = other.landing_page;
    }
    this.ctime = other.ctime;
    this.mtime = other.mtime;
    this.size = other.size;
    this.version = other.version;
    this.has_text = other.has_text;
    if (other.isSetShow_js()) {
      this.show_js = other.show_js;
    }
    if (other.isSetClick_js()) {
      this.click_js = other.click_js;
    }
    this.apply_date = other.apply_date;
    this.column1 = other.column1;
    if (other.isSetColumn2()) {
      this.column2 = other.column2;
    }
  }

  public AdStuff deepCopy() {
    return new AdStuff(this);
  }

  @Override
  public void clear() {
    setAd_stuff_idIsSet(false);
    this.ad_stuff_id = 0;
    setUidIsSet(false);
    this.uid = 0;
    setPlan_idIsSet(false);
    this.plan_id = 0;
    setGroup_idIsSet(false);
    this.group_id = 0;
    this.status = null;
    this.name = null;
    this.media_name = null;
    this.media_type = null;
    this.type = null;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.title = null;
    this.description = null;
    this.image_url = null;
    this.thumb_url = null;
    this.crop_url = null;
    this.landing_page = null;
    setCtimeIsSet(false);
    this.ctime = 0;
    setMtimeIsSet(false);
    this.mtime = 0;
    setSizeIsSet(false);
    this.size = 0;
    setVersionIsSet(false);
    this.version = 0;
    setHas_textIsSet(false);
    this.has_text = 0;
    this.show_js = null;
    this.click_js = null;
    setApply_dateIsSet(false);
    this.apply_date = 0;
    setColumn1IsSet(false);
    this.column1 = 0;
    this.column2 = null;
  }

  public int getAd_stuff_id() {
    return this.ad_stuff_id;
  }

  public AdStuff setAd_stuff_id(int ad_stuff_id) {
    this.ad_stuff_id = ad_stuff_id;
    setAd_stuff_idIsSet(true);
    return this;
  }

  public void unsetAd_stuff_id() {
    __isset_bit_vector.clear(__AD_STUFF_ID_ISSET_ID);
  }

  /** Returns true if field ad_stuff_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAd_stuff_id() {
    return __isset_bit_vector.get(__AD_STUFF_ID_ISSET_ID);
  }

  public void setAd_stuff_idIsSet(boolean value) {
    __isset_bit_vector.set(__AD_STUFF_ID_ISSET_ID, value);
  }

  public int getUid() {
    return this.uid;
  }

  public AdStuff setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public int getPlan_id() {
    return this.plan_id;
  }

  public AdStuff setPlan_id(int plan_id) {
    this.plan_id = plan_id;
    setPlan_idIsSet(true);
    return this;
  }

  public void unsetPlan_id() {
    __isset_bit_vector.clear(__PLAN_ID_ISSET_ID);
  }

  /** Returns true if field plan_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_id() {
    return __isset_bit_vector.get(__PLAN_ID_ISSET_ID);
  }

  public void setPlan_idIsSet(boolean value) {
    __isset_bit_vector.set(__PLAN_ID_ISSET_ID, value);
  }

  public int getGroup_id() {
    return this.group_id;
  }

  public AdStuff setGroup_id(int group_id) {
    this.group_id = group_id;
    setGroup_idIsSet(true);
    return this;
  }

  public void unsetGroup_id() {
    __isset_bit_vector.clear(__GROUP_ID_ISSET_ID);
  }

  /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_id() {
    return __isset_bit_vector.get(__GROUP_ID_ISSET_ID);
  }

  public void setGroup_idIsSet(boolean value) {
    __isset_bit_vector.set(__GROUP_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.adp.java.AdStatus
   */
  public com.adp.java.AdStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.adp.java.AdStatus
   */
  public AdStuff setStatus(com.adp.java.AdStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public AdStuff setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getMedia_name() {
    return this.media_name;
  }

  public AdStuff setMedia_name(String media_name) {
    this.media_name = media_name;
    return this;
  }

  public void unsetMedia_name() {
    this.media_name = null;
  }

  /** Returns true if field media_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_name() {
    return this.media_name != null;
  }

  public void setMedia_nameIsSet(boolean value) {
    if (!value) {
      this.media_name = null;
    }
  }

  /**
   * 
   * @see com.adp.java.NetWorkType
   */
  public com.adp.java.NetWorkType getMedia_type() {
    return this.media_type;
  }

  /**
   * 
   * @see com.adp.java.NetWorkType
   */
  public AdStuff setMedia_type(com.adp.java.NetWorkType media_type) {
    this.media_type = media_type;
    return this;
  }

  public void unsetMedia_type() {
    this.media_type = null;
  }

  /** Returns true if field media_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_type() {
    return this.media_type != null;
  }

  public void setMedia_typeIsSet(boolean value) {
    if (!value) {
      this.media_type = null;
    }
  }

  /**
   * 
   * @see com.adp.java.StuffType
   */
  public com.adp.java.StuffType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.adp.java.StuffType
   */
  public AdStuff setType(com.adp.java.StuffType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getWidth() {
    return this.width;
  }

  public AdStuff setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bit_vector.clear(__WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return __isset_bit_vector.get(__WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bit_vector.set(__WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public AdStuff setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bit_vector.clear(__HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return __isset_bit_vector.get(__HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bit_vector.set(__HEIGHT_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public AdStuff setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public AdStuff setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getImage_url() {
    return this.image_url;
  }

  public AdStuff setImage_url(String image_url) {
    this.image_url = image_url;
    return this;
  }

  public void unsetImage_url() {
    this.image_url = null;
  }

  /** Returns true if field image_url is set (has been assigned a value) and false otherwise */
  public boolean isSetImage_url() {
    return this.image_url != null;
  }

  public void setImage_urlIsSet(boolean value) {
    if (!value) {
      this.image_url = null;
    }
  }

  public String getThumb_url() {
    return this.thumb_url;
  }

  public AdStuff setThumb_url(String thumb_url) {
    this.thumb_url = thumb_url;
    return this;
  }

  public void unsetThumb_url() {
    this.thumb_url = null;
  }

  /** Returns true if field thumb_url is set (has been assigned a value) and false otherwise */
  public boolean isSetThumb_url() {
    return this.thumb_url != null;
  }

  public void setThumb_urlIsSet(boolean value) {
    if (!value) {
      this.thumb_url = null;
    }
  }

  public String getCrop_url() {
    return this.crop_url;
  }

  public AdStuff setCrop_url(String crop_url) {
    this.crop_url = crop_url;
    return this;
  }

  public void unsetCrop_url() {
    this.crop_url = null;
  }

  /** Returns true if field crop_url is set (has been assigned a value) and false otherwise */
  public boolean isSetCrop_url() {
    return this.crop_url != null;
  }

  public void setCrop_urlIsSet(boolean value) {
    if (!value) {
      this.crop_url = null;
    }
  }

  public String getLanding_page() {
    return this.landing_page;
  }

  public AdStuff setLanding_page(String landing_page) {
    this.landing_page = landing_page;
    return this;
  }

  public void unsetLanding_page() {
    this.landing_page = null;
  }

  /** Returns true if field landing_page is set (has been assigned a value) and false otherwise */
  public boolean isSetLanding_page() {
    return this.landing_page != null;
  }

  public void setLanding_pageIsSet(boolean value) {
    if (!value) {
      this.landing_page = null;
    }
  }

  public int getCtime() {
    return this.ctime;
  }

  public AdStuff setCtime(int ctime) {
    this.ctime = ctime;
    setCtimeIsSet(true);
    return this;
  }

  public void unsetCtime() {
    __isset_bit_vector.clear(__CTIME_ISSET_ID);
  }

  /** Returns true if field ctime is set (has been assigned a value) and false otherwise */
  public boolean isSetCtime() {
    return __isset_bit_vector.get(__CTIME_ISSET_ID);
  }

  public void setCtimeIsSet(boolean value) {
    __isset_bit_vector.set(__CTIME_ISSET_ID, value);
  }

  public int getMtime() {
    return this.mtime;
  }

  public AdStuff setMtime(int mtime) {
    this.mtime = mtime;
    setMtimeIsSet(true);
    return this;
  }

  public void unsetMtime() {
    __isset_bit_vector.clear(__MTIME_ISSET_ID);
  }

  /** Returns true if field mtime is set (has been assigned a value) and false otherwise */
  public boolean isSetMtime() {
    return __isset_bit_vector.get(__MTIME_ISSET_ID);
  }

  public void setMtimeIsSet(boolean value) {
    __isset_bit_vector.set(__MTIME_ISSET_ID, value);
  }

  public int getSize() {
    return this.size;
  }

  public AdStuff setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bit_vector.clear(__SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return __isset_bit_vector.get(__SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bit_vector.set(__SIZE_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public AdStuff setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bit_vector.clear(__VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return __isset_bit_vector.get(__VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bit_vector.set(__VERSION_ISSET_ID, value);
  }

  public int getHas_text() {
    return this.has_text;
  }

  public AdStuff setHas_text(int has_text) {
    this.has_text = has_text;
    setHas_textIsSet(true);
    return this;
  }

  public void unsetHas_text() {
    __isset_bit_vector.clear(__HAS_TEXT_ISSET_ID);
  }

  /** Returns true if field has_text is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_text() {
    return __isset_bit_vector.get(__HAS_TEXT_ISSET_ID);
  }

  public void setHas_textIsSet(boolean value) {
    __isset_bit_vector.set(__HAS_TEXT_ISSET_ID, value);
  }

  public String getShow_js() {
    return this.show_js;
  }

  public AdStuff setShow_js(String show_js) {
    this.show_js = show_js;
    return this;
  }

  public void unsetShow_js() {
    this.show_js = null;
  }

  /** Returns true if field show_js is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_js() {
    return this.show_js != null;
  }

  public void setShow_jsIsSet(boolean value) {
    if (!value) {
      this.show_js = null;
    }
  }

  public String getClick_js() {
    return this.click_js;
  }

  public AdStuff setClick_js(String click_js) {
    this.click_js = click_js;
    return this;
  }

  public void unsetClick_js() {
    this.click_js = null;
  }

  /** Returns true if field click_js is set (has been assigned a value) and false otherwise */
  public boolean isSetClick_js() {
    return this.click_js != null;
  }

  public void setClick_jsIsSet(boolean value) {
    if (!value) {
      this.click_js = null;
    }
  }

  public int getApply_date() {
    return this.apply_date;
  }

  public AdStuff setApply_date(int apply_date) {
    this.apply_date = apply_date;
    setApply_dateIsSet(true);
    return this;
  }

  public void unsetApply_date() {
    __isset_bit_vector.clear(__APPLY_DATE_ISSET_ID);
  }

  /** Returns true if field apply_date is set (has been assigned a value) and false otherwise */
  public boolean isSetApply_date() {
    return __isset_bit_vector.get(__APPLY_DATE_ISSET_ID);
  }

  public void setApply_dateIsSet(boolean value) {
    __isset_bit_vector.set(__APPLY_DATE_ISSET_ID, value);
  }

  public int getColumn1() {
    return this.column1;
  }

  public AdStuff setColumn1(int column1) {
    this.column1 = column1;
    setColumn1IsSet(true);
    return this;
  }

  public void unsetColumn1() {
    __isset_bit_vector.clear(__COLUMN1_ISSET_ID);
  }

  /** Returns true if field column1 is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn1() {
    return __isset_bit_vector.get(__COLUMN1_ISSET_ID);
  }

  public void setColumn1IsSet(boolean value) {
    __isset_bit_vector.set(__COLUMN1_ISSET_ID, value);
  }

  public String getColumn2() {
    return this.column2;
  }

  public AdStuff setColumn2(String column2) {
    this.column2 = column2;
    return this;
  }

  public void unsetColumn2() {
    this.column2 = null;
  }

  /** Returns true if field column2 is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn2() {
    return this.column2 != null;
  }

  public void setColumn2IsSet(boolean value) {
    if (!value) {
      this.column2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_STUFF_ID:
      if (value == null) {
        unsetAd_stuff_id();
      } else {
        setAd_stuff_id((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case PLAN_ID:
      if (value == null) {
        unsetPlan_id();
      } else {
        setPlan_id((Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroup_id();
      } else {
        setGroup_id((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.adp.java.AdStatus)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MEDIA_NAME:
      if (value == null) {
        unsetMedia_name();
      } else {
        setMedia_name((String)value);
      }
      break;

    case MEDIA_TYPE:
      if (value == null) {
        unsetMedia_type();
      } else {
        setMedia_type((com.adp.java.NetWorkType)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.adp.java.StuffType)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImage_url();
      } else {
        setImage_url((String)value);
      }
      break;

    case THUMB_URL:
      if (value == null) {
        unsetThumb_url();
      } else {
        setThumb_url((String)value);
      }
      break;

    case CROP_URL:
      if (value == null) {
        unsetCrop_url();
      } else {
        setCrop_url((String)value);
      }
      break;

    case LANDING_PAGE:
      if (value == null) {
        unsetLanding_page();
      } else {
        setLanding_page((String)value);
      }
      break;

    case CTIME:
      if (value == null) {
        unsetCtime();
      } else {
        setCtime((Integer)value);
      }
      break;

    case MTIME:
      if (value == null) {
        unsetMtime();
      } else {
        setMtime((Integer)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case HAS_TEXT:
      if (value == null) {
        unsetHas_text();
      } else {
        setHas_text((Integer)value);
      }
      break;

    case SHOW_JS:
      if (value == null) {
        unsetShow_js();
      } else {
        setShow_js((String)value);
      }
      break;

    case CLICK_JS:
      if (value == null) {
        unsetClick_js();
      } else {
        setClick_js((String)value);
      }
      break;

    case APPLY_DATE:
      if (value == null) {
        unsetApply_date();
      } else {
        setApply_date((Integer)value);
      }
      break;

    case COLUMN1:
      if (value == null) {
        unsetColumn1();
      } else {
        setColumn1((Integer)value);
      }
      break;

    case COLUMN2:
      if (value == null) {
        unsetColumn2();
      } else {
        setColumn2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_STUFF_ID:
      return Integer.valueOf(getAd_stuff_id());

    case UID:
      return Integer.valueOf(getUid());

    case PLAN_ID:
      return Integer.valueOf(getPlan_id());

    case GROUP_ID:
      return Integer.valueOf(getGroup_id());

    case STATUS:
      return getStatus();

    case NAME:
      return getName();

    case MEDIA_NAME:
      return getMedia_name();

    case MEDIA_TYPE:
      return getMedia_type();

    case TYPE:
      return getType();

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case TITLE:
      return getTitle();

    case DESCRIPTION:
      return getDescription();

    case IMAGE_URL:
      return getImage_url();

    case THUMB_URL:
      return getThumb_url();

    case CROP_URL:
      return getCrop_url();

    case LANDING_PAGE:
      return getLanding_page();

    case CTIME:
      return Integer.valueOf(getCtime());

    case MTIME:
      return Integer.valueOf(getMtime());

    case SIZE:
      return Integer.valueOf(getSize());

    case VERSION:
      return Integer.valueOf(getVersion());

    case HAS_TEXT:
      return Integer.valueOf(getHas_text());

    case SHOW_JS:
      return getShow_js();

    case CLICK_JS:
      return getClick_js();

    case APPLY_DATE:
      return Integer.valueOf(getApply_date());

    case COLUMN1:
      return Integer.valueOf(getColumn1());

    case COLUMN2:
      return getColumn2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_STUFF_ID:
      return isSetAd_stuff_id();
    case UID:
      return isSetUid();
    case PLAN_ID:
      return isSetPlan_id();
    case GROUP_ID:
      return isSetGroup_id();
    case STATUS:
      return isSetStatus();
    case NAME:
      return isSetName();
    case MEDIA_NAME:
      return isSetMedia_name();
    case MEDIA_TYPE:
      return isSetMedia_type();
    case TYPE:
      return isSetType();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case TITLE:
      return isSetTitle();
    case DESCRIPTION:
      return isSetDescription();
    case IMAGE_URL:
      return isSetImage_url();
    case THUMB_URL:
      return isSetThumb_url();
    case CROP_URL:
      return isSetCrop_url();
    case LANDING_PAGE:
      return isSetLanding_page();
    case CTIME:
      return isSetCtime();
    case MTIME:
      return isSetMtime();
    case SIZE:
      return isSetSize();
    case VERSION:
      return isSetVersion();
    case HAS_TEXT:
      return isSetHas_text();
    case SHOW_JS:
      return isSetShow_js();
    case CLICK_JS:
      return isSetClick_js();
    case APPLY_DATE:
      return isSetApply_date();
    case COLUMN1:
      return isSetColumn1();
    case COLUMN2:
      return isSetColumn2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdStuff)
      return this.equals((AdStuff)that);
    return false;
  }

  public boolean equals(AdStuff that) {
    if (that == null)
      return false;

    boolean this_present_ad_stuff_id = true;
    boolean that_present_ad_stuff_id = true;
    if (this_present_ad_stuff_id || that_present_ad_stuff_id) {
      if (!(this_present_ad_stuff_id && that_present_ad_stuff_id))
        return false;
      if (this.ad_stuff_id != that.ad_stuff_id)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_plan_id = true;
    boolean that_present_plan_id = true;
    if (this_present_plan_id || that_present_plan_id) {
      if (!(this_present_plan_id && that_present_plan_id))
        return false;
      if (this.plan_id != that.plan_id)
        return false;
    }

    boolean this_present_group_id = true;
    boolean that_present_group_id = true;
    if (this_present_group_id || that_present_group_id) {
      if (!(this_present_group_id && that_present_group_id))
        return false;
      if (this.group_id != that.group_id)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_media_name = true && this.isSetMedia_name();
    boolean that_present_media_name = true && that.isSetMedia_name();
    if (this_present_media_name || that_present_media_name) {
      if (!(this_present_media_name && that_present_media_name))
        return false;
      if (!this.media_name.equals(that.media_name))
        return false;
    }

    boolean this_present_media_type = true && this.isSetMedia_type();
    boolean that_present_media_type = true && that.isSetMedia_type();
    if (this_present_media_type || that_present_media_type) {
      if (!(this_present_media_type && that_present_media_type))
        return false;
      if (!this.media_type.equals(that.media_type))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_image_url = true && this.isSetImage_url();
    boolean that_present_image_url = true && that.isSetImage_url();
    if (this_present_image_url || that_present_image_url) {
      if (!(this_present_image_url && that_present_image_url))
        return false;
      if (!this.image_url.equals(that.image_url))
        return false;
    }

    boolean this_present_thumb_url = true && this.isSetThumb_url();
    boolean that_present_thumb_url = true && that.isSetThumb_url();
    if (this_present_thumb_url || that_present_thumb_url) {
      if (!(this_present_thumb_url && that_present_thumb_url))
        return false;
      if (!this.thumb_url.equals(that.thumb_url))
        return false;
    }

    boolean this_present_crop_url = true && this.isSetCrop_url();
    boolean that_present_crop_url = true && that.isSetCrop_url();
    if (this_present_crop_url || that_present_crop_url) {
      if (!(this_present_crop_url && that_present_crop_url))
        return false;
      if (!this.crop_url.equals(that.crop_url))
        return false;
    }

    boolean this_present_landing_page = true && this.isSetLanding_page();
    boolean that_present_landing_page = true && that.isSetLanding_page();
    if (this_present_landing_page || that_present_landing_page) {
      if (!(this_present_landing_page && that_present_landing_page))
        return false;
      if (!this.landing_page.equals(that.landing_page))
        return false;
    }

    boolean this_present_ctime = true;
    boolean that_present_ctime = true;
    if (this_present_ctime || that_present_ctime) {
      if (!(this_present_ctime && that_present_ctime))
        return false;
      if (this.ctime != that.ctime)
        return false;
    }

    boolean this_present_mtime = true;
    boolean that_present_mtime = true;
    if (this_present_mtime || that_present_mtime) {
      if (!(this_present_mtime && that_present_mtime))
        return false;
      if (this.mtime != that.mtime)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_has_text = true;
    boolean that_present_has_text = true;
    if (this_present_has_text || that_present_has_text) {
      if (!(this_present_has_text && that_present_has_text))
        return false;
      if (this.has_text != that.has_text)
        return false;
    }

    boolean this_present_show_js = true && this.isSetShow_js();
    boolean that_present_show_js = true && that.isSetShow_js();
    if (this_present_show_js || that_present_show_js) {
      if (!(this_present_show_js && that_present_show_js))
        return false;
      if (!this.show_js.equals(that.show_js))
        return false;
    }

    boolean this_present_click_js = true && this.isSetClick_js();
    boolean that_present_click_js = true && that.isSetClick_js();
    if (this_present_click_js || that_present_click_js) {
      if (!(this_present_click_js && that_present_click_js))
        return false;
      if (!this.click_js.equals(that.click_js))
        return false;
    }

    boolean this_present_apply_date = true;
    boolean that_present_apply_date = true;
    if (this_present_apply_date || that_present_apply_date) {
      if (!(this_present_apply_date && that_present_apply_date))
        return false;
      if (this.apply_date != that.apply_date)
        return false;
    }

    boolean this_present_column1 = true;
    boolean that_present_column1 = true;
    if (this_present_column1 || that_present_column1) {
      if (!(this_present_column1 && that_present_column1))
        return false;
      if (this.column1 != that.column1)
        return false;
    }

    boolean this_present_column2 = true && this.isSetColumn2();
    boolean that_present_column2 = true && that.isSetColumn2();
    if (this_present_column2 || that_present_column2) {
      if (!(this_present_column2 && that_present_column2))
        return false;
      if (!this.column2.equals(that.column2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AdStuff other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdStuff typedOther = (AdStuff)other;

    lastComparison = Boolean.valueOf(isSetAd_stuff_id()).compareTo(typedOther.isSetAd_stuff_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAd_stuff_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad_stuff_id, typedOther.ad_stuff_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlan_id()).compareTo(typedOther.isSetPlan_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_id, typedOther.plan_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(typedOther.isSetGroup_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, typedOther.group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_name()).compareTo(typedOther.isSetMedia_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_name, typedOther.media_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_type()).compareTo(typedOther.isSetMedia_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_type, typedOther.media_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage_url()).compareTo(typedOther.isSetImage_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_url, typedOther.image_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThumb_url()).compareTo(typedOther.isSetThumb_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumb_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumb_url, typedOther.thumb_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrop_url()).compareTo(typedOther.isSetCrop_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrop_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crop_url, typedOther.crop_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanding_page()).compareTo(typedOther.isSetLanding_page());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanding_page()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landing_page, typedOther.landing_page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtime()).compareTo(typedOther.isSetCtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctime, typedOther.ctime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMtime()).compareTo(typedOther.isSetMtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtime, typedOther.mtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_text()).compareTo(typedOther.isSetHas_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_text, typedOther.has_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_js()).compareTo(typedOther.isSetShow_js());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_js()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_js, typedOther.show_js);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClick_js()).compareTo(typedOther.isSetClick_js());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClick_js()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click_js, typedOther.click_js);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApply_date()).compareTo(typedOther.isSetApply_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApply_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apply_date, typedOther.apply_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn1()).compareTo(typedOther.isSetColumn1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column1, typedOther.column1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn2()).compareTo(typedOther.isSetColumn2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column2, typedOther.column2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdStuff(");
    boolean first = true;

    sb.append("ad_stuff_id:");
    sb.append(this.ad_stuff_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plan_id:");
    sb.append(this.plan_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("group_id:");
    sb.append(this.group_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("media_name:");
    if (this.media_name == null) {
      sb.append("null");
    } else {
      sb.append(this.media_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("media_type:");
    if (this.media_type == null) {
      sb.append("null");
    } else {
      sb.append(this.media_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image_url:");
    if (this.image_url == null) {
      sb.append("null");
    } else {
      sb.append(this.image_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thumb_url:");
    if (this.thumb_url == null) {
      sb.append("null");
    } else {
      sb.append(this.thumb_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crop_url:");
    if (this.crop_url == null) {
      sb.append("null");
    } else {
      sb.append(this.crop_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("landing_page:");
    if (this.landing_page == null) {
      sb.append("null");
    } else {
      sb.append(this.landing_page);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ctime:");
    sb.append(this.ctime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mtime:");
    sb.append(this.mtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_text:");
    sb.append(this.has_text);
    first = false;
    if (!first) sb.append(", ");
    sb.append("show_js:");
    if (this.show_js == null) {
      sb.append("null");
    } else {
      sb.append(this.show_js);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("click_js:");
    if (this.click_js == null) {
      sb.append("null");
    } else {
      sb.append(this.click_js);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apply_date:");
    sb.append(this.apply_date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column1:");
    sb.append(this.column1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column2:");
    if (this.column2 == null) {
      sb.append("null");
    } else {
      sb.append(this.column2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdStuffStandardSchemeFactory implements SchemeFactory {
    public AdStuffStandardScheme getScheme() {
      return new AdStuffStandardScheme();
    }
  }

  private static class AdStuffStandardScheme extends StandardScheme<AdStuff> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdStuff struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_STUFF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ad_stuff_id = iprot.readI32();
              struct.setAd_stuff_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plan_id = iprot.readI32();
              struct.setPlan_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.group_id = iprot.readI32();
              struct.setGroup_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.adp.java.AdStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEDIA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_name = iprot.readString();
              struct.setMedia_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEDIA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.media_type = com.adp.java.NetWorkType.findByValue(iprot.readI32());
              struct.setMedia_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.adp.java.StuffType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image_url = iprot.readString();
              struct.setImage_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // THUMB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumb_url = iprot.readString();
              struct.setThumb_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CROP_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.crop_url = iprot.readString();
              struct.setCrop_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LANDING_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.landing_page = iprot.readString();
              struct.setLanding_pageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ctime = iprot.readI32();
              struct.setCtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mtime = iprot.readI32();
              struct.setMtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // HAS_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.has_text = iprot.readI32();
              struct.setHas_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SHOW_JS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.show_js = iprot.readString();
              struct.setShow_jsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CLICK_JS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.click_js = iprot.readString();
              struct.setClick_jsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // APPLY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.apply_date = iprot.readI32();
              struct.setApply_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // COLUMN1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.column1 = iprot.readI32();
              struct.setColumn1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // COLUMN2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column2 = iprot.readString();
              struct.setColumn2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdStuff struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_STUFF_ID_FIELD_DESC);
      oprot.writeI32(struct.ad_stuff_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.plan_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.group_id);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.media_name != null) {
        oprot.writeFieldBegin(MEDIA_NAME_FIELD_DESC);
        oprot.writeString(struct.media_name);
        oprot.writeFieldEnd();
      }
      if (struct.media_type != null) {
        oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.media_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.image_url != null) {
        oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.image_url);
        oprot.writeFieldEnd();
      }
      if (struct.thumb_url != null) {
        oprot.writeFieldBegin(THUMB_URL_FIELD_DESC);
        oprot.writeString(struct.thumb_url);
        oprot.writeFieldEnd();
      }
      if (struct.crop_url != null) {
        oprot.writeFieldBegin(CROP_URL_FIELD_DESC);
        oprot.writeString(struct.crop_url);
        oprot.writeFieldEnd();
      }
      if (struct.landing_page != null) {
        oprot.writeFieldBegin(LANDING_PAGE_FIELD_DESC);
        oprot.writeString(struct.landing_page);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CTIME_FIELD_DESC);
      oprot.writeI32(struct.ctime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MTIME_FIELD_DESC);
      oprot.writeI32(struct.mtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_TEXT_FIELD_DESC);
      oprot.writeI32(struct.has_text);
      oprot.writeFieldEnd();
      if (struct.show_js != null) {
        oprot.writeFieldBegin(SHOW_JS_FIELD_DESC);
        oprot.writeString(struct.show_js);
        oprot.writeFieldEnd();
      }
      if (struct.click_js != null) {
        oprot.writeFieldBegin(CLICK_JS_FIELD_DESC);
        oprot.writeString(struct.click_js);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_DATE_FIELD_DESC);
      oprot.writeI32(struct.apply_date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLUMN1_FIELD_DESC);
      oprot.writeI32(struct.column1);
      oprot.writeFieldEnd();
      if (struct.column2 != null) {
        oprot.writeFieldBegin(COLUMN2_FIELD_DESC);
        oprot.writeString(struct.column2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdStuffTupleSchemeFactory implements SchemeFactory {
    public AdStuffTupleScheme getScheme() {
      return new AdStuffTupleScheme();
    }
  }

  private static class AdStuffTupleScheme extends TupleScheme<AdStuff> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdStuff struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAd_stuff_id()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetPlan_id()) {
        optionals.set(2);
      }
      if (struct.isSetGroup_id()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetMedia_name()) {
        optionals.set(6);
      }
      if (struct.isSetMedia_type()) {
        optionals.set(7);
      }
      if (struct.isSetType()) {
        optionals.set(8);
      }
      if (struct.isSetWidth()) {
        optionals.set(9);
      }
      if (struct.isSetHeight()) {
        optionals.set(10);
      }
      if (struct.isSetTitle()) {
        optionals.set(11);
      }
      if (struct.isSetDescription()) {
        optionals.set(12);
      }
      if (struct.isSetImage_url()) {
        optionals.set(13);
      }
      if (struct.isSetThumb_url()) {
        optionals.set(14);
      }
      if (struct.isSetCrop_url()) {
        optionals.set(15);
      }
      if (struct.isSetLanding_page()) {
        optionals.set(16);
      }
      if (struct.isSetCtime()) {
        optionals.set(17);
      }
      if (struct.isSetMtime()) {
        optionals.set(18);
      }
      if (struct.isSetSize()) {
        optionals.set(19);
      }
      if (struct.isSetVersion()) {
        optionals.set(20);
      }
      if (struct.isSetHas_text()) {
        optionals.set(21);
      }
      if (struct.isSetShow_js()) {
        optionals.set(22);
      }
      if (struct.isSetClick_js()) {
        optionals.set(23);
      }
      if (struct.isSetApply_date()) {
        optionals.set(24);
      }
      if (struct.isSetColumn1()) {
        optionals.set(25);
      }
      if (struct.isSetColumn2()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetAd_stuff_id()) {
        oprot.writeI32(struct.ad_stuff_id);
      }
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetPlan_id()) {
        oprot.writeI32(struct.plan_id);
      }
      if (struct.isSetGroup_id()) {
        oprot.writeI32(struct.group_id);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMedia_name()) {
        oprot.writeString(struct.media_name);
      }
      if (struct.isSetMedia_type()) {
        oprot.writeI32(struct.media_type.getValue());
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetImage_url()) {
        oprot.writeString(struct.image_url);
      }
      if (struct.isSetThumb_url()) {
        oprot.writeString(struct.thumb_url);
      }
      if (struct.isSetCrop_url()) {
        oprot.writeString(struct.crop_url);
      }
      if (struct.isSetLanding_page()) {
        oprot.writeString(struct.landing_page);
      }
      if (struct.isSetCtime()) {
        oprot.writeI32(struct.ctime);
      }
      if (struct.isSetMtime()) {
        oprot.writeI32(struct.mtime);
      }
      if (struct.isSetSize()) {
        oprot.writeI32(struct.size);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetHas_text()) {
        oprot.writeI32(struct.has_text);
      }
      if (struct.isSetShow_js()) {
        oprot.writeString(struct.show_js);
      }
      if (struct.isSetClick_js()) {
        oprot.writeString(struct.click_js);
      }
      if (struct.isSetApply_date()) {
        oprot.writeI32(struct.apply_date);
      }
      if (struct.isSetColumn1()) {
        oprot.writeI32(struct.column1);
      }
      if (struct.isSetColumn2()) {
        oprot.writeString(struct.column2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdStuff struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.ad_stuff_id = iprot.readI32();
        struct.setAd_stuff_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.plan_id = iprot.readI32();
        struct.setPlan_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.group_id = iprot.readI32();
        struct.setGroup_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = com.adp.java.AdStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.media_name = iprot.readString();
        struct.setMedia_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.media_type = com.adp.java.NetWorkType.findByValue(iprot.readI32());
        struct.setMedia_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.type = com.adp.java.StuffType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(10)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(11)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(12)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.image_url = iprot.readString();
        struct.setImage_urlIsSet(true);
      }
      if (incoming.get(14)) {
        struct.thumb_url = iprot.readString();
        struct.setThumb_urlIsSet(true);
      }
      if (incoming.get(15)) {
        struct.crop_url = iprot.readString();
        struct.setCrop_urlIsSet(true);
      }
      if (incoming.get(16)) {
        struct.landing_page = iprot.readString();
        struct.setLanding_pageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ctime = iprot.readI32();
        struct.setCtimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.mtime = iprot.readI32();
        struct.setMtimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.size = iprot.readI32();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(21)) {
        struct.has_text = iprot.readI32();
        struct.setHas_textIsSet(true);
      }
      if (incoming.get(22)) {
        struct.show_js = iprot.readString();
        struct.setShow_jsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.click_js = iprot.readString();
        struct.setClick_jsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.apply_date = iprot.readI32();
        struct.setApply_dateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.column1 = iprot.readI32();
        struct.setColumn1IsSet(true);
      }
      if (incoming.get(26)) {
        struct.column2 = iprot.readString();
        struct.setColumn2IsSet(true);
      }
    }
  }

}

