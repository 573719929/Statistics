#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
import Shared.ttypes
import AdInfoService.ttypes
import AdGroup.ttypes
import StuffInfo.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class AdPlanType:
  """
  Attributes:
   - type_id
   - type_name
   - cate_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type_id', None, None, ), # 1
    (2, TType.STRING, 'type_name', None, None, ), # 2
    (3, TType.STRING, 'cate_name', None, None, ), # 3
  )

  def __init__(self, type_id=None, type_name=None, cate_name=None,):
    self.type_id = type_id
    self.type_name = type_name
    self.cate_name = cate_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cate_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdPlanType')
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 1)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 2)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    if self.cate_name is not None:
      oprot.writeFieldBegin('cate_name', TType.STRING, 3)
      oprot.writeString(self.cate_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdPlan:
  """
  Attributes:
   - plan_id
   - plan_name
   - uid
   - vocation
   - billing_type
   - budget
   - currency
   - start_date
   - end_date
   - is_date_limit
   - day_max
   - adtime
   - enable
   - ctime
   - mtime
   - pop_result
   - release_type
   - smooth_control
   - priority
   - net_type
   - cpm
   - daily_consum
   - real_consum
   - cost
   - cpc
   - colum1
   - colum2
   - media_name
   - version
   - order_policy
   - all_day_or_not
   - intervals
   - time_interval
   - day_num
   - show_num
   - type_id
   - verified_or_not
   - type_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'plan_id', None, None, ), # 1
    (2, TType.STRING, 'plan_name', None, None, ), # 2
    (3, TType.I32, 'uid', None, None, ), # 3
    (4, TType.STRING, 'vocation', None, None, ), # 4
    (5, TType.I32, 'billing_type', None,     1, ), # 5
    (6, TType.DOUBLE, 'budget', None, None, ), # 6
    (7, TType.I32, 'currency', None,     1, ), # 7
    (8, TType.I32, 'start_date', None, None, ), # 8
    (9, TType.I32, 'end_date', None, None, ), # 9
    (10, TType.I32, 'is_date_limit', None, None, ), # 10
    (11, TType.I32, 'day_max', None, None, ), # 11
    (12, TType.STRING, 'adtime', None, None, ), # 12
    (13, TType.I32, 'enable', None,     1, ), # 13
    (14, TType.I32, 'ctime', None, None, ), # 14
    (15, TType.I32, 'mtime', None, None, ), # 15
    (16, TType.I32, 'pop_result', None, None, ), # 16
    (17, TType.I32, 'release_type', None,     2, ), # 17
    (18, TType.I32, 'smooth_control', None, None, ), # 18
    (19, TType.I32, 'priority', None,     3, ), # 19
    (20, TType.I32, 'net_type', None,     1, ), # 20
    (21, TType.DOUBLE, 'cpm', None, None, ), # 21
    (22, TType.DOUBLE, 'daily_consum', None, None, ), # 22
    (23, TType.DOUBLE, 'real_consum', None, None, ), # 23
    (24, TType.DOUBLE, 'cost', None, None, ), # 24
    (25, TType.DOUBLE, 'cpc', None, None, ), # 25
    (26, TType.I32, 'colum1', None, None, ), # 26
    (27, TType.STRING, 'colum2', None, None, ), # 27
    (28, TType.STRING, 'media_name', None, None, ), # 28
    (29, TType.I32, 'version', None, None, ), # 29
    (30, TType.I32, 'order_policy', None,     1, ), # 30
    (31, TType.I32, 'all_day_or_not', None, None, ), # 31
    (32, TType.STRING, 'intervals', None, None, ), # 32
    (33, TType.I32, 'time_interval', None, None, ), # 33
    (34, TType.I32, 'day_num', None, None, ), # 34
    (35, TType.I32, 'show_num', None, None, ), # 35
    (36, TType.I32, 'type_id', None, None, ), # 36
    (37, TType.I32, 'verified_or_not', None, None, ), # 37
    (38, TType.STRING, 'type_name', None, None, ), # 38
  )

  def __init__(self, plan_id=None, plan_name=None, uid=None, vocation=None, billing_type=thrift_spec[5][4], budget=None, currency=thrift_spec[7][4], start_date=None, end_date=None, is_date_limit=None, day_max=None, adtime=None, enable=thrift_spec[13][4], ctime=None, mtime=None, pop_result=None, release_type=thrift_spec[17][4], smooth_control=None, priority=thrift_spec[19][4], net_type=thrift_spec[20][4], cpm=None, daily_consum=None, real_consum=None, cost=None, cpc=None, colum1=None, colum2=None, media_name=None, version=None, order_policy=thrift_spec[30][4], all_day_or_not=None, intervals=None, time_interval=None, day_num=None, show_num=None, type_id=None, verified_or_not=None, type_name=None,):
    self.plan_id = plan_id
    self.plan_name = plan_name
    self.uid = uid
    self.vocation = vocation
    self.billing_type = billing_type
    self.budget = budget
    self.currency = currency
    self.start_date = start_date
    self.end_date = end_date
    self.is_date_limit = is_date_limit
    self.day_max = day_max
    self.adtime = adtime
    self.enable = enable
    self.ctime = ctime
    self.mtime = mtime
    self.pop_result = pop_result
    self.release_type = release_type
    self.smooth_control = smooth_control
    self.priority = priority
    self.net_type = net_type
    self.cpm = cpm
    self.daily_consum = daily_consum
    self.real_consum = real_consum
    self.cost = cost
    self.cpc = cpc
    self.colum1 = colum1
    self.colum2 = colum2
    self.media_name = media_name
    self.version = version
    self.order_policy = order_policy
    self.all_day_or_not = all_day_or_not
    self.intervals = intervals
    self.time_interval = time_interval
    self.day_num = day_num
    self.show_num = show_num
    self.type_id = type_id
    self.verified_or_not = verified_or_not
    self.type_name = type_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.plan_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.plan_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.vocation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.billing_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.budget = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.currency = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.start_date = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.end_date = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.is_date_limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.day_max = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.adtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.enable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.ctime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.mtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.pop_result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.release_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.smooth_control = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.priority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.net_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.cpm = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.daily_consum = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.real_consum = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.cost = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.cpc = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.colum1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.colum2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.media_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.order_policy = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.all_day_or_not = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.intervals = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.time_interval = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.day_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.show_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.verified_or_not = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.type_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdPlan')
    if self.plan_id is not None:
      oprot.writeFieldBegin('plan_id', TType.I32, 1)
      oprot.writeI32(self.plan_id)
      oprot.writeFieldEnd()
    if self.plan_name is not None:
      oprot.writeFieldBegin('plan_name', TType.STRING, 2)
      oprot.writeString(self.plan_name)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 3)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.vocation is not None:
      oprot.writeFieldBegin('vocation', TType.STRING, 4)
      oprot.writeString(self.vocation)
      oprot.writeFieldEnd()
    if self.billing_type is not None:
      oprot.writeFieldBegin('billing_type', TType.I32, 5)
      oprot.writeI32(self.billing_type)
      oprot.writeFieldEnd()
    if self.budget is not None:
      oprot.writeFieldBegin('budget', TType.DOUBLE, 6)
      oprot.writeDouble(self.budget)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.I32, 7)
      oprot.writeI32(self.currency)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.I32, 8)
      oprot.writeI32(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I32, 9)
      oprot.writeI32(self.end_date)
      oprot.writeFieldEnd()
    if self.is_date_limit is not None:
      oprot.writeFieldBegin('is_date_limit', TType.I32, 10)
      oprot.writeI32(self.is_date_limit)
      oprot.writeFieldEnd()
    if self.day_max is not None:
      oprot.writeFieldBegin('day_max', TType.I32, 11)
      oprot.writeI32(self.day_max)
      oprot.writeFieldEnd()
    if self.adtime is not None:
      oprot.writeFieldBegin('adtime', TType.STRING, 12)
      oprot.writeString(self.adtime)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I32, 13)
      oprot.writeI32(self.enable)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I32, 14)
      oprot.writeI32(self.ctime)
      oprot.writeFieldEnd()
    if self.mtime is not None:
      oprot.writeFieldBegin('mtime', TType.I32, 15)
      oprot.writeI32(self.mtime)
      oprot.writeFieldEnd()
    if self.pop_result is not None:
      oprot.writeFieldBegin('pop_result', TType.I32, 16)
      oprot.writeI32(self.pop_result)
      oprot.writeFieldEnd()
    if self.release_type is not None:
      oprot.writeFieldBegin('release_type', TType.I32, 17)
      oprot.writeI32(self.release_type)
      oprot.writeFieldEnd()
    if self.smooth_control is not None:
      oprot.writeFieldBegin('smooth_control', TType.I32, 18)
      oprot.writeI32(self.smooth_control)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 19)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.net_type is not None:
      oprot.writeFieldBegin('net_type', TType.I32, 20)
      oprot.writeI32(self.net_type)
      oprot.writeFieldEnd()
    if self.cpm is not None:
      oprot.writeFieldBegin('cpm', TType.DOUBLE, 21)
      oprot.writeDouble(self.cpm)
      oprot.writeFieldEnd()
    if self.daily_consum is not None:
      oprot.writeFieldBegin('daily_consum', TType.DOUBLE, 22)
      oprot.writeDouble(self.daily_consum)
      oprot.writeFieldEnd()
    if self.real_consum is not None:
      oprot.writeFieldBegin('real_consum', TType.DOUBLE, 23)
      oprot.writeDouble(self.real_consum)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.DOUBLE, 24)
      oprot.writeDouble(self.cost)
      oprot.writeFieldEnd()
    if self.cpc is not None:
      oprot.writeFieldBegin('cpc', TType.DOUBLE, 25)
      oprot.writeDouble(self.cpc)
      oprot.writeFieldEnd()
    if self.colum1 is not None:
      oprot.writeFieldBegin('colum1', TType.I32, 26)
      oprot.writeI32(self.colum1)
      oprot.writeFieldEnd()
    if self.colum2 is not None:
      oprot.writeFieldBegin('colum2', TType.STRING, 27)
      oprot.writeString(self.colum2)
      oprot.writeFieldEnd()
    if self.media_name is not None:
      oprot.writeFieldBegin('media_name', TType.STRING, 28)
      oprot.writeString(self.media_name)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 29)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.order_policy is not None:
      oprot.writeFieldBegin('order_policy', TType.I32, 30)
      oprot.writeI32(self.order_policy)
      oprot.writeFieldEnd()
    if self.all_day_or_not is not None:
      oprot.writeFieldBegin('all_day_or_not', TType.I32, 31)
      oprot.writeI32(self.all_day_or_not)
      oprot.writeFieldEnd()
    if self.intervals is not None:
      oprot.writeFieldBegin('intervals', TType.STRING, 32)
      oprot.writeString(self.intervals)
      oprot.writeFieldEnd()
    if self.time_interval is not None:
      oprot.writeFieldBegin('time_interval', TType.I32, 33)
      oprot.writeI32(self.time_interval)
      oprot.writeFieldEnd()
    if self.day_num is not None:
      oprot.writeFieldBegin('day_num', TType.I32, 34)
      oprot.writeI32(self.day_num)
      oprot.writeFieldEnd()
    if self.show_num is not None:
      oprot.writeFieldBegin('show_num', TType.I32, 35)
      oprot.writeI32(self.show_num)
      oprot.writeFieldEnd()
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 36)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.verified_or_not is not None:
      oprot.writeFieldBegin('verified_or_not', TType.I32, 37)
      oprot.writeI32(self.verified_or_not)
      oprot.writeFieldEnd()
    if self.type_name is not None:
      oprot.writeFieldBegin('type_name', TType.STRING, 38)
      oprot.writeString(self.type_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdDetail:
  """
  Attributes:
   - adInfos
   - adGroups
   - stuffs
   - adPlan
   - username
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'adInfos', (TType.STRUCT,(AdInfoService.ttypes.AdInfo, AdInfoService.ttypes.AdInfo.thrift_spec)), None, ), # 1
    (2, TType.STRUCT, 'adGroups', (AdGroup.ttypes.AdGroup, AdGroup.ttypes.AdGroup.thrift_spec), None, ), # 2
    (3, TType.LIST, 'stuffs', (TType.STRUCT,(StuffInfo.ttypes.StuffInfo, StuffInfo.ttypes.StuffInfo.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'adPlan', (AdPlan, AdPlan.thrift_spec), None, ), # 4
    (5, TType.STRING, 'username', None, None, ), # 5
  )

  def __init__(self, adInfos=None, adGroups=None, stuffs=None, adPlan=None, username=None,):
    self.adInfos = adInfos
    self.adGroups = adGroups
    self.stuffs = stuffs
    self.adPlan = adPlan
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.adInfos = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = AdInfoService.ttypes.AdInfo()
            _elem5.read(iprot)
            self.adInfos.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.adGroups = AdGroup.ttypes.AdGroup()
          self.adGroups.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.stuffs = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = StuffInfo.ttypes.StuffInfo()
            _elem11.read(iprot)
            self.stuffs.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.adPlan = AdPlan()
          self.adPlan.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdDetail')
    if self.adInfos is not None:
      oprot.writeFieldBegin('adInfos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.adInfos))
      for iter12 in self.adInfos:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.adGroups is not None:
      oprot.writeFieldBegin('adGroups', TType.STRUCT, 2)
      self.adGroups.write(oprot)
      oprot.writeFieldEnd()
    if self.stuffs is not None:
      oprot.writeFieldBegin('stuffs', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.stuffs))
      for iter13 in self.stuffs:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.adPlan is not None:
      oprot.writeFieldBegin('adPlan', TType.STRUCT, 4)
      self.adPlan.write(oprot)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 5)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GroupResponse:
  """
  Attributes:
   - totalSize
   - currentSize
   - pageSize
   - pageNumber
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalSize', None, None, ), # 1
    (2, TType.I32, 'currentSize', None, None, ), # 2
    (3, TType.I32, 'pageSize', None, None, ), # 3
    (4, TType.I32, 'pageNumber', None, None, ), # 4
    (5, TType.LIST, 'data', (TType.STRUCT,(AdPlan, AdPlan.thrift_spec)), None, ), # 5
  )

  def __init__(self, totalSize=None, currentSize=None, pageSize=None, pageNumber=None, data=None,):
    self.totalSize = totalSize
    self.currentSize = currentSize
    self.pageSize = pageSize
    self.pageNumber = pageNumber
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.currentSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.data = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = AdPlan()
            _elem19.read(iprot)
            self.data.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GroupResponse')
    if self.totalSize is not None:
      oprot.writeFieldBegin('totalSize', TType.I32, 1)
      oprot.writeI32(self.totalSize)
      oprot.writeFieldEnd()
    if self.currentSize is not None:
      oprot.writeFieldBegin('currentSize', TType.I32, 2)
      oprot.writeI32(self.currentSize)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 3)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    if self.pageNumber is not None:
      oprot.writeFieldBegin('pageNumber', TType.I32, 4)
      oprot.writeI32(self.pageNumber)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter20 in self.data:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
