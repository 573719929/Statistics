#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import AdPlanService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  GroupResponse getGroupByStatus( uid, AuditStatus st, i32 pageSize, i32 pageNumber)'
  print '  i32 addAdPlan(AdPlan adPlan)'
  print '  i32 delAdPlanById(i32 plan_id)'
  print '  i32 updateAdPlanStatus(i32 plan_id, PlanStatus status)'
  print '   getAdDetailsByParams(i32 uid, i32 plan_id, i32 status, i32 start, i32 end_time)'
  print '  AdDetail getAdDetailByIds(i32 plan_id, i32 group_id)'
  print '  i32 updateAdDetail(AdDetail detail)'
  print '  i32 updateStatusByPid(i32 plan_id)'
  print '   getAdPlansByUid(i32 uid)'
  print '   getAdPlanStatusByPid(i32 plan_id)'
  print '   getAdPlansByUidSid(i32 uid, PlanStatus status)'
  print '  i32 updateAdPlanByUid(i32 uid, PlanStatus status)'
  print '  i32 delAdPlansByUid(i32 uid, PlanStatus status)'
  print '   getAdPlansByPid(i32 plan_id)'
  print '   getAdPlansByPidUid(i32 pid, i32 uid)'
  print '  i32 updateAdPlan(AdPlan adplan)'
  print '  AdPlan getAdPlanByPid(i32 plan_id)'
  print '  i32 getNumOfAdPlanPagesByUid(i32 uid, i32 page_size)'
  print '   getAdPlansByPageIndex(i32 page_index, i32 page_size, i32 uid)'
  print '   getAllAdPlanTypes()'
  print '  i32 updateVerifiedStatus(i32 plan_id, i32 verified_status)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AdPlanService.Client(protocol)
transport.open()

if cmd == 'getGroupByStatus':
  if len(args) != 4:
    print 'getGroupByStatus requires 4 args'
    sys.exit(1)
  pp.pprint(client.getGroupByStatus(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'addAdPlan':
  if len(args) != 1:
    print 'addAdPlan requires 1 args'
    sys.exit(1)
  pp.pprint(client.addAdPlan(eval(args[0]),))

elif cmd == 'delAdPlanById':
  if len(args) != 1:
    print 'delAdPlanById requires 1 args'
    sys.exit(1)
  pp.pprint(client.delAdPlanById(eval(args[0]),))

elif cmd == 'updateAdPlanStatus':
  if len(args) != 2:
    print 'updateAdPlanStatus requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateAdPlanStatus(eval(args[0]),eval(args[1]),))

elif cmd == 'getAdDetailsByParams':
  if len(args) != 5:
    print 'getAdDetailsByParams requires 5 args'
    sys.exit(1)
  pp.pprint(client.getAdDetailsByParams(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'getAdDetailByIds':
  if len(args) != 2:
    print 'getAdDetailByIds requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAdDetailByIds(eval(args[0]),eval(args[1]),))

elif cmd == 'updateAdDetail':
  if len(args) != 1:
    print 'updateAdDetail requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateAdDetail(eval(args[0]),))

elif cmd == 'updateStatusByPid':
  if len(args) != 1:
    print 'updateStatusByPid requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateStatusByPid(eval(args[0]),))

elif cmd == 'getAdPlansByUid':
  if len(args) != 1:
    print 'getAdPlansByUid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAdPlansByUid(eval(args[0]),))

elif cmd == 'getAdPlanStatusByPid':
  if len(args) != 1:
    print 'getAdPlanStatusByPid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAdPlanStatusByPid(eval(args[0]),))

elif cmd == 'getAdPlansByUidSid':
  if len(args) != 2:
    print 'getAdPlansByUidSid requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAdPlansByUidSid(eval(args[0]),eval(args[1]),))

elif cmd == 'updateAdPlanByUid':
  if len(args) != 2:
    print 'updateAdPlanByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateAdPlanByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'delAdPlansByUid':
  if len(args) != 2:
    print 'delAdPlansByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.delAdPlansByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'getAdPlansByPid':
  if len(args) != 1:
    print 'getAdPlansByPid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAdPlansByPid(eval(args[0]),))

elif cmd == 'getAdPlansByPidUid':
  if len(args) != 2:
    print 'getAdPlansByPidUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAdPlansByPidUid(eval(args[0]),eval(args[1]),))

elif cmd == 'updateAdPlan':
  if len(args) != 1:
    print 'updateAdPlan requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateAdPlan(eval(args[0]),))

elif cmd == 'getAdPlanByPid':
  if len(args) != 1:
    print 'getAdPlanByPid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAdPlanByPid(eval(args[0]),))

elif cmd == 'getNumOfAdPlanPagesByUid':
  if len(args) != 2:
    print 'getNumOfAdPlanPagesByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.getNumOfAdPlanPagesByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'getAdPlansByPageIndex':
  if len(args) != 3:
    print 'getAdPlansByPageIndex requires 3 args'
    sys.exit(1)
  pp.pprint(client.getAdPlansByPageIndex(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getAllAdPlanTypes':
  if len(args) != 0:
    print 'getAllAdPlanTypes requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAllAdPlanTypes())

elif cmd == 'updateVerifiedStatus':
  if len(args) != 2:
    print 'updateVerifiedStatus requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateVerifiedStatus(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
