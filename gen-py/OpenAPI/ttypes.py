#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
import Shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class DataType:
  RTB = 1
  OAS = 2

  _VALUES_TO_NAMES = {
    1: "RTB",
    2: "OAS",
  }

  _NAMES_TO_VALUES = {
    "RTB": 1,
    "OAS": 2,
  }


class MediaPrice:
  """
  Attributes:
   - media
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'media', None, None, ), # 1
    (2, TType.DOUBLE, 'price', None, None, ), # 2
  )

  def __init__(self, media=None, price=None,):
    self.media = media
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.media = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MediaPrice')
    if self.media is not None:
      oprot.writeFieldBegin('media', TType.STRING, 1)
      oprot.writeString(self.media)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 2)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PolicyData:
  """
  Attributes:
   - policy_id
   - adid
   - bid_price
   - dsp_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'policy_id', None, None, ), # 1
    (2, TType.I32, 'adid', None, None, ), # 2
    (3, TType.DOUBLE, 'bid_price', None, None, ), # 3
    (4, TType.STRING, 'dsp_name', None, None, ), # 4
  )

  def __init__(self, policy_id=None, adid=None, bid_price=None, dsp_name=None,):
    self.policy_id = policy_id
    self.adid = adid
    self.bid_price = bid_price
    self.dsp_name = dsp_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.policy_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.adid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.bid_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.dsp_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PolicyData')
    if self.policy_id is not None:
      oprot.writeFieldBegin('policy_id', TType.I32, 1)
      oprot.writeI32(self.policy_id)
      oprot.writeFieldEnd()
    if self.adid is not None:
      oprot.writeFieldBegin('adid', TType.I32, 2)
      oprot.writeI32(self.adid)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.DOUBLE, 3)
      oprot.writeDouble(self.bid_price)
      oprot.writeFieldEnd()
    if self.dsp_name is not None:
      oprot.writeFieldBegin('dsp_name', TType.STRING, 4)
      oprot.writeString(self.dsp_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdData:
  """
  Attributes:
   - ad_id
   - business_type
   - width
   - height
   - view_type: 广告形式 view Type
  0x01 嵌入式
  0x02 浮窗
  *0x03 嵌入式 && 浮窗
  0x04 背投
   - priority
   - blackurl
   - whiteurl
   - regions
   - acceptflows
   - creative_type
   - ad_category
   - sensitive_category
   - click_through_url
   - destination_url
   - charge_type
   - charge_price
   - is_general
   - media_price
   - sp_id
   - has_text
   - params
   - time_interval
   - day_num
   - show_num
   - type_id
   - show_js
   - click_js
   - is_first_page
   - group_id
   - budget
   - plan_id
   - smooth_control
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ad_id', None, None, ), # 1
    (2, TType.I32, 'business_type', None,     2, ), # 2
    (3, TType.I32, 'width', None, None, ), # 3
    (4, TType.I32, 'height', None, None, ), # 4
    (5, TType.I32, 'view_type', None, None, ), # 5
    (6, TType.I32, 'priority', None,     3, ), # 6
    (7, TType.LIST, 'blackurl', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'whiteurl', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'regions', (TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'acceptflows', (TType.I32,None), None, ), # 10
    (11, TType.I32, 'creative_type', None,     1, ), # 11
    (12, TType.I32, 'ad_category', None, None, ), # 12
    (13, TType.I32, 'sensitive_category', None, None, ), # 13
    (14, TType.STRING, 'click_through_url', None, None, ), # 14
    (15, TType.STRING, 'destination_url', None, None, ), # 15
    (16, TType.I32, 'charge_type', None,     1, ), # 16
    (17, TType.DOUBLE, 'charge_price', None, None, ), # 17
    (18, TType.I32, 'is_general', None, None, ), # 18
    (19, TType.LIST, 'media_price', (TType.STRUCT,(MediaPrice, MediaPrice.thrift_spec)), None, ), # 19
    (20, TType.STRING, 'sp_id', None, None, ), # 20
    (21, TType.I32, 'has_text', None, None, ), # 21
    (22, TType.STRING, 'params', None, None, ), # 22
    (23, TType.I32, 'time_interval', None, None, ), # 23
    (24, TType.I32, 'day_num', None, None, ), # 24
    (25, TType.I32, 'show_num', None, None, ), # 25
    (26, TType.I32, 'type_id', None, None, ), # 26
    (27, TType.STRING, 'show_js', None, None, ), # 27
    (28, TType.STRING, 'click_js', None, None, ), # 28
    (29, TType.I32, 'is_first_page', None, None, ), # 29
    (30, TType.I32, 'group_id', None, None, ), # 30
    (31, TType.DOUBLE, 'budget', None, None, ), # 31
    (32, TType.I32, 'plan_id', None, None, ), # 32
    (33, TType.I32, 'smooth_control', None, None, ), # 33
  )

  def __init__(self, ad_id=None, business_type=thrift_spec[2][4], width=None, height=None, view_type=None, priority=thrift_spec[6][4], blackurl=None, whiteurl=None, regions=None, acceptflows=None, creative_type=thrift_spec[11][4], ad_category=None, sensitive_category=None, click_through_url=None, destination_url=None, charge_type=thrift_spec[16][4], charge_price=None, is_general=None, media_price=None, sp_id=None, has_text=None, params=None, time_interval=None, day_num=None, show_num=None, type_id=None, show_js=None, click_js=None, is_first_page=None, group_id=None, budget=None, plan_id=None, smooth_control=None,):
    self.ad_id = ad_id
    self.business_type = business_type
    self.width = width
    self.height = height
    self.view_type = view_type
    self.priority = priority
    self.blackurl = blackurl
    self.whiteurl = whiteurl
    self.regions = regions
    self.acceptflows = acceptflows
    self.creative_type = creative_type
    self.ad_category = ad_category
    self.sensitive_category = sensitive_category
    self.click_through_url = click_through_url
    self.destination_url = destination_url
    self.charge_type = charge_type
    self.charge_price = charge_price
    self.is_general = is_general
    self.media_price = media_price
    self.sp_id = sp_id
    self.has_text = has_text
    self.params = params
    self.time_interval = time_interval
    self.day_num = day_num
    self.show_num = show_num
    self.type_id = type_id
    self.show_js = show_js
    self.click_js = click_js
    self.is_first_page = is_first_page
    self.group_id = group_id
    self.budget = budget
    self.plan_id = plan_id
    self.smooth_control = smooth_control

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ad_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.business_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.view_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.priority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.blackurl = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.blackurl.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.whiteurl = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.whiteurl.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.regions = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.regions.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.acceptflows = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI32();
            self.acceptflows.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.creative_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.ad_category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.sensitive_category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.click_through_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.destination_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.charge_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.charge_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.is_general = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.media_price = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = MediaPrice()
            _elem29.read(iprot)
            self.media_price.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.sp_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.has_text = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.params = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.time_interval = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.day_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.show_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.show_js = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.click_js = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.is_first_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.budget = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.plan_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.smooth_control = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdData')
    if self.ad_id is not None:
      oprot.writeFieldBegin('ad_id', TType.I32, 1)
      oprot.writeI32(self.ad_id)
      oprot.writeFieldEnd()
    if self.business_type is not None:
      oprot.writeFieldBegin('business_type', TType.I32, 2)
      oprot.writeI32(self.business_type)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I32, 3)
      oprot.writeI32(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 4)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    if self.view_type is not None:
      oprot.writeFieldBegin('view_type', TType.I32, 5)
      oprot.writeI32(self.view_type)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 6)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.blackurl is not None:
      oprot.writeFieldBegin('blackurl', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.blackurl))
      for iter30 in self.blackurl:
        oprot.writeString(iter30)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.whiteurl is not None:
      oprot.writeFieldBegin('whiteurl', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.whiteurl))
      for iter31 in self.whiteurl:
        oprot.writeString(iter31)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.regions is not None:
      oprot.writeFieldBegin('regions', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.regions))
      for iter32 in self.regions:
        oprot.writeString(iter32)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.acceptflows is not None:
      oprot.writeFieldBegin('acceptflows', TType.LIST, 10)
      oprot.writeListBegin(TType.I32, len(self.acceptflows))
      for iter33 in self.acceptflows:
        oprot.writeI32(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creative_type is not None:
      oprot.writeFieldBegin('creative_type', TType.I32, 11)
      oprot.writeI32(self.creative_type)
      oprot.writeFieldEnd()
    if self.ad_category is not None:
      oprot.writeFieldBegin('ad_category', TType.I32, 12)
      oprot.writeI32(self.ad_category)
      oprot.writeFieldEnd()
    if self.sensitive_category is not None:
      oprot.writeFieldBegin('sensitive_category', TType.I32, 13)
      oprot.writeI32(self.sensitive_category)
      oprot.writeFieldEnd()
    if self.click_through_url is not None:
      oprot.writeFieldBegin('click_through_url', TType.STRING, 14)
      oprot.writeString(self.click_through_url)
      oprot.writeFieldEnd()
    if self.destination_url is not None:
      oprot.writeFieldBegin('destination_url', TType.STRING, 15)
      oprot.writeString(self.destination_url)
      oprot.writeFieldEnd()
    if self.charge_type is not None:
      oprot.writeFieldBegin('charge_type', TType.I32, 16)
      oprot.writeI32(self.charge_type)
      oprot.writeFieldEnd()
    if self.charge_price is not None:
      oprot.writeFieldBegin('charge_price', TType.DOUBLE, 17)
      oprot.writeDouble(self.charge_price)
      oprot.writeFieldEnd()
    if self.is_general is not None:
      oprot.writeFieldBegin('is_general', TType.I32, 18)
      oprot.writeI32(self.is_general)
      oprot.writeFieldEnd()
    if self.media_price is not None:
      oprot.writeFieldBegin('media_price', TType.LIST, 19)
      oprot.writeListBegin(TType.STRUCT, len(self.media_price))
      for iter34 in self.media_price:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sp_id is not None:
      oprot.writeFieldBegin('sp_id', TType.STRING, 20)
      oprot.writeString(self.sp_id)
      oprot.writeFieldEnd()
    if self.has_text is not None:
      oprot.writeFieldBegin('has_text', TType.I32, 21)
      oprot.writeI32(self.has_text)
      oprot.writeFieldEnd()
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRING, 22)
      oprot.writeString(self.params)
      oprot.writeFieldEnd()
    if self.time_interval is not None:
      oprot.writeFieldBegin('time_interval', TType.I32, 23)
      oprot.writeI32(self.time_interval)
      oprot.writeFieldEnd()
    if self.day_num is not None:
      oprot.writeFieldBegin('day_num', TType.I32, 24)
      oprot.writeI32(self.day_num)
      oprot.writeFieldEnd()
    if self.show_num is not None:
      oprot.writeFieldBegin('show_num', TType.I32, 25)
      oprot.writeI32(self.show_num)
      oprot.writeFieldEnd()
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 26)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.show_js is not None:
      oprot.writeFieldBegin('show_js', TType.STRING, 27)
      oprot.writeString(self.show_js)
      oprot.writeFieldEnd()
    if self.click_js is not None:
      oprot.writeFieldBegin('click_js', TType.STRING, 28)
      oprot.writeString(self.click_js)
      oprot.writeFieldEnd()
    if self.is_first_page is not None:
      oprot.writeFieldBegin('is_first_page', TType.I32, 29)
      oprot.writeI32(self.is_first_page)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 30)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.budget is not None:
      oprot.writeFieldBegin('budget', TType.DOUBLE, 31)
      oprot.writeDouble(self.budget)
      oprot.writeFieldEnd()
    if self.plan_id is not None:
      oprot.writeFieldBegin('plan_id', TType.I32, 32)
      oprot.writeI32(self.plan_id)
      oprot.writeFieldEnd()
    if self.smooth_control is not None:
      oprot.writeFieldBegin('smooth_control', TType.I32, 33)
      oprot.writeI32(self.smooth_control)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdVersion:
  """
  Attributes:
   - id
   - version
   - media_name
   - dataType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'version', None, None, ), # 2
    (3, TType.STRING, 'media_name', None, None, ), # 3
    (4, TType.I32, 'dataType', None, None, ), # 4
  )

  def __init__(self, id=None, version=None, media_name=None, dataType=None,):
    self.id = id
    self.version = version
    self.media_name = media_name
    self.dataType = dataType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.media_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.dataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdVersion')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 2)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.media_name is not None:
      oprot.writeFieldBegin('media_name', TType.STRING, 3)
      oprot.writeString(self.media_name)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.I32, 4)
      oprot.writeI32(self.dataType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
