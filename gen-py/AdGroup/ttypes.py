#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
import Shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class AdGroupPolicy:
  """
  Attributes:
   - id
   - group_id
   - herd_id
   - bid_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'group_id', None, None, ), # 2
    (3, TType.I32, 'herd_id', None, None, ), # 3
    (4, TType.DOUBLE, 'bid_price', None, None, ), # 4
  )

  def __init__(self, id=None, group_id=None, herd_id=None, bid_price=None,):
    self.id = id
    self.group_id = group_id
    self.herd_id = herd_id
    self.bid_price = bid_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.herd_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.bid_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdGroupPolicy')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 2)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.herd_id is not None:
      oprot.writeFieldBegin('herd_id', TType.I32, 3)
      oprot.writeI32(self.herd_id)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.bid_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdGroupHost:
  """
  Attributes:
   - id
   - host
   - group_id
   - bid_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'host', None, None, ), # 2
    (3, TType.I32, 'group_id', None, None, ), # 3
    (4, TType.DOUBLE, 'bid_price', None, None, ), # 4
  )

  def __init__(self, id=None, host=None, group_id=None, bid_price=None,):
    self.id = id
    self.host = host
    self.group_id = group_id
    self.bid_price = bid_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.host = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.bid_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdGroupHost')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 2)
      oprot.writeString(self.host)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 3)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.bid_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdGroup:
  """
  Attributes:
   - group_id
   - name
   - uid
   - version
   - plan_id
   - start_date
   - end_date
   - freq
   - is_first_page
   - include_host
   - exclude_host
   - area_value
   - area_lable
   - enabled
   - ctime
   - mtime
   - media_type
   - bid_price
   - flow_src
   - colum1
   - colum2
   - media_name
   - policys
   - hosts
   - time_interval
   - day_num
   - show_num
   - host_set_object
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'group_id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'uid', None, None, ), # 3
    (4, TType.I32, 'version', None, None, ), # 4
    (5, TType.I32, 'plan_id', None, None, ), # 5
    (6, TType.I32, 'start_date', None, None, ), # 6
    (7, TType.I32, 'end_date', None, None, ), # 7
    (8, TType.I32, 'freq', None, None, ), # 8
    (9, TType.I32, 'is_first_page', None, None, ), # 9
    (10, TType.STRING, 'include_host', None, None, ), # 10
    (11, TType.STRING, 'exclude_host', None, None, ), # 11
    (12, TType.STRING, 'area_value', None, None, ), # 12
    (13, TType.STRING, 'area_lable', None, None, ), # 13
    (14, TType.I32, 'enabled', None,     1, ), # 14
    (15, TType.I32, 'ctime', None, None, ), # 15
    (16, TType.I32, 'mtime', None, None, ), # 16
    (17, TType.I32, 'media_type', None,     1, ), # 17
    (18, TType.DOUBLE, 'bid_price', None, None, ), # 18
    (19, TType.I32, 'flow_src', None,     1, ), # 19
    (20, TType.I32, 'colum1', None, None, ), # 20
    (21, TType.STRING, 'colum2', None, None, ), # 21
    (22, TType.STRING, 'media_name', None, None, ), # 22
    (23, TType.LIST, 'policys', (TType.STRUCT,(AdGroupPolicy, AdGroupPolicy.thrift_spec)), None, ), # 23
    (24, TType.LIST, 'hosts', (TType.STRUCT,(AdGroupHost, AdGroupHost.thrift_spec)), None, ), # 24
    (25, TType.I32, 'time_interval', None, None, ), # 25
    (26, TType.I32, 'day_num', None, None, ), # 26
    (27, TType.I32, 'show_num', None, None, ), # 27
    (28, TType.STRING, 'host_set_object', None, None, ), # 28
  )

  def __init__(self, group_id=None, name=None, uid=None, version=None, plan_id=None, start_date=None, end_date=None, freq=None, is_first_page=None, include_host=None, exclude_host=None, area_value=None, area_lable=None, enabled=thrift_spec[14][4], ctime=None, mtime=None, media_type=thrift_spec[17][4], bid_price=None, flow_src=thrift_spec[19][4], colum1=None, colum2=None, media_name=None, policys=None, hosts=None, time_interval=None, day_num=None, show_num=None, host_set_object=None,):
    self.group_id = group_id
    self.name = name
    self.uid = uid
    self.version = version
    self.plan_id = plan_id
    self.start_date = start_date
    self.end_date = end_date
    self.freq = freq
    self.is_first_page = is_first_page
    self.include_host = include_host
    self.exclude_host = exclude_host
    self.area_value = area_value
    self.area_lable = area_lable
    self.enabled = enabled
    self.ctime = ctime
    self.mtime = mtime
    self.media_type = media_type
    self.bid_price = bid_price
    self.flow_src = flow_src
    self.colum1 = colum1
    self.colum2 = colum2
    self.media_name = media_name
    self.policys = policys
    self.hosts = hosts
    self.time_interval = time_interval
    self.day_num = day_num
    self.show_num = show_num
    self.host_set_object = host_set_object

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.plan_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.start_date = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.end_date = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.freq = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.is_first_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.include_host = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.exclude_host = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.area_value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.area_lable = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.enabled = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.ctime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.mtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.media_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.bid_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.flow_src = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.colum1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.colum2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.media_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.policys = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = AdGroupPolicy()
            _elem5.read(iprot)
            self.policys.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.LIST:
          self.hosts = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = AdGroupHost()
            _elem11.read(iprot)
            self.hosts.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.time_interval = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.day_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.show_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.host_set_object = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdGroup')
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 1)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 3)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 4)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.plan_id is not None:
      oprot.writeFieldBegin('plan_id', TType.I32, 5)
      oprot.writeI32(self.plan_id)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.I32, 6)
      oprot.writeI32(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.I32, 7)
      oprot.writeI32(self.end_date)
      oprot.writeFieldEnd()
    if self.freq is not None:
      oprot.writeFieldBegin('freq', TType.I32, 8)
      oprot.writeI32(self.freq)
      oprot.writeFieldEnd()
    if self.is_first_page is not None:
      oprot.writeFieldBegin('is_first_page', TType.I32, 9)
      oprot.writeI32(self.is_first_page)
      oprot.writeFieldEnd()
    if self.include_host is not None:
      oprot.writeFieldBegin('include_host', TType.STRING, 10)
      oprot.writeString(self.include_host)
      oprot.writeFieldEnd()
    if self.exclude_host is not None:
      oprot.writeFieldBegin('exclude_host', TType.STRING, 11)
      oprot.writeString(self.exclude_host)
      oprot.writeFieldEnd()
    if self.area_value is not None:
      oprot.writeFieldBegin('area_value', TType.STRING, 12)
      oprot.writeString(self.area_value)
      oprot.writeFieldEnd()
    if self.area_lable is not None:
      oprot.writeFieldBegin('area_lable', TType.STRING, 13)
      oprot.writeString(self.area_lable)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.I32, 14)
      oprot.writeI32(self.enabled)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I32, 15)
      oprot.writeI32(self.ctime)
      oprot.writeFieldEnd()
    if self.mtime is not None:
      oprot.writeFieldBegin('mtime', TType.I32, 16)
      oprot.writeI32(self.mtime)
      oprot.writeFieldEnd()
    if self.media_type is not None:
      oprot.writeFieldBegin('media_type', TType.I32, 17)
      oprot.writeI32(self.media_type)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.DOUBLE, 18)
      oprot.writeDouble(self.bid_price)
      oprot.writeFieldEnd()
    if self.flow_src is not None:
      oprot.writeFieldBegin('flow_src', TType.I32, 19)
      oprot.writeI32(self.flow_src)
      oprot.writeFieldEnd()
    if self.colum1 is not None:
      oprot.writeFieldBegin('colum1', TType.I32, 20)
      oprot.writeI32(self.colum1)
      oprot.writeFieldEnd()
    if self.colum2 is not None:
      oprot.writeFieldBegin('colum2', TType.STRING, 21)
      oprot.writeString(self.colum2)
      oprot.writeFieldEnd()
    if self.media_name is not None:
      oprot.writeFieldBegin('media_name', TType.STRING, 22)
      oprot.writeString(self.media_name)
      oprot.writeFieldEnd()
    if self.policys is not None:
      oprot.writeFieldBegin('policys', TType.LIST, 23)
      oprot.writeListBegin(TType.STRUCT, len(self.policys))
      for iter12 in self.policys:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hosts is not None:
      oprot.writeFieldBegin('hosts', TType.LIST, 24)
      oprot.writeListBegin(TType.STRUCT, len(self.hosts))
      for iter13 in self.hosts:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.time_interval is not None:
      oprot.writeFieldBegin('time_interval', TType.I32, 25)
      oprot.writeI32(self.time_interval)
      oprot.writeFieldEnd()
    if self.day_num is not None:
      oprot.writeFieldBegin('day_num', TType.I32, 26)
      oprot.writeI32(self.day_num)
      oprot.writeFieldEnd()
    if self.show_num is not None:
      oprot.writeFieldBegin('show_num', TType.I32, 27)
      oprot.writeI32(self.show_num)
      oprot.writeFieldEnd()
    if self.host_set_object is not None:
      oprot.writeFieldBegin('host_set_object', TType.STRING, 28)
      oprot.writeString(self.host_set_object)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
