#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import AdGroupService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 addAdgroup(AdGroup adGroup)'
  print '  i32 addAdGroupAndPolicy(AdGroup adGroup,  cids)'
  print '  i32 addAdGroupsAndPolicys( adGroups,  cids)'
  print '  i32 delAdGroup(i32 group_id)'
  print '  i32 delAdGroups( adGroups)'
  print '  AdGroup findAdGroupById(i32 group_id)'
  print '   batchFindAdGroupById( group_ids)'
  print '   findAdGroupByInt( int_params)'
  print '  i32 updateStatusByGid(i32 group_id, PlanStatus status)'
  print '  i32 updateStatusByPid(i32 plan_id, PlanStatus status)'
  print '  i32 updateStatusByUid(i32 uid, PlanStatus status)'
  print '  i32 delAdGroupByUid(i32 plan_id)'
  print '   getAdGroupsByUid(i32 uid)'
  print '   getAdGroupByPid(i32 pid)'
  print '   getAdGroupsByPidUid(i32 uid, i32 pid)'
  print '  i32 insertPolicy(AdGroupPolicy policy)'
  print '  i32 insertHost( hosts)'
  print '  i32 updateAdGroup(AdGroup adGroup)'
  print '   getPolicyIdByGid(i32 group_id)'
  print '   getHostsByGid(i32 group_id)'
  print '  i32 getNumOfAdGroupPagesByPlanId(i32 plan_id, i32 page_size)'
  print '   getAdGroupsByPageIndex(i32 page_index, i32 page_size, i32 plan_id)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AdGroupService.Client(protocol)
transport.open()

if cmd == 'addAdgroup':
  if len(args) != 1:
    print 'addAdgroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.addAdgroup(eval(args[0]),))

elif cmd == 'addAdGroupAndPolicy':
  if len(args) != 2:
    print 'addAdGroupAndPolicy requires 2 args'
    sys.exit(1)
  pp.pprint(client.addAdGroupAndPolicy(eval(args[0]),eval(args[1]),))

elif cmd == 'addAdGroupsAndPolicys':
  if len(args) != 2:
    print 'addAdGroupsAndPolicys requires 2 args'
    sys.exit(1)
  pp.pprint(client.addAdGroupsAndPolicys(eval(args[0]),eval(args[1]),))

elif cmd == 'delAdGroup':
  if len(args) != 1:
    print 'delAdGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.delAdGroup(eval(args[0]),))

elif cmd == 'delAdGroups':
  if len(args) != 1:
    print 'delAdGroups requires 1 args'
    sys.exit(1)
  pp.pprint(client.delAdGroups(eval(args[0]),))

elif cmd == 'findAdGroupById':
  if len(args) != 1:
    print 'findAdGroupById requires 1 args'
    sys.exit(1)
  pp.pprint(client.findAdGroupById(eval(args[0]),))

elif cmd == 'batchFindAdGroupById':
  if len(args) != 1:
    print 'batchFindAdGroupById requires 1 args'
    sys.exit(1)
  pp.pprint(client.batchFindAdGroupById(eval(args[0]),))

elif cmd == 'findAdGroupByInt':
  if len(args) != 1:
    print 'findAdGroupByInt requires 1 args'
    sys.exit(1)
  pp.pprint(client.findAdGroupByInt(eval(args[0]),))

elif cmd == 'updateStatusByGid':
  if len(args) != 2:
    print 'updateStatusByGid requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateStatusByGid(eval(args[0]),eval(args[1]),))

elif cmd == 'updateStatusByPid':
  if len(args) != 2:
    print 'updateStatusByPid requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateStatusByPid(eval(args[0]),eval(args[1]),))

elif cmd == 'updateStatusByUid':
  if len(args) != 2:
    print 'updateStatusByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateStatusByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'delAdGroupByUid':
  if len(args) != 1:
    print 'delAdGroupByUid requires 1 args'
    sys.exit(1)
  pp.pprint(client.delAdGroupByUid(eval(args[0]),))

elif cmd == 'getAdGroupsByUid':
  if len(args) != 1:
    print 'getAdGroupsByUid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAdGroupsByUid(eval(args[0]),))

elif cmd == 'getAdGroupByPid':
  if len(args) != 1:
    print 'getAdGroupByPid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAdGroupByPid(eval(args[0]),))

elif cmd == 'getAdGroupsByPidUid':
  if len(args) != 2:
    print 'getAdGroupsByPidUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAdGroupsByPidUid(eval(args[0]),eval(args[1]),))

elif cmd == 'insertPolicy':
  if len(args) != 1:
    print 'insertPolicy requires 1 args'
    sys.exit(1)
  pp.pprint(client.insertPolicy(eval(args[0]),))

elif cmd == 'insertHost':
  if len(args) != 1:
    print 'insertHost requires 1 args'
    sys.exit(1)
  pp.pprint(client.insertHost(eval(args[0]),))

elif cmd == 'updateAdGroup':
  if len(args) != 1:
    print 'updateAdGroup requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateAdGroup(eval(args[0]),))

elif cmd == 'getPolicyIdByGid':
  if len(args) != 1:
    print 'getPolicyIdByGid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPolicyIdByGid(eval(args[0]),))

elif cmd == 'getHostsByGid':
  if len(args) != 1:
    print 'getHostsByGid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getHostsByGid(eval(args[0]),))

elif cmd == 'getNumOfAdGroupPagesByPlanId':
  if len(args) != 2:
    print 'getNumOfAdGroupPagesByPlanId requires 2 args'
    sys.exit(1)
  pp.pprint(client.getNumOfAdGroupPagesByPlanId(eval(args[0]),eval(args[1]),))

elif cmd == 'getAdGroupsByPageIndex':
  if len(args) != 3:
    print 'getAdGroupsByPageIndex requires 3 args'
    sys.exit(1)
  pp.pprint(client.getAdGroupsByPageIndex(eval(args[0]),eval(args[1]),eval(args[2]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
