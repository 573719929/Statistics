#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
import Shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ORDER:
  ASC = 1
  DESC = 2

  _VALUES_TO_NAMES = {
    1: "ASC",
    2: "DESC",
  }

  _NAMES_TO_VALUES = {
    "ASC": 1,
    "DESC": 2,
  }


class queryOptions:
  """
  Attributes:
   - id
   - startAt
   - endAt
   - areaid
   - source
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'startAt', None, None, ), # 2
    (3, TType.STRING, 'endAt', None, None, ), # 3
    (4, TType.LIST, 'areaid', (TType.STRING,None), [
    ], ), # 4
    (5, TType.I32, 'source', None,     0, ), # 5
  )

  def __init__(self, id=None, startAt=None, endAt=None, areaid=thrift_spec[4][4], source=thrift_spec[5][4],):
    self.id = id
    self.startAt = startAt
    self.endAt = endAt
    if areaid is self.thrift_spec[4][4]:
      areaid = [
    ]
    self.areaid = areaid
    self.source = source

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.startAt = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.endAt = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.areaid = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.areaid.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.source = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryOptions')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.startAt is not None:
      oprot.writeFieldBegin('startAt', TType.STRING, 2)
      oprot.writeString(self.startAt)
      oprot.writeFieldEnd()
    if self.endAt is not None:
      oprot.writeFieldBegin('endAt', TType.STRING, 3)
      oprot.writeString(self.endAt)
      oprot.writeFieldEnd()
    if self.areaid is not None:
      oprot.writeFieldBegin('areaid', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.areaid))
      for iter6 in self.areaid:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 5)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pageOptions:
  """
  Attributes:
   - pageNumber
   - pageSize
   - order
   - orderBy
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pageNumber', None, 1, ), # 1
    (2, TType.I32, 'pageSize', None, 10, ), # 2
    (3, TType.I32, 'order', None,     1, ), # 3
    (4, TType.STRING, 'orderBy', None, None, ), # 4
  )

  def __init__(self, pageNumber=thrift_spec[1][4], pageSize=thrift_spec[2][4], order=thrift_spec[3][4], orderBy=None,):
    self.pageNumber = pageNumber
    self.pageSize = pageSize
    self.order = order
    self.orderBy = orderBy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pageNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.order = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.orderBy = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pageOptions')
    if self.pageNumber is not None:
      oprot.writeFieldBegin('pageNumber', TType.I32, 1)
      oprot.writeI32(self.pageNumber)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 2)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    if self.order is not None:
      oprot.writeFieldBegin('order', TType.I32, 3)
      oprot.writeI32(self.order)
      oprot.writeFieldEnd()
    if self.orderBy is not None:
      oprot.writeFieldBegin('orderBy', TType.STRING, 4)
      oprot.writeString(self.orderBy)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Response:
  """
  Attributes:
   - id
   - push
   - show
   - click
   - cost
   - bid
   - bidres
   - selfcost
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'push', None, None, ), # 2
    (3, TType.STRING, 'show', None, None, ), # 3
    (4, TType.STRING, 'click', None, None, ), # 4
    (5, TType.STRING, 'cost', None, None, ), # 5
    (6, TType.STRING, 'bid', None, None, ), # 6
    (7, TType.STRING, 'bidres', None, None, ), # 7
    (8, TType.STRING, 'selfcost', None, None, ), # 8
  )

  def __init__(self, id=None, push=None, show=None, click=None, cost=None, bid=None, bidres=None, selfcost=None,):
    self.id = id
    self.push = push
    self.show = show
    self.click = click
    self.cost = cost
    self.bid = bid
    self.bidres = bidres
    self.selfcost = selfcost

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.push = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.show = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.click = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bidres = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.selfcost = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Response')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.push is not None:
      oprot.writeFieldBegin('push', TType.STRING, 2)
      oprot.writeString(self.push)
      oprot.writeFieldEnd()
    if self.show is not None:
      oprot.writeFieldBegin('show', TType.STRING, 3)
      oprot.writeString(self.show)
      oprot.writeFieldEnd()
    if self.click is not None:
      oprot.writeFieldBegin('click', TType.STRING, 4)
      oprot.writeString(self.click)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.STRING, 5)
      oprot.writeString(self.cost)
      oprot.writeFieldEnd()
    if self.bid is not None:
      oprot.writeFieldBegin('bid', TType.STRING, 6)
      oprot.writeString(self.bid)
      oprot.writeFieldEnd()
    if self.bidres is not None:
      oprot.writeFieldBegin('bidres', TType.STRING, 7)
      oprot.writeString(self.bidres)
      oprot.writeFieldEnd()
    if self.selfcost is not None:
      oprot.writeFieldBegin('selfcost', TType.STRING, 8)
      oprot.writeString(self.selfcost)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportResult:
  """
  Attributes:
   - totalSize
   - currentSize
   - totalPage
   - pageNumber
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalSize', None, None, ), # 1
    (2, TType.I32, 'currentSize', None, None, ), # 2
    (3, TType.I32, 'totalPage', None, None, ), # 3
    (4, TType.I32, 'pageNumber', None, None, ), # 4
    (5, TType.LIST, 'data', (TType.STRUCT,(Response, Response.thrift_spec)), None, ), # 5
  )

  def __init__(self, totalSize=None, currentSize=None, totalPage=None, pageNumber=None, data=None,):
    self.totalSize = totalSize
    self.currentSize = currentSize
    self.totalPage = totalPage
    self.pageNumber = pageNumber
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.currentSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalPage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.data = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Response()
            _elem12.read(iprot)
            self.data.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportResult')
    if self.totalSize is not None:
      oprot.writeFieldBegin('totalSize', TType.I32, 1)
      oprot.writeI32(self.totalSize)
      oprot.writeFieldEnd()
    if self.currentSize is not None:
      oprot.writeFieldBegin('currentSize', TType.I32, 2)
      oprot.writeI32(self.currentSize)
      oprot.writeFieldEnd()
    if self.totalPage is not None:
      oprot.writeFieldBegin('totalPage', TType.I32, 3)
      oprot.writeI32(self.totalPage)
      oprot.writeFieldEnd()
    if self.pageNumber is not None:
      oprot.writeFieldBegin('pageNumber', TType.I32, 4)
      oprot.writeI32(self.pageNumber)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter13 in self.data:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
