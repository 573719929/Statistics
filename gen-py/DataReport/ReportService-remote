#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ReportService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  reportResult AdReportByAdid(queryOptions q, pageOptions p)'
  print '  reportResult AdReportByGroupId(queryOptions q, pageOptions p)'
  print '  reportResult GroupReportByPlanId(queryOptions q, pageOptions p)'
  print '  reportResult PlanReportByUid(queryOptions q, pageOptions p)'
  print '  double getCostByUid(queryOptions q)'
  print '  reportResult AreaByAdid(queryOptions q, pageOptions p)'
  print '  reportResult AreaByGid(queryOptions q, pageOptions p)'
  print '  reportResult AreaByPid(queryOptions q, pageOptions p)'
  print '  reportResult AreaByUid(queryOptions q, pageOptions p)'
  print '  reportResult DayByAdid(queryOptions q, pageOptions p)'
  print '  reportResult DayByGid(queryOptions q, pageOptions p)'
  print '  reportResult DayByPid(queryOptions q, pageOptions p)'
  print '  reportResult DayByUid(queryOptions q, pageOptions p)'
  print '  reportResult SourceByAdid(queryOptions q, pageOptions p)'
  print '  reportResult SourceByGid(queryOptions q, pageOptions p)'
  print '  reportResult SourceByPid(queryOptions q, pageOptions p)'
  print '  reportResult SourceByUid(queryOptions q, pageOptions p)'
  print '  reportResult HourByAdid(queryOptions q, pageOptions p)'
  print '  reportResult HourByGid(queryOptions q, pageOptions p)'
  print '  reportResult HourByPid(queryOptions q, pageOptions p)'
  print '  reportResult HourByUid(queryOptions q, pageOptions p)'
  print '  reportResult HostByAdid(queryOptions q, pageOptions p)'
  print '  reportResult HostByGid(queryOptions q, pageOptions p)'
  print '  reportResult HostByPid(queryOptions q, pageOptions p)'
  print '  reportResult HostByUid(queryOptions q, pageOptions p)'
  print '  reportResult AdspaceByAdid(queryOptions q, pageOptions p)'
  print '  reportResult AdspaceByGid(queryOptions q, pageOptions p)'
  print '  reportResult AdspaceByPid(queryOptions q, pageOptions p)'
  print '  reportResult AdspaceByUid(queryOptions q, pageOptions p)'
  print '  void ping(i32 ignoreme)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ReportService.Client(protocol)
transport.open()

if cmd == 'AdReportByAdid':
  if len(args) != 2:
    print 'AdReportByAdid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AdReportByAdid(eval(args[0]),eval(args[1]),))

elif cmd == 'AdReportByGroupId':
  if len(args) != 2:
    print 'AdReportByGroupId requires 2 args'
    sys.exit(1)
  pp.pprint(client.AdReportByGroupId(eval(args[0]),eval(args[1]),))

elif cmd == 'GroupReportByPlanId':
  if len(args) != 2:
    print 'GroupReportByPlanId requires 2 args'
    sys.exit(1)
  pp.pprint(client.GroupReportByPlanId(eval(args[0]),eval(args[1]),))

elif cmd == 'PlanReportByUid':
  if len(args) != 2:
    print 'PlanReportByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.PlanReportByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'getCostByUid':
  if len(args) != 1:
    print 'getCostByUid requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCostByUid(eval(args[0]),))

elif cmd == 'AreaByAdid':
  if len(args) != 2:
    print 'AreaByAdid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AreaByAdid(eval(args[0]),eval(args[1]),))

elif cmd == 'AreaByGid':
  if len(args) != 2:
    print 'AreaByGid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AreaByGid(eval(args[0]),eval(args[1]),))

elif cmd == 'AreaByPid':
  if len(args) != 2:
    print 'AreaByPid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AreaByPid(eval(args[0]),eval(args[1]),))

elif cmd == 'AreaByUid':
  if len(args) != 2:
    print 'AreaByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AreaByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'DayByAdid':
  if len(args) != 2:
    print 'DayByAdid requires 2 args'
    sys.exit(1)
  pp.pprint(client.DayByAdid(eval(args[0]),eval(args[1]),))

elif cmd == 'DayByGid':
  if len(args) != 2:
    print 'DayByGid requires 2 args'
    sys.exit(1)
  pp.pprint(client.DayByGid(eval(args[0]),eval(args[1]),))

elif cmd == 'DayByPid':
  if len(args) != 2:
    print 'DayByPid requires 2 args'
    sys.exit(1)
  pp.pprint(client.DayByPid(eval(args[0]),eval(args[1]),))

elif cmd == 'DayByUid':
  if len(args) != 2:
    print 'DayByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.DayByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'SourceByAdid':
  if len(args) != 2:
    print 'SourceByAdid requires 2 args'
    sys.exit(1)
  pp.pprint(client.SourceByAdid(eval(args[0]),eval(args[1]),))

elif cmd == 'SourceByGid':
  if len(args) != 2:
    print 'SourceByGid requires 2 args'
    sys.exit(1)
  pp.pprint(client.SourceByGid(eval(args[0]),eval(args[1]),))

elif cmd == 'SourceByPid':
  if len(args) != 2:
    print 'SourceByPid requires 2 args'
    sys.exit(1)
  pp.pprint(client.SourceByPid(eval(args[0]),eval(args[1]),))

elif cmd == 'SourceByUid':
  if len(args) != 2:
    print 'SourceByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.SourceByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'HourByAdid':
  if len(args) != 2:
    print 'HourByAdid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HourByAdid(eval(args[0]),eval(args[1]),))

elif cmd == 'HourByGid':
  if len(args) != 2:
    print 'HourByGid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HourByGid(eval(args[0]),eval(args[1]),))

elif cmd == 'HourByPid':
  if len(args) != 2:
    print 'HourByPid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HourByPid(eval(args[0]),eval(args[1]),))

elif cmd == 'HourByUid':
  if len(args) != 2:
    print 'HourByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HourByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'HostByAdid':
  if len(args) != 2:
    print 'HostByAdid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HostByAdid(eval(args[0]),eval(args[1]),))

elif cmd == 'HostByGid':
  if len(args) != 2:
    print 'HostByGid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HostByGid(eval(args[0]),eval(args[1]),))

elif cmd == 'HostByPid':
  if len(args) != 2:
    print 'HostByPid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HostByPid(eval(args[0]),eval(args[1]),))

elif cmd == 'HostByUid':
  if len(args) != 2:
    print 'HostByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.HostByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'AdspaceByAdid':
  if len(args) != 2:
    print 'AdspaceByAdid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AdspaceByAdid(eval(args[0]),eval(args[1]),))

elif cmd == 'AdspaceByGid':
  if len(args) != 2:
    print 'AdspaceByGid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AdspaceByGid(eval(args[0]),eval(args[1]),))

elif cmd == 'AdspaceByPid':
  if len(args) != 2:
    print 'AdspaceByPid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AdspaceByPid(eval(args[0]),eval(args[1]),))

elif cmd == 'AdspaceByUid':
  if len(args) != 2:
    print 'AdspaceByUid requires 2 args'
    sys.exit(1)
  pp.pprint(client.AdspaceByUid(eval(args[0]),eval(args[1]),))

elif cmd == 'ping':
  if len(args) != 1:
    print 'ping requires 1 args'
    sys.exit(1)
  pp.pprint(client.ping(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
