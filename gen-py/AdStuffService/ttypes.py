#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
import Shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class AdStuff:
  """
  Attributes:
   - ad_stuff_id
   - uid
   - plan_id
   - group_id
   - status
   - name
   - media_name
   - media_type
   - type
   - width
   - height
   - title
   - description
   - image_url
   - thumb_url
   - crop_url
   - landing_page
   - ctime
   - mtime
   - size
   - version
   - has_text
   - show_js
   - click_js
   - apply_date
   - column1
   - column2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ad_stuff_id', None, None, ), # 1
    (2, TType.I32, 'uid', None, None, ), # 2
    (3, TType.I32, 'plan_id', None, None, ), # 3
    (4, TType.I32, 'group_id', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.STRING, 'name', None, None, ), # 6
    (7, TType.STRING, 'media_name', None, None, ), # 7
    (8, TType.I32, 'media_type', None, None, ), # 8
    (9, TType.I32, 'type', None, None, ), # 9
    (10, TType.I32, 'width', None, None, ), # 10
    (11, TType.I32, 'height', None, None, ), # 11
    (12, TType.STRING, 'title', None, None, ), # 12
    (13, TType.STRING, 'description', None, None, ), # 13
    (14, TType.STRING, 'image_url', None, None, ), # 14
    (15, TType.STRING, 'thumb_url', None, None, ), # 15
    (16, TType.STRING, 'crop_url', None, None, ), # 16
    (17, TType.STRING, 'landing_page', None, None, ), # 17
    (18, TType.I32, 'ctime', None, None, ), # 18
    (19, TType.I32, 'mtime', None, None, ), # 19
    (20, TType.I32, 'size', None, None, ), # 20
    (21, TType.I32, 'version', None, None, ), # 21
    (22, TType.I32, 'has_text', None, None, ), # 22
    (23, TType.STRING, 'show_js', None, None, ), # 23
    (24, TType.STRING, 'click_js', None, None, ), # 24
    (25, TType.I32, 'apply_date', None, None, ), # 25
    (26, TType.I32, 'column1', None, None, ), # 26
    (27, TType.STRING, 'column2', None, None, ), # 27
  )

  def __init__(self, ad_stuff_id=None, uid=None, plan_id=None, group_id=None, status=None, name=None, media_name=None, media_type=None, type=None, width=None, height=None, title=None, description=None, image_url=None, thumb_url=None, crop_url=None, landing_page=None, ctime=None, mtime=None, size=None, version=None, has_text=None, show_js=None, click_js=None, apply_date=None, column1=None, column2=None,):
    self.ad_stuff_id = ad_stuff_id
    self.uid = uid
    self.plan_id = plan_id
    self.group_id = group_id
    self.status = status
    self.name = name
    self.media_name = media_name
    self.media_type = media_type
    self.type = type
    self.width = width
    self.height = height
    self.title = title
    self.description = description
    self.image_url = image_url
    self.thumb_url = thumb_url
    self.crop_url = crop_url
    self.landing_page = landing_page
    self.ctime = ctime
    self.mtime = mtime
    self.size = size
    self.version = version
    self.has_text = has_text
    self.show_js = show_js
    self.click_js = click_js
    self.apply_date = apply_date
    self.column1 = column1
    self.column2 = column2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ad_stuff_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.plan_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.group_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.media_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.media_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.image_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.thumb_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.crop_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.landing_page = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.ctime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.mtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.has_text = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.show_js = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.click_js = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.apply_date = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.column1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.column2 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdStuff')
    if self.ad_stuff_id is not None:
      oprot.writeFieldBegin('ad_stuff_id', TType.I32, 1)
      oprot.writeI32(self.ad_stuff_id)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 2)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.plan_id is not None:
      oprot.writeFieldBegin('plan_id', TType.I32, 3)
      oprot.writeI32(self.plan_id)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 4)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 6)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.media_name is not None:
      oprot.writeFieldBegin('media_name', TType.STRING, 7)
      oprot.writeString(self.media_name)
      oprot.writeFieldEnd()
    if self.media_type is not None:
      oprot.writeFieldBegin('media_type', TType.I32, 8)
      oprot.writeI32(self.media_type)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 9)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I32, 10)
      oprot.writeI32(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 11)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 12)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 13)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.image_url is not None:
      oprot.writeFieldBegin('image_url', TType.STRING, 14)
      oprot.writeString(self.image_url)
      oprot.writeFieldEnd()
    if self.thumb_url is not None:
      oprot.writeFieldBegin('thumb_url', TType.STRING, 15)
      oprot.writeString(self.thumb_url)
      oprot.writeFieldEnd()
    if self.crop_url is not None:
      oprot.writeFieldBegin('crop_url', TType.STRING, 16)
      oprot.writeString(self.crop_url)
      oprot.writeFieldEnd()
    if self.landing_page is not None:
      oprot.writeFieldBegin('landing_page', TType.STRING, 17)
      oprot.writeString(self.landing_page)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I32, 18)
      oprot.writeI32(self.ctime)
      oprot.writeFieldEnd()
    if self.mtime is not None:
      oprot.writeFieldBegin('mtime', TType.I32, 19)
      oprot.writeI32(self.mtime)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I32, 20)
      oprot.writeI32(self.size)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 21)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.has_text is not None:
      oprot.writeFieldBegin('has_text', TType.I32, 22)
      oprot.writeI32(self.has_text)
      oprot.writeFieldEnd()
    if self.show_js is not None:
      oprot.writeFieldBegin('show_js', TType.STRING, 23)
      oprot.writeString(self.show_js)
      oprot.writeFieldEnd()
    if self.click_js is not None:
      oprot.writeFieldBegin('click_js', TType.STRING, 24)
      oprot.writeString(self.click_js)
      oprot.writeFieldEnd()
    if self.apply_date is not None:
      oprot.writeFieldBegin('apply_date', TType.I32, 25)
      oprot.writeI32(self.apply_date)
      oprot.writeFieldEnd()
    if self.column1 is not None:
      oprot.writeFieldBegin('column1', TType.I32, 26)
      oprot.writeI32(self.column1)
      oprot.writeFieldEnd()
    if self.column2 is not None:
      oprot.writeFieldBegin('column2', TType.STRING, 27)
      oprot.writeString(self.column2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
