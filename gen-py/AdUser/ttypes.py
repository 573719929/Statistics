#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class AccountStatus:
  NORMAL = 1
  FROZEN = 2
  ALL = -1

  _VALUES_TO_NAMES = {
    1: "NORMAL",
    2: "FROZEN",
    -1: "ALL",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 1,
    "FROZEN": 2,
    "ALL": -1,
  }


class AdUser:
  """
  Attributes:
   - uid
   - user_name
   - passwd
   - cell_phone
   - role_id
   - address
   - tel
   - user_local
   - account
   - zip_code
   - colum1
   - colum2
   - reg_time
   - host
   - account_status
   - up_time
   - creator_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, None, ), # 1
    (2, TType.STRING, 'user_name', None, None, ), # 2
    (3, TType.STRING, 'passwd', None, None, ), # 3
    (4, TType.STRING, 'cell_phone', None, None, ), # 4
    (5, TType.I32, 'role_id', None, None, ), # 5
    (6, TType.STRING, 'address', None, None, ), # 6
    (7, TType.STRING, 'tel', None, None, ), # 7
    (8, TType.STRING, 'user_local', None, None, ), # 8
    (9, TType.DOUBLE, 'account', None, None, ), # 9
    (10, TType.STRING, 'zip_code', None, None, ), # 10
    (11, TType.I32, 'colum1', None, None, ), # 11
    (12, TType.STRING, 'colum2', None, None, ), # 12
    (13, TType.I32, 'reg_time', None, None, ), # 13
    (14, TType.STRING, 'host', None, None, ), # 14
    (15, TType.I32, 'account_status', None,     1, ), # 15
    (16, TType.I32, 'up_time', None, None, ), # 16
    (17, TType.I32, 'creator_id', None, None, ), # 17
  )

  def __init__(self, uid=None, user_name=None, passwd=None, cell_phone=None, role_id=None, address=None, tel=None, user_local=None, account=None, zip_code=None, colum1=None, colum2=None, reg_time=None, host=None, account_status=thrift_spec[15][4], up_time=None, creator_id=None,):
    self.uid = uid
    self.user_name = user_name
    self.passwd = passwd
    self.cell_phone = cell_phone
    self.role_id = role_id
    self.address = address
    self.tel = tel
    self.user_local = user_local
    self.account = account
    self.zip_code = zip_code
    self.colum1 = colum1
    self.colum2 = colum2
    self.reg_time = reg_time
    self.host = host
    self.account_status = account_status
    self.up_time = up_time
    self.creator_id = creator_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cell_phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.role_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.tel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.user_local = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.account = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.zip_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.colum1 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.colum2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.reg_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.host = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.account_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.up_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.creator_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdUser')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.user_name is not None:
      oprot.writeFieldBegin('user_name', TType.STRING, 2)
      oprot.writeString(self.user_name)
      oprot.writeFieldEnd()
    if self.passwd is not None:
      oprot.writeFieldBegin('passwd', TType.STRING, 3)
      oprot.writeString(self.passwd)
      oprot.writeFieldEnd()
    if self.cell_phone is not None:
      oprot.writeFieldBegin('cell_phone', TType.STRING, 4)
      oprot.writeString(self.cell_phone)
      oprot.writeFieldEnd()
    if self.role_id is not None:
      oprot.writeFieldBegin('role_id', TType.I32, 5)
      oprot.writeI32(self.role_id)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 6)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.tel is not None:
      oprot.writeFieldBegin('tel', TType.STRING, 7)
      oprot.writeString(self.tel)
      oprot.writeFieldEnd()
    if self.user_local is not None:
      oprot.writeFieldBegin('user_local', TType.STRING, 8)
      oprot.writeString(self.user_local)
      oprot.writeFieldEnd()
    if self.account is not None:
      oprot.writeFieldBegin('account', TType.DOUBLE, 9)
      oprot.writeDouble(self.account)
      oprot.writeFieldEnd()
    if self.zip_code is not None:
      oprot.writeFieldBegin('zip_code', TType.STRING, 10)
      oprot.writeString(self.zip_code)
      oprot.writeFieldEnd()
    if self.colum1 is not None:
      oprot.writeFieldBegin('colum1', TType.I32, 11)
      oprot.writeI32(self.colum1)
      oprot.writeFieldEnd()
    if self.colum2 is not None:
      oprot.writeFieldBegin('colum2', TType.STRING, 12)
      oprot.writeString(self.colum2)
      oprot.writeFieldEnd()
    if self.reg_time is not None:
      oprot.writeFieldBegin('reg_time', TType.I32, 13)
      oprot.writeI32(self.reg_time)
      oprot.writeFieldEnd()
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 14)
      oprot.writeString(self.host)
      oprot.writeFieldEnd()
    if self.account_status is not None:
      oprot.writeFieldBegin('account_status', TType.I32, 15)
      oprot.writeI32(self.account_status)
      oprot.writeFieldEnd()
    if self.up_time is not None:
      oprot.writeFieldBegin('up_time', TType.I32, 16)
      oprot.writeI32(self.up_time)
      oprot.writeFieldEnd()
    if self.creator_id is not None:
      oprot.writeFieldBegin('creator_id', TType.I32, 17)
      oprot.writeI32(self.creator_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
